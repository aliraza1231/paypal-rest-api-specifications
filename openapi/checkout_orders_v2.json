{
  "openapi": "3.0.3",
  "info": {
    "title": "Orders",
    "description": "An order represents a payment between two or more parties. Use the Orders API to create, update, retrieve, authorize, and capture orders.",
    "version": "2.13"
  },
  "paths": {
    "/v2/checkout/orders": {
      "post": {
        "summary": "Create order",
        "description": "Creates an order. Merchants and partners can add Level 2 and 3 data to payments to reduce risk and payment processing costs. For more information about processing payments, see <a href=\"https://developer.paypal.com/docs/checkout/advanced/processing/\">checkout</a> or <a href=\"https://developer.paypal.com/docs/multiparty/checkout/advanced/processing/\">multiparty checkout</a>.<blockquote><strong>Note:</strong> For error handling and troubleshooting, see <a href=\"/api/rest/reference/orders/v2/errors/#create-order\">Orders v2 errors</a>.</blockquote>",
        "operationId": "CreateOrder",
        "responses": {
          "200": {
            "description": "A successful response to an idempotent request returns the HTTP `200 OK` status code with a JSON response body that shows order details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                },
                "examples": {
                  "CreateOrder": {
                    "$ref": "#/components/examples/CreateOrderResponse"
                  }
                }
              }
            }
          },
          "201": {
            "description": "A successful request returns the HTTP `201 Created` status code and a JSON response body that includes by default a minimal response with the ID, status, and HATEOAS links. If you require the complete order resource representation, you must pass the <a href=\"/docs/api/orders/v2/#orders-create-header-parameters\"><code>Prefer: return=representation</code> request header</a>. This header value is not the default.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                },
                "examples": {
                  "CreateOrder": {
                    "$ref": "#/components/examples/CreateOrder"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not well-formed, syntactically incorrect, or violates schema.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed due to missing authorization header, or invalid authentication credentials.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedRequest"
                }
              }
            }
          },
          "422": {
            "description": "The requested action could not be performed, semantically incorrect, or failed business validation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableRequest"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/paypal_request_id"
          },
          {
            "$ref": "#/components/parameters/paypal_partner_attribution_id"
          },
          {
            "$ref": "#/components/parameters/paypal_client_metadata_id"
          },
          {
            "$ref": "#/components/parameters/prefer"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderRequest"
              },
              "examples": {
                "OrderRequest": {
                  "$ref": "#/components/examples/OrderRequest"
                }
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "Oauth2": [
              "https://uri.paypal.com/services/payments/payment",
              "https://uri.paypal.com/services/payments/orders/client-side-integration"
            ]
          }
        ],
        "tags": [
          "Orders"
        ]
      }
    },
    "/v2/checkout/orders/{id}": {
      "get": {
        "summary": "Show order details",
        "description": "Shows details for an order, by ID.<blockquote><strong>Note:</strong> For error handling and troubleshooting, see <a href=\"/api/rest/reference/orders/v2/errors/#get-order\">Orders v2 errors</a>.</blockquote>",
        "operationId": "GetOrder",
        "responses": {
          "200": {
            "description": "A successful request returns the HTTP `200 OK` status code and a JSON response body that shows order details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                },
                "examples": {
                  "Order": {
                    "$ref": "#/components/examples/Order"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed due to missing authorization header, or invalid authentication credentials.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedRequest"
                }
              }
            }
          },
          "404": {
            "description": "The specified resource does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "security": [
          {
            "Oauth2": [
              "https://uri.paypal.com/services/payments/payment",
              "https://uri.paypal.com/services/payments/orders/client-side-integration"
            ]
          }
        ],
        "tags": [
          "Orders"
        ]
      },
      "patch": {
        "summary": "Update order",
        "description": "Updates an order with a `CREATED` or `APPROVED` status. You cannot update an order with the `COMPLETED` status.<br/><br/>To make an update, you must provide a `reference_id`. If you omit this value with an order that contains only one purchase unit, PayPal sets the value to `default` which enables you to use the path: <code>\"/purchase_units/@reference_id=='default'/{attribute-or-object}\"</code>. Merchants and partners can add Level 2 and 3 data to payments to reduce risk and payment processing costs. For more information about processing payments, see <a href=\"https://developer.paypal.com/docs/checkout/advanced/processing/\">checkout</a> or <a href=\"https://developer.paypal.com/docs/multiparty/checkout/advanced/processing/\">multiparty checkout</a>.<blockquote><strong>Note:</strong> For error handling and troubleshooting, see <a href=\"/api/rest/reference/orders/v2/errors/#patch-order\">Orders v2 errors</a>.</blockquote>Patchable attributes or objects:<br/><br/><table><thead><th>Attribute</th><th>Op</th><th>Notes</th></thead><tbody><tr><td><code>intent</code></td><td>replace</td><td></td></tr><tr><td><code>payer</code></td><td>replace, add</td><td>Using replace op for <code>payer</code> will replace the whole <code>payer</code> object with the value sent in request.</td></tr><tr><td><code>purchase_units</code></td><td>replace, add</td><td></td></tr><tr><td><code>purchase_units[].custom_id</code></td><td>replace, add, remove</td><td></td></tr><tr><td><code>purchase_units[].description</code></td><td>replace, add, remove</td><td></td></tr><tr><td><code>purchase_units[].payee.email</code></td><td>replace</td><td></td></tr><tr><td><code>purchase_units[].shipping.name</code></td><td>replace, add</td><td></td></tr><tr><td><code>purchase_units[].shipping.address</code></td><td>replace, add</td><td></td></tr><tr><td><code>purchase_units[].shipping.type</code></td><td>replace, add</td><td></td></tr><tr><td><code>purchase_units[].soft_descriptor</code></td><td>replace, remove</td><td></td></tr><tr><td><code>purchase_units[].amount</code></td><td>replace</td><td></td></tr><tr><td><code>purchase_units[].items</code></td><td>replace, add, remove</td><td></td></tr><tr><td><code>purchase_units[].invoice_id</code></td><td>replace, add, remove</td><td></td></tr><tr><td><code>purchase_units[].payment_instruction</code></td><td>replace</td><td></td></tr><tr><td><code>purchase_units[].payment_instruction.disbursement_mode</code></td><td>replace</td><td>By default, <code>disbursement_mode</code> is <code>INSTANT</code>.</td></tr><tr><td><code>purchase_units[].payment_instruction.platform_fees</code></td><td>replace, add, remove</td><td></td></tr><tr><td><code>purchase_units[].supplementary_data.airline</code></td><td>replace, add, remove</td><td></td></tr><tr><td><code>purchase_units[].supplementary_data.card</code></td><td>replace, add, remove</td><td></td></tr><tr><td><code>application_context.client_configuration</code></td><td>replace, add</td><td></td></tr></tbody></table>",
        "operationId": "orders.patch",
        "responses": {
          "204": {
            "description": "A successful request returns the HTTP `204 No Content` status code with an empty object in the JSON response body."
          },
          "400": {
            "description": "Request is not well-formed, syntactically incorrect, or violates schema.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed due to missing authorization header, or invalid authentication credentials.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedRequest"
                }
              }
            }
          },
          "404": {
            "description": "The specified resource does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/orders-patch-response404-json"
                }
              }
            }
          },
          "422": {
            "description": "The requested action could not be performed, semantically incorrect, or failed business validation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/orders-patch-response422-json"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/patch_request"
        },
        "security": [
          {
            "Oauth2": [
              "https://uri.paypal.com/services/payments/payment",
              "https://uri.paypal.com/services/payments/orders/client-side-integration"
            ]
          }
        ],
        "tags": [
          "Orders"
        ]
      }
    },
    "/v2/checkout/orders/{id}/confirm-payment-source": {
      "post": {
        "summary": "Confirm the Order",
        "description": "Payer confirms their intent to pay for the the Order with the given payment source.",
        "operationId": "orders.confirm",
        "responses": {
          "200": {
            "description": "A successful request indicates that the payment source was added to the Order. A successful request returns the HTTP `200 OK` status code with a JSON response body that shows order details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Request is not well-formed, syntactically incorrect, or violates schema.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "403": {
            "description": "Authorization failed due to insufficient permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/orders-confirm-response403-json"
                }
              }
            }
          },
          "422": {
            "description": "The requested action could not be performed, semantically incorrect, or failed business validation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/orders-confirm-response422-json"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error has occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/paypal_client_metadata_id"
          },
          {
            "$ref": "#/components/parameters/prefer"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/confirm_order_request"
              },
              "examples": {
                "0": {
                  "$ref": "#/components/examples/confirm_order_request"
                }
              }
            }
          }
        },
        "security": [
          {
            "Oauth2": [
              "https://uri.paypal.com/services/payments/payment",
              "https://uri.paypal.com/services/payments/initiatepayment"
            ]
          }
        ],
        "tags": [
          "Orders"
        ]
      }
    },
    "/v2/checkout/orders/{id}/authorize": {
      "post": {
        "summary": "Authorize payment for order",
        "description": "Authorizes payment for an order. To successfully authorize payment for an order, the buyer must first approve the order or a valid payment_source must be provided in the request. A buyer can approve the order upon being redirected to the rel:approve URL that was returned in the HATEOAS links in the create order response.<blockquote><strong>Note:</strong> For error handling and troubleshooting, see <a href=\"/api/rest/reference/orders/v2/errors/#authorize-order\">Orders v2 errors</a>.</blockquote>",
        "operationId": "orders.authorize",
        "responses": {
          "200": {
            "description": "A successful response to an idempotent request returns the HTTP `200 OK` status code with a JSON response body that shows authorized payment details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/order_authorize_response"
                }
              }
            }
          },
          "201": {
            "description": "A successful response to a non-idempotent request returns the HTTP `201 Created` status code with a JSON response body that shows authorized payment details. If a duplicate response is retried, returns the HTTP `200 OK` status code. By default, the response is minimal. If you need the complete resource representation, you must pass the <a href=\"/docs/api/orders/v2/#orders-authorize-header-parameters\"><code>Prefer: return=representation</code> request header</a>.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/order_authorize_response"
                }
              }
            }
          },
          "400": {
            "description": "Request is not well-formed, syntactically incorrect, or violates schema.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed due to missing authorization header, or invalid authentication credentials.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedRequest"
                }
              }
            }
          },
          "403": {
            "description": "The authorized payment failed due to insufficient permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/orders-authorize-response403-json"
                }
              }
            }
          },
          "404": {
            "description": "The specified resource does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/orders-authorize-response404-json"
                }
              }
            }
          },
          "422": {
            "description": "The requested action could not be performed, semantically incorrect, or failed business validation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/orders-authorize-response422-json"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error has occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/paypal_request_id"
          },
          {
            "$ref": "#/components/parameters/prefer"
          },
          {
            "$ref": "#/components/parameters/paypal_client_metadata_id"
          },
          {
            "$ref": "#/components/parameters/paypal_auth_assertion"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/order_authorize_request"
              }
            }
          }
        },
        "security": [
          {
            "Oauth2": [
              "https://uri.paypal.com/services/payments/payment",
              "https://uri.paypal.com/services/payments/orders/client-side-integration"
            ]
          }
        ],
        "tags": [
          "Orders"
        ]
      }
    },
    "/v2/checkout/orders/{id}/capture": {
      "post": {
        "summary": "Capture payment for order",
        "description": "Captures payment for an order. To successfully capture payment for an order, the buyer must first approve the order or a valid payment_source must be provided in the request. A buyer can approve the order upon being redirected to the rel:approve URL that was returned in the HATEOAS links in the create order response.<blockquote><strong>Note:</strong> For error handling and troubleshooting, see <a href=\"/api/rest/reference/orders/v2/errors/#capture-order\">Orders v2 errors</a>.</blockquote>",
        "operationId": "CaptureOrder",
        "responses": {
          "200": {
            "description": "A successful response to an idempotent request returns the HTTP `200 OK` status code with a JSON response body that shows captured payment details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "201": {
            "description": "A successful response to a non-idempotent request returns the HTTP `201 Created` status code with a JSON response body that shows captured payment details. If a duplicate response is retried, returns the HTTP `200 OK` status code. By default, the response is minimal. If you need the complete resource representation, pass the <a href=\"/docs/api/orders/v2/#orders-authorize-header-parameters\"><code>Prefer: return=representation</code> request header</a>.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                },
                "examples": {
                  "CaptureOrder": {
                    "$ref": "#/components/examples/CaptureOrder"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Request is not well-formed, syntactically incorrect, or violates schema.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed due to missing authorization header, or invalid authentication credentials.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedRequest"
                }
              }
            }
          },
          "403": {
            "description": "The authorized payment failed due to insufficient permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Forbidden"
                }
              }
            }
          },
          "404": {
            "description": "The specified resource does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound"
                }
              }
            }
          },
          "422": {
            "description": "The requested action could not be performed, semantically incorrect, or failed business validation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CaptureOrdersUnprocessableRequest"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error has occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/paypal_request_id"
          },
          {
            "$ref": "#/components/parameters/prefer"
          },
          {
            "$ref": "#/components/parameters/paypal_client_metadata_id"
          },
          {
            "$ref": "#/components/parameters/paypal_auth_assertion"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderCaptureRequest"
              }
            }
          }
        },
        "security": [
          {
            "Oauth2": [
              "https://uri.paypal.com/services/payments/payment",
              "https://uri.paypal.com/services/payments/orders/client-side-integration"
            ]
          }
        ],
        "tags": [
          "Orders"
        ]
      }
    },
    "/v2/checkout/orders/{id}/track": {
      "post": {
        "summary": "Add tracking information for an Order.",
        "description": "Adds tracking information for an Order.",
        "operationId": "orders.track.create",
        "responses": {
          "200": {
            "description": "A successful response to an idempotent request returns the HTTP `200 OK` status code with a JSON response body that shows tracker details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "201": {
            "description": "A successful response to a non-idempotent request returns the HTTP `201 Created` status code with a JSON response body that shows tracker details. If a duplicate response is retried, returns the HTTP `200 OK` status code.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Request is not well-formed, syntactically incorrect, or violates schema.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "403": {
            "description": "Authorization failed due to insufficient permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/orders-track-create-response403-json"
                }
              }
            }
          },
          "404": {
            "description": "The specified resource does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/orders-track-create-response404-json"
                }
              }
            }
          },
          "422": {
            "description": "The requested action could not be performed, semantically incorrect, or failed business validation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/orders-track-create-response422-json"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error has occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/paypal_auth_assertion"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/order_tracker_request"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "Oauth2": [
              "https://uri.paypal.com/services/payments/payment"
            ]
          }
        ],
        "tags": [
          "Orders"
        ]
      }
    },
    "/v2/checkout/orders/{id}/trackers/{tracker_id}": {
      "patch": {
        "summary": "Update or cancel tracking information for a PayPal order",
        "description": "Updates or cancels the tracking information for a PayPal order, by ID. Updatable attributes or objects:<br/><br/><table><thead><th>Attribute</th><th>Op</th><th>Notes</th></thead><tbody></tr><tr><td><code>items</code></td><td>replace</td><td>Using replace op for <code>items</code> will replace the entire <code>items</code> object with the value sent in request.</td></tr><tr><td><code>notify_payer</code></td><td>replace, add</td><td></td></tr><tr><td><code>status</code></td><td>replace</td><td>Only patching status to CANCELLED is currently supported.</td></tr></tbody></table>",
        "operationId": "orders.trackers.patch",
        "responses": {
          "204": {
            "description": "A successful request returns the HTTP `204 No Content` status code with an empty object in the JSON response body."
          },
          "400": {
            "description": "Request is not well-formed, syntactically incorrect, or violates schema.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "403": {
            "description": "Authorization failed due to insufficient permissions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/orders-trackers-patch-response403-json"
                }
              }
            }
          },
          "404": {
            "description": "The specified resource does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/orders-trackers-patch-response404-json"
                }
              }
            }
          },
          "422": {
            "description": "The requested action could not be performed, semantically incorrect, or failed business validation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/orders-trackers-patch-response422-json"
                }
              }
            }
          },
          "500": {
            "description": "An internal server error has occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/default"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/tracker_id"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/patch_request"
        },
        "security": [
          {
            "Oauth2": [
              "https://uri.paypal.com/services/payments/payment"
            ]
          }
        ],
        "tags": [
          "Orders"
        ]
      }
    }
  },
  "tags": [
    {
      "name": "Orders",
      "description": "Use the `/orders` resource to create, update, retrieve, authorize, capture and track orders."
    }
  ],
  "externalDocs": {
    "url": "https://developer.paypal.com/docs/api/orders/v2/"
  },
  "servers": [
    {
      "url": "https://api-m.sandbox.paypal.com",
      "description": "PayPal Sandbox Environment"
    },
    {
      "url": "https://api-m.paypal.com",
      "description": "PayPal Live Environment"
    }
  ],
  "components": {
    "requestBodies": {
      "patch_request": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/patch_request"
            },
            "examples": {
              "0": {
                "$ref": "#/components/examples/patch_request"
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "Oauth2": {
        "type": "oauth2",
        "description": "Oauth 2.0 authentication",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "/v1/oauth2/token",
            "scopes": {
              "https://uri.paypal.com/services/payments/payment": "Manage payments and checkout workflow.",
              "https://uri.paypal.com/services/payments/payment/reference-transaction": "Permission to initiate reference transaction",
              "https://uri.paypal.com/services/payments/initiatepayment": "Initiates payments and checkout workflows.",
              "https://uri.paypal.com/services/payments/orders/client-side-integration": "Allows client-side integration on Create, Get, Patch, Authorize & Capture Order endpoints."
            }
          }
        }
      }
    },
    "parameters": {
      "paypal_request_id": {
        "name": "PayPal-Request-Id",
        "in": "header",
        "description": "The server stores keys for 6 hours. The API callers can request the times to up to 72 hours by speaking to their Account Manager.",
        "required": true,
        "schema": {
          "type": "string",
          "minLength": 1,
          "maxLength": 108
        },
        "example": "7b92603e-77ed-4896-8e78-5dea2050476a"
      },
      "paypal_partner_attribution_id": {
        "name": "PayPal-Partner-Attribution-Id",
        "in": "header",
        "required": false,
        "schema": {
          "type": "string",
          "minLength": 1,
          "maxLength": 36
        }
      },
      "paypal_client_metadata_id": {
        "name": "PayPal-Client-Metadata-Id",
        "in": "header",
        "required": false,
        "schema": {
          "type": "string",
          "minLength": 1,
          "maxLength": 36
        }
      },
      "prefer": {
        "name": "Prefer",
        "in": "header",
        "description": "The preferred server response upon successful completion of the request. Value is:return=minimal. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the <code>id</code>, <code>status</code> and HATEOAS links. return=representation. The server returns a complete resource representation, including the current state of the resource.",
        "required": false,
        "schema": {
          "type": "string",
          "minLength": 1,
          "maxLength": 25,
          "pattern": "^[a-zA-Z=]*$",
          "default": "return=minimal"
        }
      },
      "id": {
        "name": "id",
        "in": "path",
        "description": "The ID of the order for which to update payment details.",
        "required": true,
        "schema": {
          "type": "string",
          "minLength": 1,
          "maxLength": 36,
          "pattern": "^[A-Z0-9]+$"
        }
      },
      "fields": {
        "name": "fields",
        "description": "A comma-separated list of fields that should be returned for the order. Valid filter field is `payment_source`.",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "pattern": "^[a-z_]*$"
        }
      },
      "paypal_auth_assertion": {
        "name": "PayPal-Auth-Assertion",
        "in": "header",
        "description": "An API-caller-provided JSON Web Token (JWT) assertion that identifies the merchant. For details, see <a href=\"/api/rest/requests/#paypal-auth-assertion\">PayPal-Auth-Assertion</a>.",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "tracker_id": {
        "name": "tracker_id",
        "in": "path",
        "description": "The order tracking ID.",
        "required": true,
        "schema": {
          "type": "string",
          "minLength": 1,
          "maxLength": 36,
          "pattern": "^[A-Z0-9]+$"
        }
      }
    },
    "responses": {
      "default": {
        "description": "The default response.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/error_default"
            }
          }
        }
      }
    },
    "schemas": {
      "BadRequestError": {
        "properties": {
          "issues": {
            "$ref": "#/components/schemas/BadRequestIssues"
          }
        }
      },
      "UnauthorizedRequestError": {
        "properties": {
          "issues": {
            "$ref": "#/components/schemas/UnauthorizedErrorIssues"
          }
        }
      },
      "forbidden_error": {
        "properties": {
          "issues": {
            "$ref": "#/components/schemas/forbidden-error-issues"
          }
        }
      },
      "not_found_error": {
        "properties": {
          "issues": {
            "$ref": "#/components/schemas/not-found-error-issues"
          }
        }
      },
      "UnprocessableRequestError": {
        "properties": {
          "issues": {
            "$ref": "#/components/schemas/UnprocessableErrorIssues"
          }
        }
      },
      "ErrorDetails": {
        "title": "Error Details",
        "type": "object",
        "description": "The error details. Required for client-side `4XX` errors.",
        "properties": {
          "field": {
            "type": "string",
            "description": "The field that caused the error. If this field is in the body, set this value to the field's JSON pointer value. Required for client-side errors."
          },
          "value": {
            "type": "string",
            "description": "The value of the field that caused the error."
          },
          "location": {
            "type": "string",
            "description": "The location of the field that caused the error. Value is `body`, `path`, or `query`.",
            "default": "body"
          },
          "issue": {
            "type": "string",
            "description": "The unique, fine-grained application-level error code."
          },
          "description": {
            "type": "string",
            "description": "The human-readable description for an issue. The description can change over the lifetime of an API, so clients must not depend on this value."
          }
        },
        "required": [
          "issue"
        ]
      },
      "error_default": {
        "description": "The default error response.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/BadRequestResponse"
          },
          {
            "$ref": "#/components/schemas/UnauthorizedRequestResponse"
          },
          {
            "$ref": "#/components/schemas/ForbiddenRequest"
          },
          {
            "$ref": "#/components/schemas/ResourceNotFoundResponse"
          },
          {
            "$ref": "#/components/schemas/error_409"
          },
          {
            "$ref": "#/components/schemas/error_415"
          },
          {
            "$ref": "#/components/schemas/UnprocessableRequestResponse"
          },
          {
            "$ref": "#/components/schemas/InternalServerError"
          },
          {
            "$ref": "#/components/schemas/error_503"
          }
        ]
      },
      "BadRequestResponse": {
        "type": "object",
        "title": "400 Error",
        "description": "Error response for 400",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/BadRequestName"
          },
          "message": {
            "$ref": "#/components/schemas/BadRequestMessage"
          },
          "issues": {
            "$ref": "#/components/schemas/BadRequestIssuesDetails"
          },
          "debug_id": {
            "type": "string",
            "description": "The PayPal internal ID. Used for correlation purposes."
          },
          "information_link": {
            "type": "string",
            "description": "The information link, or URI, that shows detailed information about this error for the developer.",
            "readOnly": true
          }
        }
      },
      "UnauthorizedRequestResponse": {
        "type": "object",
        "title": "401 Error",
        "description": "Error response for 401",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/UnauthorizedRequestName"
          },
          "message": {
            "$ref": "#/components/schemas/UnauthorizedRequestMessage"
          },
          "issues": {
            "$ref": "#/components/schemas/UnauthorizedRequestIssuesDetails"
          },
          "debug_id": {
            "type": "string",
            "description": "The PayPal internal ID. Used for correlation purposes."
          },
          "information_link": {
            "type": "string",
            "description": "The information link, or URI, that shows detailed information about this error for the developer.",
            "readOnly": true
          }
        }
      },
      "ForbiddenRequest": {
        "type": "object",
        "title": "403 Error",
        "description": "Error response for 403",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/ForbiddenRequestName"
          },
          "message": {
            "$ref": "#/components/schemas/ForbiddenRequestMessage"
          },
          "issues": {
            "$ref": "#/components/schemas/ForbiddenRequestIssuesDetails"
          },
          "debug_id": {
            "type": "string",
            "description": "The PayPal internal ID. Used for correlation purposes."
          },
          "information_link": {
            "type": "string",
            "description": "The information link, or URI, that shows detailed information about this error for the developer.",
            "readOnly": true
          }
        }
      },
      "ResourceNotFoundResponse": {
        "type": "object",
        "title": "404 Error",
        "description": "Error response for 404",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/ResourceNotFoundName"
          },
          "message": {
            "$ref": "#/components/schemas/ResourceNotFoundMessage"
          },
          "issues": {
            "$ref": "#/components/schemas/ResourceNotFoundIssues"
          },
          "debug_id": {
            "type": "string",
            "description": "The PayPal internal ID. Used for correlation purposes."
          },
          "information_link": {
            "type": "string",
            "description": "The information link, or URI, that shows detailed information about this error for the developer.",
            "readOnly": true
          }
        }
      },
      "error_409": {
        "type": "object",
        "title": "409 Error",
        "description": "Error response for 409",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/error409-name"
          },
          "message": {
            "$ref": "#/components/schemas/error409-message"
          },
          "issues": {
            "$ref": "#/components/schemas/error409-issues"
          },
          "debug_id": {
            "type": "string",
            "description": "The PayPal internal ID. Used for correlation purposes."
          },
          "information_link": {
            "type": "string",
            "description": "The information link, or URI, that shows detailed information about this error for the developer.",
            "readOnly": true
          }
        }
      },
      "error_415": {
        "type": "object",
        "title": "415 Error",
        "description": "Error response for 415",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/error415-name"
          },
          "message": {
            "$ref": "#/components/schemas/error415-message"
          },
          "issues": {
            "$ref": "#/components/schemas/error415-issues"
          },
          "debug_id": {
            "type": "string",
            "description": "The PayPal internal ID. Used for correlation purposes."
          },
          "information_link": {
            "type": "string",
            "description": "The information link, or URI, that shows detailed information about this error for the developer.",
            "readOnly": true
          }
        }
      },
      "UnprocessableRequestResponse": {
        "type": "object",
        "title": "422 Error",
        "description": "Error response for 422",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/UnprocessableRequestName"
          },
          "message": {
            "$ref": "#/components/schemas/UnprocessableRequestmessage"
          },
          "issues": {
            "$ref": "#/components/schemas/UnprocessableRequestIssues"
          },
          "debug_id": {
            "type": "string",
            "description": "The PayPal internal ID. Used for correlation purposes."
          },
          "information_link": {
            "type": "string",
            "description": "The information link, or URI, that shows detailed information about this error for the developer.",
            "readOnly": true
          }
        }
      },
      "InternalServerError": {
        "type": "object",
        "title": "500 Error",
        "description": "Error response for 500",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/InternalServerErrorName"
          },
          "message": {
            "$ref": "#/components/schemas/InternalServerErrorMessage"
          },
          "debug_id": {
            "type": "string",
            "description": "The PayPal internal ID. Used for correlation purposes."
          },
          "information_link": {
            "$ref": "#/components/schemas/InternalServerErrorInformationLink"
          }
        },
        "example": {
          "name": "INTERNAL_SERVER_ERROR",
          "message": "An internal server error occurred.",
          "debug_id": "90957fca61718",
          "information_link": "https://developer.paypal.com/api/orders/v2/#error-INTERNAL_SERVER_ERROR"
        }
      },
      "error_503": {
        "type": "object",
        "title": "503 Error",
        "description": "Error response for 503",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/error503-name"
          },
          "message": {
            "$ref": "#/components/schemas/error503-message"
          },
          "debug_id": {
            "type": "string",
            "description": "The PayPal internal ID. Used for correlation purposes."
          },
          "information_link": {
            "type": "string",
            "description": "The information link, or URI, that shows detailed information about this error for the developer.",
            "readOnly": true
          }
        },
        "example": {
          "name": "SERVICE_UNAVAILABLE",
          "message": "Service Unavailable.",
          "debug_id": "90957fca61718",
          "information_link": "https://developer.paypal.com/docs/api/orders/v2/#error-SERVICE_UNAVAILABLE"
        }
      },
      "NotEnabledForCardProcessing": {
        "title": "NOT_ENABLED_FOR_CARD_PROCESSING",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/NotEnabledForCardProcessingIssue"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "ShippingOptionNotSupported": {
        "title": "SHIPPING_OPTIONS_NOT_SUPPORTED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/ShippingOptionNotSupportedIssue"
          },
          "description": {
            "$ref": "#/components/schemas/ShippingOptionNotSupportedDescription"
          }
        }
      },
      "PaymentIntentCheckout": {
        "type": "string",
        "title": "Payment Intent Checkout",
        "description": "The intent to either capture payment immediately or authorize a payment for an order after order creation.",
        "example": "CAPTURE",
        "enum": [
          "CAPTURE",
          "AUTHORIZE"
        ]
      },
      "Email": {
        "type": "string",
        "description": "The internationalized email address.<blockquote><strong>Note:</strong> Up to 64 characters are allowed before and 255 characters are allowed after the <code>@</code> sign. However, the generally accepted maximum length for an email address is 254 characters. The pattern verifies that an unquoted <code>@</code> sign exists.</blockquote>",
        "format": "merchant_common_email_address_v2",
        "maxLength": 254,
        "minLength": 3,
        "example": "customer@example.com",
        "pattern": "(?:[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+)*|(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?\\.)+[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-zA-Z0-9-]*[a-zA-Z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])"
      },
      "AccountId": {
        "type": "string",
        "title": "PayPal Account Identifier",
        "description": "The account identifier for a PayPal account.",
        "format": "ppaas_payer_id_v3",
        "minLength": 13,
        "maxLength": 13,
        "pattern": "^[2-9A-HJ-NP-Z]{13}$"
      },
      "PayerBase": {
        "type": "object",
        "title": "Payer Base",
        "description": "The customer who approves and pays for the order. The customer is also known as the payer.",
        "properties": {
          "email_address": {
            "$ref": "#/components/schemas/PayerEmailAddress"
          },
          "payer_id": {
            "$ref": "#/components/schemas/PayerId"
          }
        }
      },
      "Name": {
        "type": "object",
        "title": "Party Name",
        "description": "The name of the party.",
        "properties": {
          "prefix": {
            "type": "string",
            "description": "The prefix, or title, to the party's name.",
            "maxLength": 140
          },
          "given_name": {
            "type": "string",
            "description": "When the party is a person, the party's given, or first, name.",
            "maxLength": 140,
            "example": "John"
          },
          "surname": {
            "type": "string",
            "description": "When the party is a person, the party's surname or family name. Also known as the last name. Required when the party is a person. Use also to store multiple surnames including the matronymic, or mother's, surname.",
            "maxLength": 140,
            "example": "Doe"
          },
          "middle_name": {
            "type": "string",
            "description": "When the party is a person, the party's middle name. Use also to store multiple middle names including the patronymic, or father's, middle name.",
            "maxLength": 140
          },
          "suffix": {
            "type": "string",
            "description": "The suffix for the party's name.",
            "maxLength": 140
          },
          "alternate_full_name": {
            "type": "string",
            "description": "DEPRECATED. The party's alternate name. Can be a business name, nickname, or any other name that cannot be split into first, last name. Required when the party is a business.",
            "maxLength": 300
          },
          "full_name": {
            "type": "string",
            "description": "When the party is a person, the party's full name.",
            "maxLength": 300
          }
        }
      },
      "PhoneType": {
        "type": "string",
        "title": "Phone Type",
        "description": "The phone type.",
        "enum": [
          "FAX",
          "HOME",
          "MOBILE",
          "OTHER",
          "PAGER"
        ]
      },
      "DetailedPhone": {
        "type": "object",
        "title": "Phone",
        "description": "The phone number, in its canonical international [E.164 numbering plan format](https://www.itu.int/rec/T-REC-E.164/en).",
        "properties": {
          "country_code": {
            "type": "string",
            "description": "The country calling code (CC), in its canonical international [E.164 numbering plan format](https://www.itu.int/rec/T-REC-E.164/en). The combined length of the CC and the national number must not be greater than 15 digits. The national number consists of a national destination code (NDC) and subscriber number (SN).",
            "minLength": 1,
            "maxLength": 3,
            "pattern": "^[0-9]{1,3}?$"
          },
          "national_number": {
            "type": "string",
            "description": "The national number, in its canonical international [E.164 numbering plan format](https://www.itu.int/rec/T-REC-E.164/en). The combined length of the country calling code (CC) and the national number must not be greater than 15 digits. The national number consists of a national destination code (NDC) and subscriber number (SN).",
            "minLength": 1,
            "maxLength": 14,
            "pattern": "^[0-9]{1,14}?$"
          },
          "extension_number": {
            "type": "string",
            "description": "The extension number.",
            "minLength": 1,
            "maxLength": 15,
            "pattern": "^[0-9]{1,15}?$"
          }
        },
        "required": [
          "country_code",
          "national_number"
        ]
      },
      "PhoneWithType": {
        "type": "object",
        "title": "Phone With Type",
        "description": "The phone information.",
        "properties": {
          "phone_type": {
            "$ref": "#/components/schemas/PhoneType"
          },
          "phone_number": {
            "$ref": "#/components/schemas/PhoneNumber"
          }
        },
        "required": [
          "phone_number"
        ]
      },
      "DateNoTime": {
        "type": "string",
        "description": "The stand-alone date, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). To represent special legal values, such as a date of birth, you should use dates with no associated time or time-zone data. Whenever possible, use the standard `date_time` type. This regular expression does not validate all dates. For example, February 31 is valid and nothing is known about leap years.",
        "format": "ppaas_date_notime_v2",
        "minLength": 10,
        "maxLength": 10,
        "pattern": "^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$"
      },
      "TaxInfo": {
        "type": "object",
        "description": "The tax ID of the customer. The customer is also known as the payer. Both `tax_id` and `tax_id_type` are required.",
        "title": "Tax Information",
        "properties": {
          "tax_id": {
            "type": "string",
            "description": "The customer's tax ID value.",
            "minLength": 1,
            "maxLength": 14,
            "pattern": "([a-zA-Z0-9])"
          },
          "tax_id_type": {
            "$ref": "#/components/schemas/TaxIdType"
          }
        },
        "required": [
          "tax_id",
          "tax_id_type"
        ]
      },
      "CountryCode": {
        "type": "string",
        "description": "The [two-character ISO 3166-1 code](/api/rest/reference/country-codes/) that identifies the country or region.<blockquote><strong>Note:</strong> The country code for Great Britain is <code>GB</code> and not <code>UK</code> as used in the top-level domain names for that country. Use the `C2` country code for China worldwide for comparable uncontrolled price (CUP) method, bank card, and cross-border transactions.</blockquote>",
        "format": "ppaas_common_country_code_v2",
        "maxLength": 2,
        "minLength": 2,
        "pattern": "^([A-Z]{2}|C2)$"
      },
      "PortableInternationalPostalAddress": {
        "type": "object",
        "title": "Portable International Postal Address",
        "description": "The portable international postal address. Maps to [AddressValidationMetadata](https://github.com/googlei18n/libaddressinput/wiki/AddressValidationMetadata) and HTML 5.1 [Autofilling form controls: the autocomplete attribute](https://www.w3.org/TR/html51/sec-forms.html#autofilling-form-controls-the-autocomplete-attribute).",
        "properties": {
          "address_line_1": {
            "type": "string",
            "description": "The first line of the address. For example, number or street. For example, `173 Drury Lane`. Required for data entry and compliance and risk checks. Must contain the full address.",
            "maxLength": 300,
            "example": "2211 N First Street"
          },
          "address_line_2": {
            "type": "string",
            "description": "The second line of the address. For example, suite or apartment number.",
            "maxLength": 300,
            "example": "Building 17"
          },
          "address_line_3": {
            "type": "string",
            "description": "The third line of the address, if needed. For example, a street complement for Brazil, direction text, such as `next to Walmart`, or a landmark in an Indian address.",
            "maxLength": 100
          },
          "admin_area_4": {
            "type": "string",
            "description": "The neighborhood, ward, or district. Smaller than `admin_area_level_3` or `sub_locality`. Value is: The postal sorting code for Guernsey and many French territories, such as French Guiana. The fine-grained administrative levels in China.",
            "maxLength": 100
          },
          "admin_area_3": {
            "type": "string",
            "description": "A sub-locality, suburb, neighborhood, or district. Smaller than `admin_area_level_2`. Value is: Brazil. Suburb, bairro, or neighborhood. India. Sub-locality or district. Street name information is not always available but a sub-locality or district can be a very small area.",
            "maxLength": 100
          },
          "admin_area_2": {
            "type": "string",
            "description": "A city, town, or village. Smaller than `admin_area_level_1`.",
            "maxLength": 120,
            "example": "San Jose"
          },
          "admin_area_1": {
            "type": "string",
            "description": "The highest level sub-division in a country, which is usually a province, state, or ISO-3166-2 subdivision. Format for postal delivery. For example, `CA` and not `California`. Value, by country, is: UK. A county. US. A state. Canada. A province. Japan. A prefecture. Switzerland. A kanton.",
            "maxLength": 300,
            "example": "CA"
          },
          "postal_code": {
            "type": "string",
            "description": "The postal code, which is the zip code or equivalent. Typically required for countries with a postal code or an equivalent. See [postal code](https://en.wikipedia.org/wiki/Postal_code).",
            "maxLength": 60,
            "example": "95131"
          },
          "country_code": {
            "$ref": "#/components/schemas/TwoCharacterCountryCode"
          },
          "address_details": {
            "$ref": "#/components/schemas/AdditionalAddressDetails"
          }
        },
        "required": [
          "country_code"
        ]
      },
      "Payer": {
        "type": "object",
        "title": "Payer",
        "description": "The customer who approves and pays for the order. The customer is also known as the payer.",
        "format": "payer_v1",
        "allOf": [
          {
            "$ref": "#/components/schemas/PayerBase"
          },
          {
            "$ref": "#/components/schemas/PayerDetails"
          }
        ]
      },
      "CurrencyCode": {
        "description": "The [three-character ISO-4217 currency code](/api/rest/reference/currency-codes/) that identifies the currency.",
        "type": "string",
        "format": "ppaas_common_currency_code_v2",
        "minLength": 3,
        "maxLength": 3,
        "example": "USD"
      },
      "Money": {
        "type": "object",
        "title": "Money",
        "description": "The currency and amount for a financial transaction, such as a balance or payment due.",
        "properties": {
          "currency_code": {
            "$ref": "#/components/schemas/CurrencyCode"
          },
          "value": {
            "type": "string",
            "description": "The value, which might be:An integer for currencies like `JPY` that are not typically fractional. A decimal fraction for currencies like `TND` that are subdivided into thousandths. For the required number of decimal places for a currency code, see [Currency Codes](/api/rest/reference/currency-codes/).",
            "maxLength": 32,
            "pattern": "^((-?[0-9]+)|(-?([0-9]+)?[.][0-9]+))$",
            "example": "100.00"
          }
        },
        "required": [
          "currency_code",
          "value"
        ]
      },
      "AmountBreakdown": {
        "type": "object",
        "description": "The breakdown of the amount. Breakdown provides details such as total item amount, total tax amount, shipping, handling, insurance, and discounts, if any.",
        "title": "Amount Breakdown",
        "properties": {
          "item_total": {
            "$ref": "#/components/schemas/Subtotal"
          },
          "shipping": {
            "$ref": "#/components/schemas/ShippingFee"
          },
          "handling": {
            "$ref": "#/components/schemas/HandlingFee"
          },
          "tax_total": {
            "$ref": "#/components/schemas/TotalTax"
          },
          "insurance": {
            "$ref": "#/components/schemas/InsuranceFee"
          },
          "shipping_discount": {
            "$ref": "#/components/schemas/ShippingDiscount"
          },
          "discount": {
            "$ref": "#/components/schemas/OverallDiscount"
          }
        }
      },
      "AmountWithBreakdown": {
        "type": "object",
        "title": "Amount with Breakdown",
        "description": "The total order amount with an optional breakdown that provides details, such as the total item amount, total tax amount, shipping, handling, insurance, and discounts, if any.<br/>If you specify `amount.breakdown`, the amount equals `item_total` plus `tax_total` plus `shipping` plus `handling` plus `insurance` minus `shipping_discount` minus discount.<br/>The amount must be a positive number. For listed of supported currencies and decimal precision, see the PayPal REST APIs <a href=\"/docs/integration/direct/rest/currency-codes/\">Currency Codes</a>.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Money"
          },
          {
            "$ref": "#/components/schemas/AmountBreakdownDetail"
          }
        ]
      },
      "MerchantBase": {
        "type": "object",
        "title": "Merchant Base",
        "description": "The details for the merchant who receives the funds and fulfills the order. The merchant is also known as the payee.",
        "properties": {
          "email_address": {
            "$ref": "#/components/schemas/MerchantEmailAddress"
          },
          "merchant_id": {
            "$ref": "#/components/schemas/MerchantId"
          }
        }
      },
      "Merchant": {
        "type": "object",
        "title": "Merchant",
        "description": "The merchant who receives the funds and fulfills the order. The merchant is also known as the payee.",
        "allOf": [
          {
            "$ref": "#/components/schemas/MerchantBase"
          },
          {
            "additionalProperties": true
          }
        ]
      },
      "PlatformFee": {
        "type": "object",
        "title": "Platform Fee",
        "description": "The platform or partner fee, commission, or brokerage fee that is associated with the transaction. Not a separate or isolated transaction leg from the external perspective. The platform fee is limited in scope and is always associated with the original payment for the purchase unit.",
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/PlatformFeeAmount"
          },
          "payee": {
            "$ref": "#/components/schemas/PlatformFeePayee"
          }
        },
        "required": [
          "amount"
        ]
      },
      "DisbursementMode": {
        "type": "string",
        "title": "Disbursement Mode",
        "description": "The funds that are held on behalf of the merchant.",
        "default": "INSTANT",
        "minLength": 1,
        "maxLength": 16,
        "pattern": "^[A-Z_]+$",
        "example": "INSTANT",
        "enum": [
          "INSTANT",
          "DELAYED"
        ]
      },
      "PaymentInstruction": {
        "type": "object",
        "title": "Payment Instruction",
        "description": "Any additional payment instructions to be consider during payment processing. This processing instruction is applicable for Capturing an order or Authorizing an Order.",
        "properties": {
          "platform_fees": {
            "$ref": "#/components/schemas/PlatformFees"
          },
          "disbursement_mode": {
            "$ref": "#/components/schemas/PaymentDisbursementMode"
          },
          "payee_pricing_tier_id": {
            "type": "string",
            "description": "This field is only enabled for selected merchants/partners to use and provides the ability to trigger a specific pricing rate/plan for a payment transaction. The list of eligible 'payee_pricing_tier_id' would be provided to you by your Account Manager. Specifying values other than the one provided to you by your account manager would result in an error.",
            "minLength": 1,
            "maxLength": 20,
            "pattern": "^.*$"
          },
          "payee_receivable_fx_rate_id": {
            "type": "string",
            "description": "FX identifier generated returned by PayPal to be used for payment processing in order to honor FX rate (for eligible integrations) to be used when amount is settled/received into the payee account.",
            "maxLength": 4000,
            "minLength": 1,
            "pattern": "^.*$"
          }
        }
      },
      "PurchaseItem": {
        "type": "object",
        "title": "Item",
        "description": "The details for the items to be purchased.",
        "properties": {
          "name": {
            "type": "string",
            "description": "The item name or title.",
            "minLength": 1,
            "maxLength": 127
          },
          "unit_amount": {
            "$ref": "#/components/schemas/ItemUnitAmount"
          },
          "tax": {
            "$ref": "#/components/schemas/ItemTax"
          },
          "quantity": {
            "type": "string",
            "description": "The item quantity. Must be a whole number.",
            "maxLength": 10,
            "pattern": "^[1-9][0-9]{0,9}$"
          },
          "description": {
            "type": "string",
            "description": "The detailed item description.",
            "maxLength": 127
          },
          "sku": {
            "type": "string",
            "description": "The stock keeping unit (SKU) for the item.",
            "maxLength": 127
          },
          "category": {
            "$ref": "#/components/schemas/ItemCategory"
          }
        },
        "required": [
          "name",
          "unit_amount",
          "quantity"
        ]
      },
      "ShippingOptionTypeDetail": {
        "type": "string",
        "title": "Shipping Type",
        "description": "The method by which the payer wants to get their items.",
        "enum": [
          "SHIPPING",
          "PICKUP"
        ]
      },
      "ShippingOptionDetails": {
        "type": "object",
        "title": "Shipping Option",
        "description": "The options that the payee or merchant offers to the payer to ship or pick up their items.",
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique ID that identifies a payer-selected shipping option.",
            "maxLength": 127
          },
          "label": {
            "type": "string",
            "description": "A description that the payer sees, which helps them choose an appropriate shipping option. For example, `Free Shipping`, `USPS Priority Shipping`, `Expédition prioritaire USPS`, or `USPS yōuxiān fā huò`. Localize this description to the payer's locale.",
            "maxLength": 127
          },
          "type": {
            "$ref": "#/components/schemas/ShippingOptionType"
          },
          "amount": {
            "$ref": "#/components/schemas/ShippingCost"
          },
          "selected": {
            "type": "boolean",
            "description": "If the API request sets `selected = true`, it represents the shipping option that the payee or merchant expects to be pre-selected for the payer when they first view the `shipping.options` in the PayPal Checkout experience. As part of the response if a `shipping.option` contains `selected=true`, it represents the shipping option that the payer selected during the course of checkout with PayPal. Only one `shipping.option` can be set to `selected=true`."
          }
        },
        "required": [
          "id",
          "label",
          "selected"
        ]
      },
      "ShippingDetails": {
        "type": "object",
        "description": "The shipping details.",
        "title": "Shipping Details",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/ShippingPersonName"
          },
          "type": {
            "$ref": "#/components/schemas/ShippingType"
          },
          "options": {
            "$ref": "#/components/schemas/ShippingOptions"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          }
        }
      },
      "Level2CardProcessingData": {
        "type": "object",
        "title": "Level 2 Card Processing Data",
        "description": "The level 2 card processing data collections. If your merchant account has been configured for Level 2 processing this field will be passed to the processor on your behalf. Please contact your PayPal Technical Account Manager to define level 2 data for your business.",
        "properties": {
          "invoice_id": {
            "type": "string",
            "description": "Use this field to pass a purchase identification value of up to 12 ASCII characters for AIB and 17 ASCII characters for all other processors.",
            "minLength": 1,
            "maxLength": 17,
            "pattern": "^[\\w‘\\-.,\":;\\!?]*$"
          },
          "tax_total": {
            "$ref": "#/components/schemas/TotalTaxAmount"
          }
        }
      },
      "LineItem": {
        "type": "object",
        "title": "Lineitem",
        "description": "The line items for this purchase. If your merchant account has been configured for Level 3 processing this field will be passed to the processor on your behalf.",
        "allOf": [
          {
            "$ref": "#/components/schemas/PurchaseItem"
          },
          {
            "$ref": "#/components/schemas/LineItemDetail"
          }
        ]
      },
      "Level3CardProcessingData": {
        "type": "object",
        "title": "Level 3 Card Processing Data",
        "description": "The level 3 card processing data collections, If your merchant account has been configured for Level 3 processing this field will be passed to the processor on your behalf. Please contact your PayPal Technical Account Manager to define level 3 data for your business.",
        "properties": {
          "shipping_amount": {
            "$ref": "#/components/schemas/ShippingAmount"
          },
          "duty_amount": {
            "$ref": "#/components/schemas/DutyAmount"
          },
          "discount_amount": {
            "$ref": "#/components/schemas/DiscountAmount"
          },
          "shipping_address": {
            "$ref": "#/components/schemas/Address"
          },
          "ships_from_postal_code": {
            "type": "string",
            "description": "Use this field to specify the postal code of the shipping location.",
            "minLength": 1,
            "maxLength": 60,
            "pattern": "^[a-zA-Z0-9_'.-]*$"
          },
          "line_items": {
            "$ref": "#/components/schemas/LineItems"
          }
        }
      },
      "CardSupplementaryDataDetails": {
        "type": "object",
        "title": "Card Supplementary Data",
        "description": "Merchants and partners can add Level 2 and 3 data to payments to reduce risk and payment processing costs. For more information about processing payments, see <a href=\"https://developer.paypal.com/docs/checkout/advanced/processing/\">checkout</a> or <a href=\"https://developer.paypal.com/docs/multiparty/checkout/advanced/processing/\">multiparty checkout</a>.",
        "properties": {
          "level_2": {
            "$ref": "#/components/schemas/Level2CardProcessingData"
          },
          "level_3": {
            "$ref": "#/components/schemas/Level3CardProcessingData"
          }
        }
      },
      "SupplementaryDataDetails": {
        "title": "Supplementary Data",
        "type": "object",
        "description": "Supplementary data about a payment. This object passes information that can be used to improve risk assessments and processing costs, for example, by providing Level 2 and Level 3 payment data.",
        "properties": {
          "card": {
            "$ref": "#/components/schemas/CardSupplementaryData"
          }
        }
      },
      "OrderPurchaseUnitDetails": {
        "type": "object",
        "title": "Purchase Unit Request",
        "description": "The purchase unit request. Includes required information for the payment contract.",
        "properties": {
          "reference_id": {
            "type": "string",
            "description": "The API caller-provided external ID for the purchase unit. Required for multiple purchase units when you must update the order through `PATCH`. If you omit this value and the order contains only one purchase unit, PayPal sets this value to `default`.",
            "minLength": 1,
            "maxLength": 256,
            "example": "d9f80740-38f0-11e8-b467-0ed5f89f718b"
          },
          "amount": {
            "$ref": "#/components/schemas/TotalOrderAmount"
          },
          "payee": {
            "$ref": "#/components/schemas/Payee"
          },
          "payment_instruction": {
            "$ref": "#/components/schemas/PaymentInstruction"
          },
          "description": {
            "type": "string",
            "description": "The purchase description. The maximum length of the character is dependent on the type of characters used. The character length is specified assuming a US ASCII character. Depending on type of character; (e.g. accented character, Japanese characters) the number of characters that that can be specified as input might not equal the permissible max length.",
            "minLength": 1,
            "maxLength": 127
          },
          "custom_id": {
            "type": "string",
            "description": "The API caller-provided external ID. Used to reconcile client transactions with PayPal transactions. Appears in transaction and settlement reports but is not visible to the payer.",
            "minLength": 1,
            "maxLength": 127
          },
          "invoice_id": {
            "type": "string",
            "description": "The API caller-provided external invoice number for this order. Appears in both the payer's transaction history and the emails that the payer receives.",
            "minLength": 1,
            "maxLength": 127
          },
          "soft_descriptor": {
            "type": "string",
            "description": "The soft descriptor is the dynamic text used to construct the statement descriptor that appears on a payer's card statement.<br><br>If an Order is paid using the \"PayPal Wallet\", the statement descriptor will appear in following format on the payer's card statement: <code><var>PAYPAL_prefix</var>+(space)+<var>merchant_descriptor</var>+(space)+ <var>soft_descriptor</var></code><blockquote><strong>Note:</strong> The merchant descriptor is the descriptor of the merchant’s payment receiving preferences which can be seen by logging into the merchant account https://www.sandbox.paypal.com/businessprofile/settings/info/edit</blockquote>The <code>PAYPAL</code> prefix uses 8 characters. Only the first 22 characters will be displayed in the statement. <br>For example, if: The PayPal prefix toggle is PAYPAL*. The merchant descriptor in the profile is Janes Gift. The soft descriptor is 800-123-1234. Then, the statement descriptor on the card is PAYPAL * Janes Gift 80.",
            "minLength": 1,
            "maxLength": 22
          },
          "items": {
            "$ref": "#/components/schemas/PurchaseUnitItems"
          },
          "shipping": {
            "$ref": "#/components/schemas/Shipping"
          },
          "supplementary_data": {
            "$ref": "#/components/schemas/SupplementaryData"
          }
        },
        "required": [
          "amount"
        ]
      },
      "InstrumentId": {
        "type": "string",
        "description": "The identifier of the instrument.",
        "minLength": 1,
        "maxLength": 256,
        "pattern": "^[A-Za-z0-9-_.+=]+$"
      },
      "InternetDateTimeFormat": {
        "type": "string",
        "description": "The year and month, in ISO-8601 `YYYY-MM` date format. See [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).",
        "minLength": 7,
        "maxLength": 7,
        "pattern": "^[0-9]{4}-(0[1-9]|1[0-2])$"
      },
      "CardBrand": {
        "type": "string",
        "title": "Card Brand",
        "description": "The card network or brand. Applies to credit, debit, gift, and payment cards.",
        "minLength": 1,
        "maxLength": 255,
        "pattern": "^[A-Z_]+$",
        "enum": [
          "VISA",
          "MASTERCARD",
          "DISCOVER",
          "AMEX",
          "SOLO",
          "JCB",
          "STAR",
          "DELTA",
          "SWITCH",
          "MAESTRO",
          "CB_NATIONALE",
          "CONFIGOGA",
          "CONFIDIS",
          "ELECTRON",
          "CETELEM",
          "CHINA_UNION_PAY"
        ]
      },
      "CardType": {
        "type": "string",
        "title": "Card Type",
        "description": "Type of card. i.e Credit, Debit and so on.",
        "minLength": 1,
        "maxLength": 255,
        "pattern": "^[A-Z_]+$",
        "enum": [
          "CREDIT",
          "DEBIT",
          "PREPAID",
          "STORE",
          "UNKNOWN"
        ]
      },
      "CustomerId": {
        "type": "string",
        "description": "The unique ID for a customer generated by PayPal.",
        "minLength": 1,
        "maxLength": 22,
        "pattern": "^[0-9a-zA-Z_-]+$"
      },
      "Customer": {
        "type": "object",
        "title": "PayPal's customer data records.",
        "description": "The details about a customer in PayPal's system of record.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/CustomerId"
          },
          "email_address": {
            "$ref": "#/components/schemas/CustomerEmailAddress"
          },
          "phone": {
            "$ref": "#/components/schemas/CustomerPhoneNumber"
          }
        }
      },
      "VaultingInstruction": {
        "type": "string",
        "description": "Defines how and when the payment source gets vaulted.",
        "minLength": 1,
        "maxLength": 255,
        "pattern": "^[0-9A-Z_]+$",
        "enum": [
          "ON_SUCCESS"
        ]
      },
      "CardVaultingInstruction": {
        "type": "object",
        "title": "Basic vault Instruction parameters",
        "description": "Basic vault instruction specification that can be extended by specific payment sources that supports vaulting.",
        "properties": {
          "store_in_vault": {
            "$ref": "#/components/schemas/VaultingInstruction"
          }
        }
      },
      "CardAttributes": {
        "type": "object",
        "title": "Card Attributes",
        "description": "Additional attributes associated with the use of this card.",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/Customer"
          },
          "vault": {
            "$ref": "#/components/schemas/CardVaultingAttributes"
          }
        }
      },
      "Card": {
        "type": "object",
        "title": "Card",
        "description": "The payment card to use to fund a payment. Can be a credit or debit card.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/CardId"
          },
          "name": {
            "type": "string",
            "description": "The card holder's name as it appears on the card.",
            "maxLength": 300,
            "minLength": 1,
            "pattern": "^.{1,300}$"
          },
          "number": {
            "type": "string",
            "description": "The primary account number (PAN) for the payment card.",
            "pattern": "^[0-9]{13,19}$",
            "minLength": 13,
            "maxLength": 19
          },
          "expiry": {
            "$ref": "#/components/schemas/CardExpiry"
          },
          "security_code": {
            "type": "string",
            "description": "The three- or four-digit security code of the card. Also known as the CVV, CVC, CVN, CVE, or CID. This parameter cannot be present in the request when `payment_initiator=MERCHANT`.",
            "pattern": "^[0-9]{3,4}$",
            "minLength": 3,
            "maxLength": 4
          },
          "last_digits": {
            "type": "string",
            "description": "The last digits of the payment card.",
            "pattern": "^[0-9]{2,4}$",
            "minLength": 2,
            "maxLength": 4,
            "readOnly": true
          },
          "card_type": {
            "$ref": "#/components/schemas/CardBrandType"
          },
          "type": {
            "$ref": "#/components/schemas/CardTypeDetails"
          },
          "brand": {
            "$ref": "#/components/schemas/CardBrandNetwork"
          },
          "billing_address": {
            "$ref": "#/components/schemas/Address"
          },
          "attributes": {
            "$ref": "#/components/schemas/CardAttributesDetails"
          }
        }
      },
      "VaultId": {
        "type": "string",
        "description": "The PayPal-generated ID for the vaulted payment source. This ID should be stored on the merchant's server so the saved payment source can be used for future transactions.",
        "minLength": 1,
        "maxLength": 255,
        "pattern": "^[0-9a-zA-Z_-]+$"
      },
      "PaymentInitiator": {
        "type": "string",
        "minLength": 1,
        "maxLength": 255,
        "pattern": "^[0-9A-Z_]+$",
        "description": "The person or party who initiated or triggered the payment.",
        "enum": [
          "CUSTOMER",
          "MERCHANT"
        ]
      },
      "StoredPaymentType": {
        "type": "string",
        "minLength": 1,
        "maxLength": 255,
        "pattern": "^[0-9A-Z_]+$",
        "description": "Indicates the type of the stored payment_source payment.",
        "enum": [
          "ONE_TIME",
          "RECURRING",
          "UNSCHEDULED"
        ]
      },
      "StoredPaymentUsageType": {
        "type": "string",
        "minLength": 1,
        "maxLength": 255,
        "pattern": "^[0-9A-Z_]+$",
        "default": "DERIVED",
        "description": "Indicates if this is a `first` or `subsequent` payment using a stored payment source (also referred to as stored credential or card on file).",
        "enum": [
          "FIRST",
          "SUBSEQUENT",
          "DERIVED"
        ]
      },
      "NetworkTransactionReference": {
        "type": "object",
        "title": "Network Transaction Reference",
        "description": "Reference values used by the card network to identify a transaction.",
        "properties": {
          "id": {
            "type": "string",
            "minLength": 9,
            "maxLength": 36,
            "pattern": "^[a-zA-Z0-9-_@.:&+=*^'~#!$%()]+$",
            "description": "Transaction reference id returned by the scheme. For Visa and Amex, this is the \"Tran id\" field in response. For MasterCard, this is the \"BankNet reference id\" field in response. For Discover, this is the \"NRID\" field in response. The pattern we expect for this field from Visa/Amex/CB/Discover is numeric, Mastercard/BNPP is alphanumeric and Paysecure is alphanumeric with special character -."
          },
          "date": {
            "type": "string",
            "minLength": 4,
            "maxLength": 4,
            "pattern": "^[0-9]+$",
            "description": "The date that the transaction was authorized by the scheme. This field may not be returned for all networks. MasterCard refers to this field as \"BankNet reference date."
          },
          "network": {
            "$ref": "#/components/schemas/TransactionNetwork"
          },
          "acquirer_reference_number": {
            "type": "string",
            "description": "Reference ID issued for the card transaction. This ID can be used to track the transaction across processors, card brands and issuing banks.",
            "minLength": 1,
            "maxLength": 36,
            "pattern": "^[a-zA-Z0-9]+$"
          }
        },
        "required": [
          "id"
        ]
      },
      "ECIFlag": {
        "type": "string",
        "minLength": 1,
        "maxLength": 255,
        "pattern": "^[0-9A-Z_]+$",
        "description": "Electronic Commerce Indicator (ECI). The ECI value is part of the 2 data elements that indicate the transaction was processed electronically. This should be passed on the authorization transaction to the Gateway/Processor.",
        "enum": [
          "MASTERCARD_NON_3D_SECURE_TRANSACTION",
          "MASTERCARD_ATTEMPTED_AUTHENTICATION_TRANSACTION",
          "MASTERCARD_FULLY_AUTHENTICATED_TRANSACTION",
          "FULLY_AUTHENTICATED_TRANSACTION",
          "ATTEMPTED_AUTHENTICATION_TRANSACTION",
          "NON_3D_SECURE_TRANSACTION"
        ]
      },
      "NetworkToken": {
        "type": "object",
        "title": "Network Token",
        "description": "The Third Party Network token used to fund a payment.",
        "properties": {
          "number": {
            "type": "string",
            "description": "Third party network token number.",
            "pattern": "^[0-9]{13,19}$",
            "minLength": 13,
            "maxLength": 19
          },
          "expiry": {
            "$ref": "#/components/schemas/NetworkTokenExpiry"
          },
          "cryptogram": {
            "type": "string",
            "description": "An Encrypted one-time use value that's sent along with Network Token. This field is not required to be present for recurring transactions.",
            "pattern": "^.*$",
            "minLength": 28,
            "maxLength": 32
          },
          "eci_flag": {
            "$ref": "#/components/schemas/ECIFlag"
          },
          "token_requestor_id": {
            "type": "string",
            "description": "A TRID, or a Token Requestor ID, is an identifier used by merchants to request network tokens from card networks. A TRID is a precursor to obtaining a network token for a credit card primary account number (PAN), and will aid in enabling secure card on file (COF) payments and reducing fraud.",
            "pattern": "^[0-9A-Z_]+$",
            "minLength": 1,
            "maxLength": 11
          }
        },
        "required": [
          "number",
          "expiry"
        ]
      },
      "URL": {
        "type": "string",
        "description": "Describes the URL.",
        "format": "uri",
        "example": "https://example.com/Url"
      },
      "CardExperienceContext": {
        "type": "object",
        "title": "Card Experience Context",
        "description": "Customizes the payer experience during the 3DS Approval for payment.",
        "properties": {
          "return_url": {
            "$ref": "#/components/schemas/ThreeDSReturnURL"
          },
          "cancel_url": {
            "$ref": "#/components/schemas/ThreeDSCancelURL"
          }
        }
      },
      "PaymentCard": {
        "type": "object",
        "title": "Card Request",
        "description": "The payment card to use to fund a payment. Can be a credit or debit card.<blockquote><strong>Note:</strong> Passing card number, cvv and expiry directly via the API requires <a href=\"https://www.pcisecuritystandards.org/pci_security/completing_self_assessment\"> PCI SAQ D compliance</a>. <br>*PayPal offers a mechanism by which you do not have to take on the <strong>PCI SAQ D</strong> burden by using hosted fields - refer to <a href=\"https://developer.paypal.com/docs/checkout/advanced/integrate/\">this Integration Guide</a>*.</blockquote>",
        "allOf": [
          {
            "$ref": "#/components/schemas/Card"
          },
          {
            "$ref": "#/components/schemas/CardDetails"
          }
        ]
      },
      "Token": {
        "type": "object",
        "title": "Token",
        "description": "The tokenized payment source to fund a payment.",
        "properties": {
          "id": {
            "type": "string",
            "description": "The PayPal-generated ID for the token.",
            "pattern": "^[0-9a-zA-Z_-]+$",
            "minLength": 1,
            "maxLength": 255
          },
          "type": {
            "$ref": "#/components/schemas/TokenType"
          }
        },
        "required": [
          "id",
          "type"
        ]
      },
      "VaultedPayPalWalletAttributes": {
        "type": "object",
        "title": "Vaulted PayPal Wallet Common Attributes",
        "description": "Resource consolidating common request and response attributes for vaulting PayPal Wallet.",
        "allOf": [
          {
            "$ref": "#/components/schemas/CardVaultingInstruction"
          },
          {
            "$ref": "#/components/schemas/PaypalWalletBaseDetails"
          }
        ],
        "required": [
          "usage_type"
        ]
      },
      "PayPalWalletAttributes": {
        "type": "object",
        "title": "PayPal Wallet Attributes",
        "description": "Additional attributes associated with the use of this PayPal Wallet.",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/Customer"
          },
          "vault": {
            "$ref": "#/components/schemas/PayPalWalletVaultAttributes"
          }
        }
      },
      "Language": {
        "type": "string",
        "description": "The [language tag](https://tools.ietf.org/html/bcp47#section-2) for the language in which to localize the error-related strings, such as messages, issues, and suggested actions. The tag is made up of the [ISO 639-2 language code](https://www.loc.gov/standards/iso639-2/php/code_list.php), the optional [ISO-15924 script tag](https://www.unicode.org/iso15924/codelists.html), and the [ISO-3166 alpha-2 country code](/api/rest/reference/country-codes/) or [M49 region code](https://unstats.un.org/unsd/methodology/m49/).",
        "format": "ppaas_common_language_v3",
        "maxLength": 10,
        "minLength": 2,
        "pattern": "^[a-z]{2}(?:-[A-Z][a-z]{3})?(?:-(?:[A-Z]{2}|[0-9]{3}))?$",
        "example": "en-US"
      },
      "PayPalWalletExperienceContext": {
        "type": "object",
        "title": "PayPal Wallet Experience Context",
        "description": "Customizes the payer experience during the approval process for payment with PayPal.<blockquote><strong>Note:</strong> Partners and Marketplaces might configure <code>brand_name</code> and <code>shipping_preference</code> during partner account setup, which overrides the request values.</blockquote>",
        "properties": {
          "brand_name": {
            "type": "string",
            "description": "The label that overrides the business name in the PayPal account on the PayPal site. The pattern is defined by an external party and supports Unicode.",
            "minLength": 1,
            "maxLength": 127,
            "pattern": "^.*$",
            "example": "EXAMPLE INC"
          },
          "locale": {
            "$ref": "#/components/schemas/ExperienceLocale"
          },
          "shipping_preference": {
            "$ref": "#/components/schemas/ShippingPreference"
          },
          "return_url": {
            "$ref": "#/components/schemas/ReturnURL"
          },
          "cancel_url": {
            "$ref": "#/components/schemas/CancelURL"
          },
          "landing_page": {
            "$ref": "#/components/schemas/LandingPageType"
          },
          "user_action": {
            "$ref": "#/components/schemas/UserAction"
          },
          "payment_method_preference": {
            "$ref": "#/components/schemas/MerchantPreferredPaymentMethods"
          }
        }
      },
      "BillingAgreementId": {
        "type": "string",
        "description": "The PayPal billing agreement ID. References an approved recurring payment for goods or services.",
        "minLength": 2,
        "maxLength": 128,
        "pattern": "^[a-zA-Z0-9-]+$"
      },
      "PayPalWallet": {
        "type": "object",
        "title": "PayPal Wallet",
        "description": "A resource that identifies a PayPal Wallet is used for payment.",
        "properties": {
          "vault_id": {
            "$ref": "#/components/schemas/PayPalGeneratedVaultId"
          },
          "email_address": {
            "$ref": "#/components/schemas/AccountHolderEmailAddress"
          },
          "name": {
            "$ref": "#/components/schemas/AccountHolderName"
          },
          "phone": {
            "$ref": "#/components/schemas/PayerPhone"
          },
          "birth_date": {
            "$ref": "#/components/schemas/AccountHolderBirthDate"
          },
          "tax_info": {
            "$ref": "#/components/schemas/AccountHolderTaxInfo"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "attributes": {
            "$ref": "#/components/schemas/AdditionalPayPalWalletAttributes"
          },
          "experience_context": {
            "$ref": "#/components/schemas/PayPalWalletExperienceContext"
          },
          "billing_agreement_id": {
            "$ref": "#/components/schemas/BillingAgreementId"
          }
        }
      },
      "FullName": {
        "type": "string",
        "description": "The full name representation like Mr J Smith.",
        "minLength": 3,
        "maxLength": 300
      },
      "ExperienceContext": {
        "type": "object",
        "title": "Experience Context",
        "description": "Customizes the payer experience during the approval process for the payment.",
        "properties": {
          "brand_name": {
            "type": "string",
            "description": "The label that overrides the business name in the PayPal account on the PayPal site. The pattern is defined by an external party and supports Unicode.",
            "minLength": 1,
            "maxLength": 127,
            "pattern": "^.*$"
          },
          "locale": {
            "$ref": "#/components/schemas/ExperienceLocale"
          },
          "shipping_preference": {
            "$ref": "#/components/schemas/experience-context-base-shipping-preference"
          },
          "return_url": {
            "$ref": "#/components/schemas/ReturnURL"
          },
          "cancel_url": {
            "$ref": "#/components/schemas/CancelURL"
          }
        }
      },
      "AltpayRecurringAttributes": {},
      "BancontactPaymentInformation": {
        "type": "object",
        "title": "Bancontact Payment Information",
        "description": "Information needed to pay using Bancontact.",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/AccountHolderFullName"
          },
          "country_code": {
            "$ref": "#/components/schemas/TwoCharacterCountryCode"
          },
          "experience_context": {
            "$ref": "#/components/schemas/PaymentExperienceContext"
          },
          "attributes": {
            "$ref": "#/components/schemas/PaymentAttributes"
          }
        },
        "required": [
          "name",
          "country_code"
        ]
      },
      "EmailAddress": {
        "type": "string",
        "description": "The internationalized email address.<blockquote><strong>Note:</strong> Up to 64 characters are allowed before and 255 characters are allowed after the <code>@</code> sign. However, the generally accepted maximum length for an email address is 254 characters. The pattern verifies that an unquoted <code>@</code> sign exists.</blockquote>",
        "format": "ppaas_common_email_address_v2",
        "minLength": 3,
        "maxLength": 254,
        "pattern": "^.+@[^\"\\-].+$"
      },
      "IPAddress": {
        "type": "string",
        "title": "IP Address",
        "description": "An Internet Protocol address (IP address). This address assigns a numerical label to each device that is connected to a computer network through the Internet Protocol. Supports IPv4 and IPv6 addresses.",
        "format": "ppaas_ip_address_v1",
        "minLength": 7,
        "maxLength": 39,
        "pattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$|^(([a-zA-Z]|[a-zA-Z][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z]|[A-Za-z][A-Za-z0-9\\-]*[A-Za-z0-9])$|^\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*$"
      },
      "BlikExperienceContext": {
        "type": "object",
        "title": "BLIK Experience Context",
        "description": "Customizes the payer experience during the approval process for the BLIK payment.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ExperienceContext"
          },
          {
            "$ref": "#/components/schemas/BlikExperienceContextBase"
          }
        ]
      },
      "BlikLevel0PaymentInformation": {
        "type": "object",
        "title": "BLIK level_0 payment object",
        "description": "Information used to pay using BLIK level_0 flow.",
        "properties": {
          "auth_code": {
            "type": "string",
            "description": "6-digit code used to authenticate a consumer within BLIK.",
            "minLength": 6,
            "maxLength": 6,
            "pattern": "^[0-9]{6}$"
          }
        },
        "required": [
          "auth_code"
        ]
      },
      "BlikOneClickPaymentInformation": {
        "type": "object",
        "title": "BLIK one-click payment information",
        "description": "Information used to pay using BLIK one-click flow.",
        "properties": {
          "auth_code": {
            "type": "string",
            "description": "6-digit code used to authenticate a consumer within BLIK.",
            "minLength": 6,
            "maxLength": 6,
            "pattern": "^[0-9]{6}$"
          },
          "consumer_reference": {
            "type": "string",
            "description": "The merchant generated, unique reference serving as a primary identifier for accounts connected between Blik and a merchant.",
            "minLength": 3,
            "maxLength": 64,
            "pattern": "^[ -~]{3,64}$"
          },
          "alias_label": {
            "type": "string",
            "description": "A bank defined identifier used as a display name to allow the payer to differentiate between multiple registered bank accounts.",
            "minLength": 8,
            "maxLength": 35,
            "pattern": "^[ -~]{8,35}$"
          },
          "alias_key": {
            "type": "string",
            "description": "A Blik-defined identifier for a specific Blik-enabled bank account that is associated with a given merchant. Used only in conjunction with a Consumer Reference.",
            "minLength": 1,
            "maxLength": 19,
            "pattern": "^[0-9]+$"
          }
        },
        "required": [
          "consumer_reference"
        ]
      },
      "BlikPaymentInformation": {
        "type": "object",
        "title": "BLIK payment information",
        "description": "Information needed to pay using BLIK.",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/AccountHolderFullName"
          },
          "country_code": {
            "$ref": "#/components/schemas/TwoCharacterCountryCode"
          },
          "email": {
            "$ref": "#/components/schemas/AccountHolderEmail"
          },
          "experience_context": {
            "$ref": "#/components/schemas/BlikExperienceContextDetails"
          },
          "level_0": {
            "$ref": "#/components/schemas/Level0IntegrationFlow"
          },
          "one_click": {
            "$ref": "#/components/schemas/BlikOneClickIntegrationFlow"
          }
        },
        "required": [
          "name",
          "country_code"
        ]
      },
      "EPSPaymentInformation": {
        "type": "object",
        "title": "An eps payment information",
        "description": "Information needed to pay using eps.",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/AccountHolderFullName"
          },
          "country_code": {
            "$ref": "#/components/schemas/TwoCharacterCountryCode"
          },
          "experience_context": {
            "$ref": "#/components/schemas/PaymentExperienceContext"
          }
        },
        "required": [
          "name",
          "country_code"
        ]
      },
      "GirpayPaymentInformation": {
        "type": "object",
        "title": "A giropay payment information",
        "description": "Information needed to pay using giropay.",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/AccountHolderFullName"
          },
          "country_code": {
            "$ref": "#/components/schemas/TwoCharacterCountryCode"
          },
          "experience_context": {
            "$ref": "#/components/schemas/PaymentExperienceContext"
          }
        },
        "required": [
          "name",
          "country_code"
        ]
      },
      "BIC": {
        "type": "string",
        "title": "BIC",
        "description": "The business identification code (BIC). In payments systems, a BIC is used to identify a specific business, most commonly a bank.",
        "minLength": 8,
        "maxLength": 11,
        "pattern": "^[A-Z-a-z0-9]{4}[A-Z-a-z]{2}[A-Z-a-z0-9]{2}([A-Z-a-z0-9]{3})?$"
      },
      "IdealPaymentInformation": {
        "type": "object",
        "title": "The iDEAL payment information",
        "description": "Information needed to pay using iDEAL.",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/AccountHolderFullName"
          },
          "country_code": {
            "$ref": "#/components/schemas/TwoCharacterCountryCode"
          },
          "bic": {
            "$ref": "#/components/schemas/BankIdentificationCode"
          },
          "experience_context": {
            "$ref": "#/components/schemas/PaymentExperienceContext"
          },
          "attributes": {
            "$ref": "#/components/schemas/PaymentAttributes"
          }
        },
        "required": [
          "name",
          "country_code"
        ]
      },
      "MyBankPaymentInformation": {
        "type": "object",
        "title": "MyBank payment information",
        "description": "Information needed to pay using MyBank.",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/AccountHolderFullName"
          },
          "country_code": {
            "$ref": "#/components/schemas/TwoCharacterCountryCode"
          },
          "experience_context": {
            "$ref": "#/components/schemas/PaymentExperienceContext"
          }
        },
        "required": [
          "name",
          "country_code"
        ]
      },
      "P24PaymentInformation": {
        "type": "object",
        "title": "P24 payment information",
        "description": "Information needed to pay using P24 (Przelewy24).",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/AccountHolderFullName"
          },
          "email": {
            "$ref": "#/components/schemas/AccountHolderEmail"
          },
          "country_code": {
            "$ref": "#/components/schemas/TwoCharacterCountryCode"
          },
          "experience_context": {
            "$ref": "#/components/schemas/PaymentExperienceContext"
          }
        },
        "required": [
          "name",
          "email",
          "country_code"
        ]
      },
      "SofortPaymentInformation": {
        "type": "object",
        "title": "Sofort payment information",
        "description": "Information needed to pay using Sofort.",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/AccountHolderFullName"
          },
          "country_code": {
            "$ref": "#/components/schemas/TwoCharacterCountryCode"
          },
          "experience_context": {
            "$ref": "#/components/schemas/PaymentExperienceContext"
          }
        },
        "required": [
          "name",
          "country_code"
        ]
      },
      "TrustlyPaymentInformation": {
        "type": "object",
        "title": "Trustly payment information",
        "description": "Information needed to pay using Trustly.",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/AccountHolderFullName"
          },
          "country_code": {
            "$ref": "#/components/schemas/TwoCharacterCountryCode"
          },
          "experience_context": {
            "$ref": "#/components/schemas/PaymentExperienceContext"
          }
        },
        "required": [
          "name",
          "country_code"
        ]
      },
      "DecryptedApplePayPaymentDetails": {
        "type": "object",
        "title": "Decrypted Apple Pay Payment details data.",
        "description": "Information about the decrypted apple pay payment data for the token like cryptogram, eci indicator.",
        "properties": {
          "cryptogram": {
            "description": "Online payment cryptogram, as defined by 3D Secure. The pattern is defined by an external party and supports Unicode.",
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "pattern": "^.*$"
          },
          "eci_indicator": {
            "description": "ECI indicator, as defined by 3- Secure. The pattern is defined by an external party and supports Unicode.",
            "type": "string",
            "minLength": 1,
            "maxLength": 256,
            "pattern": "^.*$"
          },
          "emv_data": {
            "description": "Encoded Apple Pay EMV Payment Structure used for payments in China. The pattern is defined by an external party and supports Unicode.",
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "pattern": "^.*$"
          },
          "pin": {
            "description": "Bank Key encrypted Apple Pay PIN. The pattern is defined by an external party and supports Unicode.",
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "pattern": "^.*$"
          }
        }
      },
      "DecryptedApplePayTokenDetails": {
        "type": "object",
        "title": "Decrypted Apple Pay Token data.",
        "description": "Information about the Payment data obtained by decrypting Apple Pay token.",
        "properties": {
          "transaction_amount": {
            "$ref": "#/components/schemas/ApplePayTransactionAmount"
          },
          "tokenized_card": {
            "$ref": "#/components/schemas/ApplePayTokenizedCard"
          },
          "device_manufacturer_id": {
            "description": "Apple Pay Hex-encoded device manufacturer identifier. The pattern is defined by an external party and supports Unicode.",
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "pattern": "^.*$"
          },
          "payment_data_type": {
            "$ref": "#/components/schemas/ApplePayPaymentType"
          },
          "payment_data": {
            "$ref": "#/components/schemas/ApplePayPaymentDetails"
          }
        },
        "required": [
          "tokenized_card"
        ]
      },
      "ApplePayAttributes": {},
      "ApplePayPaymentInformation": {
        "type": "object",
        "title": "ApplePay payment request object",
        "description": "Information needed to pay using ApplePay.",
        "properties": {
          "id": {
            "description": "ApplePay transaction identifier, this will be the unique identifier for this transaction provided by Apple. The pattern is defined by an external party and supports Unicode.",
            "type": "string",
            "minLength": 1,
            "maxLength": 250,
            "pattern": "^.*$"
          },
          "name": {
            "$ref": "#/components/schemas/AccountHolderFullName"
          },
          "email_address": {
            "$ref": "#/components/schemas/AccountHolderEmail"
          },
          "phone_number": {
            "$ref": "#/components/schemas/PhoneNumber"
          },
          "decrypted_token": {
            "$ref": "#/components/schemas/DecryptedPayloadDetails"
          },
          "stored_credential": {
            "$ref": "#/components/schemas/NetworkTokenExpiry"
          },
          "vault_id": {
            "$ref": "#/components/schemas/ApplePayVaultId"
          },
          "attributes": {
            "$ref": "#/components/schemas/ApplePayAttributes"
          }
        }
      },
      "GooglePayPaymentInformation": {},
      "VenmoExperienceContext": {
        "type": "object",
        "title": "Venmo Wallet Experience Context",
        "description": "Customizes the buyer experience during the approval process for payment with Venmo.<blockquote><strong>Note:</strong> Partners and Marketplaces might configure <code>shipping_preference</code> during partner account setup, which overrides the request values.</blockquote>",
        "properties": {
          "brand_name": {
            "type": "string",
            "description": "The business name of the merchant. The pattern is defined by an external party and supports Unicode.",
            "minLength": 1,
            "maxLength": 127,
            "pattern": "^.*$"
          },
          "shipping_preference": {
            "$ref": "#/components/schemas/ShippingPreference"
          }
        }
      },
      "BaseVaultingInstruction": {
        "type": "object",
        "title": "Base Vault Instruction Parameters",
        "description": "Base vaulting specification. The object can be extended for specific use cases within each payment_source that supports vaulting.",
        "properties": {
          "store_in_vault": {
            "$ref": "#/components/schemas/VaultingInstruction"
          }
        },
        "required": [
          "store_in_vault"
        ]
      },
      "VenmoWalletVaultingAttributes": {
        "type": "object",
        "title": "Vaulted Venmo Wallet Common Attributes",
        "description": "Resource consolidating common request and response attirbutes for vaulting Venmo Wallet.",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseVaultingInstruction"
          },
          {
            "$ref": "#/components/schemas/VenmoWalletDetails"
          }
        ],
        "required": [
          "usage_type"
        ]
      },
      "VenmoAttributes": {
        "type": "object",
        "title": "Venmo Wallet Attributes",
        "description": "Additional attributes associated with the use of this Venmo Wallet.",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/Customer"
          },
          "vault": {
            "$ref": "#/components/schemas/VenmoVaultAttributes"
          }
        }
      },
      "VenmoPaymentInformation": {
        "type": "object",
        "title": "Venmo payment request object",
        "description": "Information needed to pay using Venmo.",
        "properties": {
          "vault_id": {
            "$ref": "#/components/schemas/VenmoVaultId"
          },
          "email_address": {
            "$ref": "#/components/schemas/PayerEmailAddress"
          },
          "experience_context": {
            "$ref": "#/components/schemas/VenmoExperienceContext"
          },
          "attributes": {
            "$ref": "#/components/schemas/VenmoWalletAdditionalAttributes"
          }
        }
      },
      "PaymentSourceDefinition": {
        "type": "object",
        "title": "Payment Source Definition",
        "description": "The payment source definition.",
        "properties": {
          "card": {
            "$ref": "#/components/schemas/PaymentCard"
          },
          "token": {
            "$ref": "#/components/schemas/Token"
          },
          "paypal": {
            "$ref": "#/components/schemas/PayPalPaymentSource"
          },
          "bancontact": {
            "$ref": "#/components/schemas/BancontactPaymentSource"
          },
          "blik": {
            "$ref": "#/components/schemas/BlikPaymentSource"
          },
          "eps": {
            "$ref": "#/components/schemas/EPSPaymentSource"
          },
          "giropay": {
            "$ref": "#/components/schemas/GiropayPaymentSource"
          },
          "ideal": {
            "$ref": "#/components/schemas/IdealPaymentSource"
          },
          "mybank": {
            "$ref": "#/components/schemas/MyBankPaymentSource"
          },
          "p24": {
            "$ref": "#/components/schemas/P24PaymentAource"
          },
          "sofort": {
            "$ref": "#/components/schemas/SofortPaymentSource"
          },
          "trustly": {
            "$ref": "#/components/schemas/TrustlyPaymentSource"
          },
          "apple_pay": {
            "$ref": "#/components/schemas/ApplePayPaymentSource"
          },
          "google_pay": {
            "$ref": "#/components/schemas/GooglePayPaymentSource"
          },
          "venmo": {
            "$ref": "#/components/schemas/VenmoPaymentSource"
          }
        }
      },
      "PayeePreferredPaymentMethod": {
        "type": "string",
        "description": "The merchant-preferred payment methods.",
        "minLength": 1,
        "maxLength": 255,
        "pattern": "^[0-9A-Z_]+$",
        "default": "UNRESTRICTED",
        "enum": [
          "UNRESTRICTED",
          "IMMEDIATE_PAYMENT_REQUIRED"
        ]
      },
      "PaymentMethod": {
        "type": "object",
        "description": "The customer and merchant payment preferences.",
        "title": "Payment Method",
        "properties": {
          "payee_preferred": {
            "$ref": "#/components/schemas/PayeePreferredPaymentMethod"
          },
          "standard_entry_class_code": {
            "$ref": "#/components/schemas/StandardEntryClassCode"
          }
        }
      },
      "StoredPaymentSource": {
        "type": "object",
        "title": "Stored Payment Source",
        "description": "Provides additional details to process a payment using a `payment_source` that has been stored or is intended to be stored (also referred to as stored_credential or card-on-file).<br/>Parameter compatibility:<br/>`payment_type=ONE_TIME` is compatible only with `payment_initiator=CUSTOMER`. `usage=FIRST` is compatible only with `payment_initiator=CUSTOMER`. `previous_transaction_reference` or `previous_network_transaction_reference` is compatible only with `payment_initiator=MERCHANT`. Only one of the parameters - `previous_transaction_reference` and `previous_network_transaction_reference` - can be present in the request.",
        "properties": {
          "payment_initiator": {
            "$ref": "#/components/schemas/PaymentInitiator"
          },
          "payment_type": {
            "$ref": "#/components/schemas/StoredPaymentType"
          },
          "usage": {
            "$ref": "#/components/schemas/StoredPaymentUsageType"
          },
          "previous_network_transaction_reference": {
            "$ref": "#/components/schemas/NetworkTransactionReference"
          }
        },
        "required": [
          "payment_initiator",
          "payment_type"
        ]
      },
      "ApplicationContext": {
        "type": "object",
        "title": "Application Context",
        "description": "Customizes the payer experience during the approval process for the payment with PayPal.<blockquote><strong>Note:</strong> Partners and Marketplaces might configure <code>brand_name</code> and <code>shipping_preference</code> during partner account setup, which overrides the request values.</blockquote>",
        "properties": {
          "brand_name": {
            "type": "string",
            "description": "DEPRECATED. The label that overrides the business name in the PayPal account on the PayPal site. The fields in `application_context` are now available in the `experience_context` object under the `payment_source` which supports them (eg. `payment_source.paypal.experience_context.brand_name`). Please specify this field in the `experience_context` object instead of the `application_context` object.",
            "minLength": 1,
            "maxLength": 127
          },
          "locale": {
            "$ref": "#/components/schemas/ExperienceLocale"
          },
          "landing_page": {
            "$ref": "#/components/schemas/ApplicationContextLandingPage"
          },
          "shipping_preference": {
            "$ref": "#/components/schemas/ApplicationContextShippingPreference"
          },
          "user_action": {
            "$ref": "#/components/schemas/ApplicationContextUserAction"
          },
          "payment_method": {
            "$ref": "#/components/schemas/ApplicationContextPaymentMethod"
          },
          "return_url": {
            "type": "string",
            "format": "uri",
            "description": "DEPRECATED. The URL where the customer is redirected after the customer approves the payment. The fields in `application_context` are now available in the `experience_context` object under the `payment_source` which supports them (eg. `payment_source.paypal.experience_context.return_url`). Please specify this field in the `experience_context` object instead of the `application_context` object."
          },
          "cancel_url": {
            "type": "string",
            "format": "uri",
            "description": "DEPRECATED. The URL where the customer is redirected after the customer cancels the payment. The fields in `application_context` are now available in the `experience_context` object under the `payment_source` which supports them (eg. `payment_source.paypal.experience_context.cancel_url`). Please specify this field in the `experience_context` object instead of the `application_context` object."
          },
          "stored_payment_source": {
            "$ref": "#/components/schemas/ApplicationContextStoredPaymentSource"
          }
        }
      },
      "OrderRequest": {
        "type": "object",
        "title": "Order Request",
        "description": "The order request details.",
        "properties": {
          "intent": {
            "$ref": "#/components/schemas/PaymentIntentCheckout"
          },
          "payer": {
            "$ref": "#/components/schemas/OrderPayer"
          },
          "purchase_units": {
            "$ref": "#/components/schemas/OrderPurchaseUnits"
          },
          "payment_source": {
            "$ref": "#/components/schemas/PaymentSourceDefinition"
          },
          "application_context": {
            "$ref": "#/components/schemas/ApplicationContextDetails"
          }
        },
        "required": [
          "intent",
          "purchase_units"
        ]
      },
      "DateTimeFormat": {
        "type": "string",
        "description": "The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>",
        "format": "ppaas_date_time_v3",
        "minLength": 20,
        "maxLength": 64,
        "example": "2018-04-01T21:20:49Z",
        "pattern": "^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])[T,t]([0-1][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)([.][0-9]+)?([Zz]|[+-][0-9]{2}:[0-9]{2})$"
      },
      "TransactionTimestamps": {
        "type": "object",
        "description": "The date and time stamps that are common to authorized payment, captured payment, and refund transactions.",
        "title": "Transaction Date and Time Stamps",
        "properties": {
          "create_time": {
            "$ref": "#/components/schemas/TransactionCreationTimestamp"
          },
          "update_time": {
            "$ref": "#/components/schemas/TransactionModificationTime"
          }
        }
      },
      "LiabilityShiftIndicator": {
        "type": "string",
        "minLength": 1,
        "maxLength": 255,
        "pattern": "^[0-9A-Z_]+$",
        "description": "Liability shift indicator. The outcome of the issuer's authentication.",
        "enum": [
          "NO",
          "POSSIBLE",
          "UNKNOWN"
        ]
      },
      "ParesStatus": {
        "type": "string",
        "minLength": 1,
        "maxLength": 255,
        "pattern": "^[0-9A-Z_]+$",
        "description": "Transactions status result identifier. The outcome of the issuer's authentication.",
        "enum": [
          "Y",
          "N",
          "U",
          "A",
          "C",
          "R",
          "D",
          "I"
        ]
      },
      "Enrolled": {
        "type": "string",
        "minLength": 1,
        "maxLength": 255,
        "pattern": "^[0-9A-Z_]+$",
        "description": "Status of Authentication eligibility.",
        "enum": [
          "Y",
          "N",
          "U",
          "B"
        ]
      },
      "ThreeDSecureAuthenticationResults": {
        "type": "object",
        "title": "The 3D Secure Authentication Response",
        "description": "Results of 3D Secure Authentication.",
        "properties": {
          "authentication_status": {
            "$ref": "#/components/schemas/AuthenticationStatus"
          },
          "enrollment_status": {
            "$ref": "#/components/schemas/EnrollmentStatus"
          }
        }
      },
      "AuthenticationFlow": {},
      "ExemptionDetails": {},
      "AuthenticationResults": {
        "type": "object",
        "title": "Authentication Response",
        "description": "Results of Authentication such as 3D Secure.",
        "properties": {
          "liability_shift": {
            "$ref": "#/components/schemas/LiabilityShiftIndicator"
          },
          "three_d_secure": {
            "$ref": "#/components/schemas/ThreeDSecureAuthenticationResults"
          },
          "authentication_flow": {
            "$ref": "#/components/schemas/AuthenticationFlow"
          },
          "exemption_details": {
            "$ref": "#/components/schemas/3DSecureExemptionDetails"
          }
        }
      },
      "LinkDescription": {
        "type": "object",
        "title": "Link Description",
        "description": "The request-related [HATEOAS link](/api/rest/responses/#hateoas-links) information.",
        "required": [
          "href",
          "rel"
        ],
        "properties": {
          "href": {
            "type": "string",
            "description": "The complete target URL. To make the related call, combine the method with this [URI Template-formatted](https://tools.ietf.org/html/rfc6570) link. For pre-processing, include the `$`, `(`, and `)` characters. The `href` is the key HATEOAS component that links a completed call with a subsequent call.",
            "example": "https://api-m.paypal.com/v2/checkout/orders/5O190127TN364715T"
          },
          "rel": {
            "type": "string",
            "description": "The [link relation type](https://tools.ietf.org/html/rfc5988#section-4), which serves as an ID for a link that unambiguously describes the semantics of the link. See [Link Relations](https://www.iana.org/assignments/link-relations/link-relations.xhtml).",
            "example": "self"
          },
          "method": {
            "$ref": "#/components/schemas/HttpMethod"
          }
        }
      },
      "SavedPaymentSourceDetails": {
        "type": "object",
        "title": "Saved Payment Source Response",
        "description": "The details about a saved payment source.",
        "properties": {
          "id": {
            "type": "string",
            "description": "The PayPal-generated ID for the saved payment source.",
            "minLength": 1,
            "maxLength": 255
          },
          "status": {
            "$ref": "#/components/schemas/VaultStatus"
          },
          "customer": {
            "$ref": "#/components/schemas/Customer"
          },
          "links": {
            "$ref": "#/components/schemas/RequestLinks"
          }
        }
      },
      "CardAdditionalAttributes": {
        "type": "object",
        "title": "Card Attributes Response",
        "description": "Additional attributes associated with the use of this card.",
        "properties": {
          "vault": {
            "$ref": "#/components/schemas/VaultStatus"
          }
        }
      },
      "RequestedCardDetails": {
        "type": "object",
        "title": "Response of Card from Request",
        "description": "Representation of card details as received in the request.",
        "properties": {
          "expiry": {
            "$ref": "#/components/schemas/CardExpiryDate"
          },
          "last_digits": {
            "type": "string",
            "description": "The last digits of the payment card.",
            "pattern": "[0-9]{2,}",
            "minLength": 2,
            "maxLength": 4,
            "readOnly": true
          }
        }
      },
      "BINdetails": {
        "type": "object",
        "title": "Bin Details",
        "description": "Bank Identification Number (BIN) details used to fund a payment.",
        "properties": {
          "bin": {
            "type": "string",
            "description": "The Bank Identification Number (BIN) signifies the number that is being used to identify the granular level details (except the PII information) of the card.",
            "pattern": "^[0-9]+$",
            "maxLength": 25,
            "minLength": 1
          },
          "issuing_bank": {
            "type": "string",
            "description": "The issuer of the card instrument.",
            "minLength": 1,
            "maxLength": 64
          },
          "bin_country_code": {
            "$ref": "#/components/schemas/TwoCharacterCountryCode"
          },
          "products": {
            "$ref": "#/components/schemas/BINProducts"
          }
        }
      },
      "ReceivedCardRepresentation": {
        "type": "object",
        "title": "Card Response",
        "description": "The payment card to use to fund a payment. Card can be a credit or debit card.",
        "properties": {
          "name": {
            "type": "string",
            "description": "The card holder's name as it appears on the card.",
            "minLength": 2,
            "maxLength": 300
          },
          "last_digits": {
            "type": "string",
            "description": "The last digits of the payment card.",
            "pattern": "[0-9]{2,}",
            "readOnly": true
          },
          "brand": {
            "$ref": "#/components/schemas/CardBrandNetwork"
          },
          "available_networks": {
            "$ref": "#/components/schemas/AvailableCardBrandsNetworks"
          },
          "type": {
            "$ref": "#/components/schemas/PaymentCardType"
          },
          "authentication_result": {
            "$ref": "#/components/schemas/AuthenticationResults"
          },
          "attributes": {
            "$ref": "#/components/schemas/CardAdditionalAttributes"
          },
          "from_request": {
            "$ref": "#/components/schemas/RequestedCardDetails"
          },
          "expiry": {
            "$ref": "#/components/schemas/CardExpiryDate"
          },
          "bin_details": {
            "$ref": "#/components/schemas/CardBINDetails"
          }
        }
      },
      "account_id-2": {
        "type": "string",
        "description": "The PayPal payer ID, which is a masked version of the PayPal account number intended for use with third parties. The account number is reversibly encrypted and a proprietary variant of Base32 is used to encode the result.",
        "format": "ppaas_payer_id_v3",
        "minLength": 13,
        "maxLength": 13,
        "pattern": "^[2-9A-HJ-NP-Z]{13}$"
      },
      "phone_type-2": {
        "type": "string",
        "title": "Phone Type Enum",
        "description": "The phone type.",
        "enum": [
          "FAX",
          "HOME",
          "MOBILE",
          "OTHER",
          "PAGER",
          "WORK"
        ]
      },
      "Phone": {
        "type": "object",
        "title": "Canonical International Phone Number",
        "description": "The phone number in its canonical international [E.164 numbering plan format](https://www.itu.int/rec/T-REC-E.164/en).",
        "properties": {
          "national_number": {
            "type": "string",
            "description": "The national number, in its canonical international [E.164 numbering plan format](https://www.itu.int/rec/T-REC-E.164/en). The combined length of the country calling code (CC) and the national number must not be greater than 15 digits. The national number consists of a national destination code (NDC) and subscriber number (SN).",
            "minLength": 1,
            "maxLength": 14,
            "pattern": "^[0-9]{1,14}?$"
          }
        },
        "required": [
          "national_number"
        ]
      },
      "CobrandedCard": {
        "type": "object",
        "title": "cobranded card object",
        "description": "Details about the merchant cobranded card used for order purchase.",
        "properties": {
          "labels": {
            "$ref": "#/components/schemas/CobrandedCardLabels"
          },
          "payee": {
            "$ref": "#/components/schemas/AssociatedMerchant"
          },
          "amount": {
            "$ref": "#/components/schemas/AmountCharged"
          }
        }
      },
      "PayPalWalletAdditionalAttributes": {
        "type": "object",
        "title": "PayPal Wallet Attributes Response",
        "description": "Additional attributes associated with the use of a PayPal Wallet.",
        "properties": {
          "vault": {
            "$ref": "#/components/schemas/SavedPaymentSourceDetails"
          },
          "cobranded_cards": {
            "$ref": "#/components/schemas/CobrandedCards"
          }
        }
      },
      "PayPalWalletInformation": {
        "type": "object",
        "title": "PayPal Wallet Response",
        "description": "The PayPal Wallet response.",
        "properties": {
          "email_address": {
            "$ref": "#/components/schemas/AccountHolderEmailAddress"
          },
          "account_id": {
            "$ref": "#/components/schemas/AccountHolderAccountId"
          },
          "name": {
            "$ref": "#/components/schemas/AccountHolderName"
          },
          "phone_type": {
            "$ref": "#/components/schemas/phone_type-2"
          },
          "phone_number": {
            "$ref": "#/components/schemas/AccountHolderPhoneNumber"
          },
          "birth_date": {
            "$ref": "#/components/schemas/AccountHolderBirthDate"
          },
          "tax_info": {
            "$ref": "#/components/schemas/AccountHolderTaxInfo"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "attributes": {
            "$ref": "#/components/schemas/PayPalWalletAdditionalAttributes"
          }
        }
      },
      "IbanLastCharacters": {
        "type": "string",
        "description": "The last characters of the IBAN used to pay.",
        "minLength": 4,
        "maxLength": 34,
        "pattern": "[a-zA-Z0-9]{4}"
      },
      "Bancontact": {
        "type": "object",
        "title": "Bancontact payment object",
        "description": "Information used to pay Bancontact.",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/AccountHolderFullName"
          },
          "country_code": {
            "$ref": "#/components/schemas/TwoCharacterCountryCode"
          },
          "bic": {
            "$ref": "#/components/schemas/BankIdentificationCode"
          },
          "iban_last_chars": {
            "$ref": "#/components/schemas/IbanLastCharacters"
          },
          "card_last_digits": {
            "type": "string",
            "minLength": 4,
            "maxLength": 4,
            "pattern": "[0-9]{4}",
            "description": "The last digits of the card used to fund the Bancontact payment."
          },
          "attributes": {
            "$ref": "#/components/schemas/SepatAttributes"
          }
        }
      },
      "OneClickPayment": {
        "type": "object",
        "title": "BLIK one-click payment object",
        "description": "Information used to pay using BLIK one-click flow.",
        "properties": {
          "consumer_reference": {
            "type": "string",
            "description": "The merchant generated, unique reference serving as a primary identifier for accounts connected between Blik and a merchant.",
            "minLength": 3,
            "maxLength": 64,
            "pattern": "^[ -~]{3,64}$"
          }
        }
      },
      "Blik": {
        "type": "object",
        "title": "BLIK payment object",
        "description": "Information used to pay using BLIK.",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/AccountHolderFullName"
          },
          "country_code": {
            "$ref": "#/components/schemas/TwoCharacterCountryCode"
          },
          "email": {
            "$ref": "#/components/schemas/AccountHolderEmail"
          },
          "one_click": {
            "$ref": "#/components/schemas/OneClickIntegration"
          }
        }
      },
      "EPS": {
        "type": "object",
        "title": "An eps payment object",
        "description": "Information used to pay using eps.",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/AccountHolderFullName"
          },
          "country_code": {
            "$ref": "#/components/schemas/TwoCharacterCountryCode"
          },
          "bic": {
            "$ref": "#/components/schemas/BankIdentificationCode"
          }
        }
      },
      "Giropay": {
        "type": "object",
        "title": "A giropay payment object",
        "description": "Information needed to pay using giropay.",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/AccountHolderFullName"
          },
          "country_code": {
            "$ref": "#/components/schemas/TwoCharacterCountryCode"
          },
          "bic": {
            "$ref": "#/components/schemas/BankIdentificationCode"
          }
        }
      },
      "Ideal": {
        "type": "object",
        "title": "The iDEAL payment object",
        "description": "Information used to pay using iDEAL.",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/AccountHolderFullName"
          },
          "country_code": {
            "$ref": "#/components/schemas/TwoCharacterCountryCode"
          },
          "bic": {
            "$ref": "#/components/schemas/BankIdentificationCode"
          },
          "iban_last_chars": {
            "$ref": "#/components/schemas/IbanLastCharacters"
          },
          "attributes": {
            "$ref": "#/components/schemas/SepatAttributes"
          }
        }
      },
      "Mybank": {
        "type": "object",
        "title": "MyBank payment object",
        "description": "Information used to pay using MyBank.",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/AccountHolderFullName"
          },
          "country_code": {
            "$ref": "#/components/schemas/TwoCharacterCountryCode"
          },
          "bic": {
            "$ref": "#/components/schemas/BankIdentificationCode"
          },
          "iban_last_chars": {
            "$ref": "#/components/schemas/IbanLastCharacters"
          }
        }
      },
      "P24": {
        "type": "object",
        "title": "P24 payment object",
        "description": "Information used to pay using P24(Przelewy24).",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/AccountHolderFullName"
          },
          "email": {
            "$ref": "#/components/schemas/AccountHolderEmail"
          },
          "country_code": {
            "$ref": "#/components/schemas/TwoCharacterCountryCode"
          },
          "payment_descriptor": {
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "P24 generated payment description."
          },
          "method_id": {
            "type": "string",
            "minLength": 1,
            "maxLength": 300,
            "description": "Numeric identifier of the payment scheme or bank used for the payment."
          },
          "method_description": {
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Friendly name of the payment scheme or bank used for the payment."
          }
        }
      },
      "Sofort": {
        "type": "object",
        "title": "Sofort payment object",
        "description": "Information used to pay using Sofort.",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/AccountHolderFullName"
          },
          "country_code": {
            "$ref": "#/components/schemas/TwoCharacterCountryCode"
          },
          "bic": {
            "$ref": "#/components/schemas/BankIdentificationCode"
          },
          "iban_last_chars": {
            "$ref": "#/components/schemas/IbanLastCharacters"
          }
        }
      },
      "Trustly": {
        "type": "object",
        "title": "Trustly payment object",
        "description": "Information needed to pay using Trustly.",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/AccountHolderFullName"
          },
          "country_code": {
            "$ref": "#/components/schemas/TwoCharacterCountryCode"
          },
          "bic": {
            "$ref": "#/components/schemas/BankIdentificationCode"
          },
          "iban_last_chars": {
            "$ref": "#/components/schemas/IbanLastCharacters"
          }
        }
      },
      "VenmoWalletAttributes": {
        "type": "object",
        "title": "Venmo Wallet Attributes Response",
        "description": "Additional attributes associated with the use of a Venmo Wallet.",
        "properties": {
          "vault": {
            "$ref": "#/components/schemas/SavedPaymentSourceDetails"
          }
        }
      },
      "VenmoWallet": {
        "type": "object",
        "title": "Venmo Wallet Response Object",
        "description": "Venmo wallet response.",
        "properties": {
          "email_address": {
            "$ref": "#/components/schemas/PayerEmailAddress"
          },
          "account_id": {
            "$ref": "#/components/schemas/VenmoWalletAccountId"
          },
          "user_name": {
            "description": "The Venmo user name chosen by the user, also know as a Venmo handle.",
            "type": "string",
            "pattern": "^[-a-zA-Z0-9_]*$",
            "minLength": 1,
            "maxLength": 50
          },
          "name": {
            "$ref": "#/components/schemas/VenmoWalletAssociatedName"
          },
          "phone_number": {
            "$ref": "#/components/schemas/venmoWalletAssociatedPhoneNumber"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "attributes": {
            "$ref": "#/components/schemas/VenmoWalletAttributes"
          }
        }
      },
      "PaymentSourceDetails": {
        "type": "object",
        "title": "Payment Source Details",
        "description": "The payment source used to fund the payment.",
        "properties": {
          "card": {
            "$ref": "#/components/schemas/ReceivedCardRepresentation"
          },
          "paypal": {
            "$ref": "#/components/schemas/PayPalWalletInformation"
          },
          "bancontact": {
            "$ref": "#/components/schemas/Bancontact"
          },
          "blik": {
            "$ref": "#/components/schemas/Blik"
          },
          "eps": {
            "$ref": "#/components/schemas/EPS"
          },
          "giropay": {
            "$ref": "#/components/schemas/Giropay"
          },
          "ideal": {
            "$ref": "#/components/schemas/Ideal"
          },
          "mybank": {
            "$ref": "#/components/schemas/Mybank"
          },
          "p24": {
            "$ref": "#/components/schemas/P24"
          },
          "sofort": {
            "$ref": "#/components/schemas/Sofort"
          },
          "trustly": {
            "$ref": "#/components/schemas/Trustly"
          },
          "venmo": {
            "$ref": "#/components/schemas/VenmoWallet"
          }
        }
      },
      "ProcessingInstruction": {
        "type": "string",
        "title": "Processing Instruction",
        "description": "The instruction to process an order.",
        "default": "NO_INSTRUCTION",
        "minLength": 1,
        "maxLength": 36,
        "pattern": "^[0-9A-Z_]+$",
        "enum": [
          "ORDER_COMPLETE_ON_PAYMENT_APPROVAL",
          "NO_INSTRUCTION"
        ]
      },
      "TrackerStatus": {},
      "universal_product_code": {},
      "TrackerItem": {
        "type": "object",
        "title": "Tracker Item",
        "description": "The details of the items in the shipment.",
        "properties": {
          "name": {
            "type": "string",
            "description": "The item name or title.",
            "minLength": 1,
            "maxLength": 127
          },
          "quantity": {
            "type": "string",
            "description": "The item quantity. Must be a whole number.",
            "minLength": 1,
            "maxLength": 10,
            "pattern": "^[1-9][0-9]{0,9}$"
          },
          "sku": {
            "type": "string",
            "description": "The stock keeping unit (SKU) for the item. This can contain unicode characters.",
            "minLength": 1,
            "maxLength": 127
          },
          "image_url": {
            "type": "string",
            "format": "uri",
            "description": "The URL of the item's image. File type and size restrictions apply. An image that violates these restrictions will not be honored.",
            "minLength": 1,
            "maxLength": 2048,
            "pattern": "^(https:)([/|.|\\w|\\s|-])*\\.(?:jpg|gif|png|jpeg|JPG|GIF|PNG|JPEG)"
          },
          "upc": {
            "$ref": "#/components/schemas/tracker-item-upc"
          }
        }
      },
      "Tracker": {
        "type": "object",
        "title": "Order Tracker Response.",
        "description": "The tracking response on creation of tracker.",
        "allOf": [
          {
            "$ref": "#/components/schemas/TrackerDetails"
          },
          {
            "$ref": "#/components/schemas/TransactionTimestamps"
          }
        ]
      },
      "ShippingWithTrackingDetails": {
        "type": "object",
        "title": "Order Shipping Details",
        "description": "The order shipping details.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ShippingDetails"
          },
          {
            "$ref": "#/components/schemas/TrackingDetails"
          }
        ]
      },
      "AuthorizationStatusDetails": {
        "title": "Auhorization Status Details",
        "description": "The details of the authorized payment status.",
        "type": "object",
        "properties": {
          "reason": {
            "$ref": "#/components/schemas/AuthorizationStatusReason"
          }
        }
      },
      "AuthorizationStatus": {
        "type": "object",
        "title": "Authorization Status",
        "description": "The status fields for an authorized payment.",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/AuthorizedPaymentStatus"
          },
          "status_details": {
            "$ref": "#/components/schemas/AuthorizedPaymentStatusDetails"
          }
        }
      },
      "SellerProtection": {
        "type": "object",
        "description": "The level of protection offered as defined by [PayPal Seller Protection for Merchants](https://www.paypal.com/us/webapps/mpp/security/seller-protection).",
        "title": "Seller Protection",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/SellerProtectionStatus"
          },
          "dispute_categories": {
            "$ref": "#/components/schemas/DisputeCategories"
          }
        }
      },
      "Authorization": {
        "type": "object",
        "title": "Authorization",
        "description": "The authorized payment transaction.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AuthorizationStatus"
          },
          {
            "$ref": "#/components/schemas/AuthorizationBase"
          },
          {
            "$ref": "#/components/schemas/TransactionTimestamps"
          }
        ]
      },
      "ProcessorResponseInformation": {
        "type": "object",
        "title": "Processor Response",
        "description": "The processor response information for payment requests, such as direct credit card transactions.",
        "properties": {
          "avs_code": {
            "$ref": "#/components/schemas/AVSCode"
          },
          "cvv_code": {
            "$ref": "#/components/schemas/CVVCode"
          },
          "response_code": {
            "$ref": "#/components/schemas/ResponseCode"
          },
          "payment_advice_code": {
            "$ref": "#/components/schemas/PaymentAdviceCode"
          }
        }
      },
      "AuthorizationWithAdditionalData": {
        "type": "object",
        "title": "Authorization with Additional Data",
        "description": "The authorization with additional payment details, such as risk assessment and processor response. These details are populated only for certain payment methods.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Authorization"
          },
          {
            "$ref": "#/components/schemas/AuthorizationWithAdditionalDataResponse"
          }
        ]
      },
      "CaptureStatusDetails": {
        "title": "Capture Status Details",
        "description": "The details of the captured payment status.",
        "type": "object",
        "properties": {
          "reason": {
            "$ref": "#/components/schemas/CaptureStatusReason"
          }
        }
      },
      "CapturePaymentStatus": {
        "type": "object",
        "title": "Capture Status",
        "description": "The status of a captured payment.",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/CaptureStatus"
          },
          "status_details": {
            "$ref": "#/components/schemas/CapturPaymentStatusDetails"
          }
        }
      },
      "ExchangeRate": {
        "description": "The exchange rate that determines the amount to convert from one currency to another currency.",
        "type": "object",
        "title": "Exchange Rate",
        "properties": {
          "source_currency": {
            "$ref": "#/components/schemas/SourceCurrency"
          },
          "target_currency": {
            "$ref": "#/components/schemas/TargetCurrency"
          },
          "value": {
            "description": "The target currency amount. Equivalent to one unit of the source currency. Formatted as integer or decimal value with one to 15 digits to the right of the decimal point.",
            "type": "string"
          }
        },
        "readOnly": true
      },
      "SellerReceivableBreakdown": {
        "type": "object",
        "title": "Seller Receivable Breakdown",
        "description": "The detailed breakdown of the capture activity. This is not available for transactions that are in pending state.",
        "properties": {
          "gross_amount": {
            "$ref": "#/components/schemas/GrossAmount"
          },
          "paypal_fee": {
            "$ref": "#/components/schemas/PaypalFee"
          },
          "paypal_fee_in_receivable_currency": {
            "$ref": "#/components/schemas/PayPalFeeReceivableCurrency"
          },
          "net_amount": {
            "$ref": "#/components/schemas/NetAmount"
          },
          "receivable_amount": {
            "$ref": "#/components/schemas/ReceivableAmount"
          },
          "exchange_rate": {
            "$ref": "#/components/schemas/ExchangeRateDetails"
          },
          "platform_fees": {
            "$ref": "#/components/schemas/PlatformFees"
          }
        },
        "required": [
          "gross_amount"
        ]
      },
      "Capture": {
        "type": "object",
        "title": "Capture",
        "description": "A captured payment.",
        "allOf": [
          {
            "$ref": "#/components/schemas/CapturePaymentStatus"
          },
          {
            "$ref": "#/components/schemas/CaptureBaseInformation"
          },
          {
            "$ref": "#/components/schemas/TransactionTimestamps"
          }
        ]
      },
      "RefundStatusDetails": {
        "title": "Refund Status Details",
        "description": "The details of the refund status.",
        "type": "object",
        "properties": {
          "reason": {
            "$ref": "#/components/schemas/RefundReason"
          }
        }
      },
      "RefundPaymentStatus": {
        "type": "object",
        "description": "The refund status.",
        "title": "Refund Status",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/RefundStatus"
          },
          "status_details": {
            "$ref": "#/components/schemas/RefundPaymentStatusDetails"
          }
        }
      },
      "net_amount_breakdown_item": {
        "type": "object",
        "title": "Net Amount Breakdown Item",
        "description": "The net amount. Returned when the currency of the refund is different from the currency of the PayPal account where the merchant holds their funds.",
        "properties": {
          "payable_amount": {
            "$ref": "#/components/schemas/net-amount-breakdown-item-payable-amount"
          },
          "converted_amount": {
            "$ref": "#/components/schemas/net-amount-breakdown-item-converted-amount"
          },
          "exchange_rate": {
            "$ref": "#/components/schemas/net-amount-breakdown-item-exchange-rate"
          }
        }
      },
      "Refund": {
        "type": "object",
        "title": "Refund",
        "description": "The refund information.",
        "allOf": [
          {
            "$ref": "#/components/schemas/RefundPaymentStatus"
          },
          {
            "$ref": "#/components/schemas/RefundBaseInformation"
          },
          {
            "$ref": "#/components/schemas/TransactionTimestamps"
          }
        ]
      },
      "PaymentCollection": {
        "type": "object",
        "title": "Payment Collection",
        "description": "The collection of payments, or transactions, for a purchase unit in an order. For example, authorized payments, captured payments, and refunds.",
        "properties": {
          "authorizations": {
            "$ref": "#/components/schemas/AuthorizedPayments"
          },
          "captures": {
            "$ref": "#/components/schemas/CapturedPayments"
          },
          "refunds": {
            "$ref": "#/components/schemas/Refunds"
          }
        }
      },
      "PurchaseUnit": {
        "type": "object",
        "title": "Purchase Unit",
        "description": "The purchase unit details. Used to capture required information for the payment contract.",
        "properties": {
          "reference_id": {
            "type": "string",
            "description": "The API caller-provided external ID for the purchase unit. Required for multiple purchase units when you must update the order through `PATCH`. If you omit this value and the order contains only one purchase unit, PayPal sets this value to `default`. <blockquote><strong>Note:</strong> If there are multiple purchase units, <code>reference_id</code> is required for each purchase unit.</blockquote>",
            "minLength": 1,
            "maxLength": 256,
            "example": "d9f80740-38f0-11e8-b467-0ed5f89f718b"
          },
          "amount": {
            "$ref": "#/components/schemas/AmountWithBreakdown"
          },
          "payee": {
            "$ref": "#/components/schemas/Payee"
          },
          "payment_instruction": {
            "$ref": "#/components/schemas/PaymentInstruction"
          },
          "description": {
            "type": "string",
            "description": "The purchase description.",
            "minLength": 1,
            "maxLength": 127
          },
          "custom_id": {
            "type": "string",
            "description": "The API caller-provided external ID. Used to reconcile API caller-initiated transactions with PayPal transactions. Appears in transaction and settlement reports.",
            "minLength": 1,
            "maxLength": 127
          },
          "invoice_id": {
            "type": "string",
            "description": "The API caller-provided external invoice ID for this order.",
            "minLength": 1,
            "maxLength": 127
          },
          "id": {
            "type": "string",
            "description": "The PayPal-generated ID for the purchase unit. This ID appears in both the payer's transaction history and the emails that the payer receives. In addition, this ID is available in transaction and settlement reports that merchants and API callers can use to reconcile transactions. This ID is only available when an order is saved by calling <code>v2/checkout/orders/id/save</code>.",
            "minLength": 1,
            "maxLength": 19
          },
          "soft_descriptor": {
            "type": "string",
            "description": "The payment descriptor on account transactions on the customer's credit card statement, that PayPal sends to processors. The maximum length of the soft descriptor information that you can pass in the API field is 22 characters, in the following format:<code>22 - len(PAYPAL * (8)) - len(<var>Descriptor in Payment Receiving Preferences of Merchant account</var> + 1)</code>The PAYPAL prefix uses 8 characters.<br/><br/>The soft descriptor supports the following ASCII characters: Alphanumeric characters, Dashes, Asterisks, Periods (.) Spaces For Wallet payments marketplace integrations: The merchant descriptor in the Payment Receiving Preferences must be the marketplace name. You can't use the remaining space to show the customer service number. The remaining spaces can be a combination of seller name and country. <br/>For unbranded payments (Direct Card) marketplace integrations, use a combination of the seller name and phone number.",
            "minLength": 1,
            "maxLength": 22
          },
          "items": {
            "$ref": "#/components/schemas/PurchaseUnitItems"
          },
          "shipping": {
            "$ref": "#/components/schemas/PurchaseUnitShipping"
          },
          "supplementary_data": {
            "$ref": "#/components/schemas/SupplementaryData"
          },
          "payments": {
            "$ref": "#/components/schemas/PaymentsHistory"
          }
        }
      },
      "OrderStatus": {
        "type": "string",
        "description": "The order status.",
        "title": "Order Status",
        "minLength": 1,
        "maxLength": 255,
        "pattern": "^[0-9A-Z_]+$",
        "example": "PAYER_ACTION_REQUIRED",
        "enum": [
          "CREATED",
          "SAVED",
          "APPROVED",
          "VOIDED",
          "COMPLETED",
          "PAYER_ACTION_REQUIRED"
        ]
      },
      "Order": {
        "type": "object",
        "title": "Order",
        "description": "The order details.",
        "allOf": [
          {
            "$ref": "#/components/schemas/TransactionTimestamps"
          },
          {
            "$ref": "#/components/schemas/OrderDetails"
          }
        ]
      },
      "patch": {
        "type": "object",
        "title": "Patch",
        "description": "The JSON patch object to apply partial updates to resources.",
        "properties": {
          "op": {
            "$ref": "#/components/schemas/patch-op"
          },
          "path": {
            "type": "string",
            "description": "The <a href=\"https://tools.ietf.org/html/rfc6901\">JSON Pointer</a> to the target document location at which to complete the operation."
          },
          "value": {
            "title": "Patch Value",
            "description": "The value to apply. The <code>remove</code>, <code>copy</code>, and <code>move</code> operations do not require a value. Since <a href=\"https://www.rfc-editor.org/rfc/rfc69021\">JSON Patch</a> allows any type for <code>value</code>, the <code>type</code> property is not specified."
          },
          "from": {
            "type": "string",
            "description": "The <a href=\"https://tools.ietf.org/html/rfc6901\">JSON Pointer</a> to the target document location from which to move the value. Required for the <code>move</code> operation."
          }
        },
        "required": [
          "op"
        ]
      },
      "patch_request": {
        "type": "array",
        "title": "Patch Request",
        "description": "An array of JSON patch objects to apply partial updates to resources.",
        "items": {
          "$ref": "#/components/schemas/patch"
        }
      },
      "orders.patch-422": {
        "properties": {
          "issues": {
            "$ref": "#/components/schemas/orders-patch422-issues"
          }
        }
      },
      "order_confirm_application_context": {
        "type": "object",
        "title": "Confirm Application Context",
        "description": "Customizes the payer confirmation experience.",
        "properties": {
          "brand_name": {
            "type": "string",
            "description": "Label to present to your payer as part of the PayPal hosted web experience.",
            "minLength": 1,
            "maxLength": 127
          },
          "locale": {
            "$ref": "#/components/schemas/ExperienceLocale"
          },
          "return_url": {
            "type": "string",
            "format": "uri",
            "minLength": 10,
            "maxLength": 4000,
            "description": "The URL where the customer is redirected after the customer approves the payment."
          },
          "cancel_url": {
            "type": "string",
            "format": "uri",
            "minLength": 10,
            "maxLength": 4000,
            "description": "The URL where the customer is redirected after the customer cancels the payment."
          },
          "stored_payment_source": {
            "$ref": "#/components/schemas/StoredPaymentSource"
          }
        }
      },
      "confirm_order_request": {
        "title": "Confirm Order Request",
        "description": "Payer confirms the intent to pay for the Order using the provided payment source.",
        "properties": {
          "payment_source": {
            "$ref": "#/components/schemas/PaymentSourceDefinition"
          },
          "processing_instruction": {
            "$ref": "#/components/schemas/ProcessingInstruction"
          },
          "application_context": {
            "$ref": "#/components/schemas/order_confirm_application_context"
          }
        },
        "required": [
          "payment_source"
        ]
      },
      "orders.confirm-422": {
        "properties": {
          "issues": {
            "$ref": "#/components/schemas/orders-confirm422-issues"
          }
        }
      },
      "order_authorize_request": {
        "type": "object",
        "title": "Authorize Request",
        "description": "The authorization of an order request.",
        "properties": {
          "payment_source": {
            "$ref": "#/components/schemas/order-authorize-request-payment-source"
          }
        }
      },
      "order_authorize_response": {
        "type": "object",
        "title": "Order Authorize Response",
        "description": "The order authorize response.",
        "allOf": [
          {
            "$ref": "#/components/schemas/TransactionTimestamps"
          },
          {
            "$ref": "#/components/schemas/OrderAuthorizationDetails"
          }
        ]
      },
      "orders.authorize-403": {
        "properties": {
          "issues": {
            "$ref": "#/components/schemas/orders-authorize403-issues"
          }
        }
      },
      "orders.authorize-422": {
        "properties": {
          "issues": {
            "$ref": "#/components/schemas/orders-authorize422-issues"
          }
        }
      },
      "OrderCaptureRequest": {
        "type": "object",
        "title": "Order Capture Request",
        "description": "Completes an capture payment for an order.",
        "properties": {
          "payment_source": {
            "$ref": "#/components/schemas/PaymentSourceDefinition"
          }
        }
      },
      "orders.capture-403": {
        "properties": {
          "issues": {
            "$ref": "#/components/schemas/orders-capture403-issues"
          }
        }
      },
      "orders.capture-422": {
        "properties": {
          "issues": {
            "$ref": "#/components/schemas/orders-capture422-issues"
          }
        }
      },
      "shipment_tracking_number_type": {
        "type": "string",
        "title": "Shipment Tracking Number Type.",
        "description": "The tracking number type.",
        "minLength": 1,
        "maxLength": 64,
        "pattern": "^[0-9A-Z_]+$",
        "enum": [
          "CARRIER_PROVIDED",
          "E2E_PARTNER_PROVIDED"
        ]
      },
      "shipment_tracking_status": {
        "type": "string",
        "title": "Shipment Tracking Status.",
        "description": "The status of the item shipment. For allowed values, see <a href=\"/docs/tracking/reference/shipping-status/\">Shipping Statuses</a>.",
        "minLength": 1,
        "maxLength": 64,
        "pattern": "^[0-9A-Z_]+$",
        "enum": [
          "CANCELLED",
          "DELIVERED",
          "LOCAL_PICKUP",
          "ON_HOLD",
          "SHIPPED",
          "SHIPMENT_CREATED",
          "DROPPED_OFF",
          "IN_TRANSIT",
          "RETURNED",
          "LABEL_PRINTED",
          "ERROR",
          "UNCONFIRMED",
          "PICKUP_FAILED",
          "DELIVERY_DELAYED",
          "DELIVERY_SCHEDULED",
          "DELIVERY_FAILED",
          "INRETURN",
          "IN_PROCESS",
          "NEW",
          "VOID",
          "PROCESSED",
          "NOT_SHIPPED",
          "COMPLETED"
        ]
      },
      "shipment_carrier": {
        "type": "string",
        "title": "Carrier.",
        "description": "The carrier for the shipment. Some carriers have a global version as well as local subsidiaries. The subsidiaries are repeated over many countries and might also have an entry in the global list. Choose the carrier for your country. If the carrier is not available for your country, choose the global version of the carrier. If your carrier name is not in the list, set `carrier` to `OTHER` and set carrier name in `carrier_name_other`. For allowed values, see <a href=\"/docs/tracking/reference/carriers/\">Carriers</a>.",
        "minLength": 1,
        "maxLength": 64,
        "pattern": "^[0-9A-Z_]+$",
        "enum": [
          "DPD_RU",
          "BG_BULGARIAN_POST",
          "KR_KOREA_POST",
          "ZA_COURIERIT",
          "FR_EXAPAQ",
          "ARE_EMIRATES_POST",
          "GAC",
          "GEIS",
          "SF_EX",
          "PAGO",
          "MYHERMES",
          "DIAMOND_EUROGISTICS",
          "CORPORATECOURIERS_WEBHOOK",
          "BOND",
          "OMNIPARCEL",
          "SK_POSTA",
          "PUROLATOR",
          "FETCHR_WEBHOOK",
          "THEDELIVERYGROUP",
          "CELLO_SQUARE",
          "TARRIVE",
          "COLLIVERY",
          "MAINFREIGHT",
          "IND_FIRSTFLIGHT",
          "ACSWORLDWIDE",
          "AMSTAN",
          "OKAYPARCEL",
          "ENVIALIA_REFERENCE",
          "SEUR_ES",
          "CONTINENTAL",
          "FDSEXPRESS",
          "AMAZON_FBA_SWISHIP",
          "WYNGS",
          "DHL_ACTIVE_TRACING",
          "ZYLLEM",
          "RUSTON",
          "XPOST",
          "CORREOS_ES",
          "DHL_FR",
          "PAN_ASIA",
          "BRT_IT",
          "SRE_KOREA",
          "SPEEDEE",
          "TNT_UK",
          "VENIPAK",
          "SHREENANDANCOURIER",
          "CROSHOT",
          "NIPOST_NG",
          "EPST_GLBL",
          "NEWGISTICS",
          "POST_SLOVENIA",
          "JERSEY_POST",
          "BOMBINOEXP",
          "WMG",
          "XQ_EXPRESS",
          "FURDECO",
          "LHT_EXPRESS",
          "SOUTH_AFRICAN_POST_OFFICE",
          "SPOTON",
          "DIMERCO",
          "CYPRUS_POST_CYP",
          "ABCUSTOM",
          "IND_DELIVREE",
          "CN_BESTEXPRESS",
          "DX_SFTP",
          "PICKUPP_MYS",
          "FMX",
          "HELLMANN",
          "SHIP_IT_ASIA",
          "KERRY_ECOMMERCE",
          "FRETERAPIDO",
          "PITNEY_BOWES",
          "XPRESSEN_DK",
          "SEUR_SP_API",
          "DELIVERYONTIME",
          "JINSUNG",
          "TRANS_KARGO",
          "SWISHIP_DE",
          "IVOY_WEBHOOK",
          "AIRMEE_WEBHOOK",
          "DHL_BENELUX",
          "FIRSTMILE",
          "FASTWAY_IR",
          "HH_EXP",
          "MYS_MYPOST_ONLINE",
          "TNT_NL",
          "TIPSA",
          "TAQBIN_MY",
          "KGMHUB",
          "INTEXPRESS",
          "OVERSE_EXP",
          "ONECLICK",
          "ROADRUNNER_FREIGHT",
          "GLS_CROTIA",
          "MRW_FTP",
          "BLUEX",
          "DYLT",
          "DPD_IR",
          "SIN_GLBL",
          "TUFFNELLS_REFERENCE",
          "CJPACKET",
          "MILKMAN",
          "ASIGNA",
          "ONEWORLDEXPRESS",
          "ROYAL_MAIL",
          "VIA_EXPRESS",
          "TIGFREIGHT",
          "ZTO_EXPRESS",
          "TWO_GO",
          "IML",
          "INTEL_VALLEY",
          "EFS",
          "UK_UK_MAIL",
          "RAM",
          "ALLIEDEXPRESS",
          "APC_OVERNIGHT",
          "SHIPPIT",
          "TFM",
          "M_XPRESS",
          "HDB_BOX",
          "CLEVY_LINKS",
          "IBEONE",
          "FIEGE_NL",
          "KWE_GLOBAL",
          "CTC_EXPRESS",
          "LAO_POST",
          "AMAZON",
          "MORE_LINK",
          "JX",
          "EASY_MAIL",
          "ADUIEPYLE",
          "GB_PANTHER",
          "EXPRESSSALE",
          "SG_DETRACK",
          "TRUNKRS_WEBHOOK",
          "MATDESPATCH",
          "DICOM",
          "MBW",
          "KHM_CAMBODIA_POST",
          "SINOTRANS",
          "BRT_IT_PARCELID",
          "DHL_SUPPLY_CHAIN",
          "DHL_PL",
          "TOPYOU",
          "PALEXPRESS",
          "DHL_SG",
          "CN_WEDO",
          "FULFILLME",
          "DPD_DELISTRACK",
          "UPS_REFERENCE",
          "CARIBOU",
          "LOCUS_WEBHOOK",
          "DSV",
          "CN_GOFLY",
          "P2P_TRC",
          "DIRECTPARCELS",
          "NOVA_POSHTA_INT",
          "FEDEX_POLAND",
          "CN_JCEX",
          "FAR_INTERNATIONAL",
          "IDEXPRESS",
          "GANGBAO",
          "NEWAY",
          "POSTNL_INT_3_S",
          "RPX_ID",
          "DESIGNERTRANSPORT_WEBHOOK",
          "GLS_SLOVEN",
          "PARCELLED_IN",
          "GSI_EXPRESS",
          "CON_WAY",
          "BROUWER_TRANSPORT",
          "CPEX",
          "ISRAEL_POST",
          "DTDC_IN",
          "PTT_POST",
          "XDE_WEBHOOK",
          "TOLOS",
          "GIAO_HANG",
          "GEODIS_ESPACE",
          "MAGYAR_HU",
          "DOORDASH_WEBHOOK",
          "TIKI_ID",
          "CJ_HK_INTERNATIONAL",
          "STAR_TRACK_EXPRESS",
          "HELTHJEM",
          "SFB2C",
          "FREIGHTQUOTE",
          "LANDMARK_GLOBAL_REFERENCE",
          "PARCEL2GO",
          "DELNEXT",
          "RCL",
          "CGS_EXPRESS",
          "HK_POST",
          "SAP_EXPRESS",
          "PARCELPOST_SG",
          "HERMES",
          "IND_SAFEEXPRESS",
          "TOPHATTEREXPRESS",
          "MGLOBAL",
          "AVERITT",
          "LEADER",
          "_2EBOX",
          "SG_SPEEDPOST",
          "DBSCHENKER_SE",
          "ISR_POST_DOMESTIC",
          "BESTWAYPARCEL",
          "ASENDIA_DE",
          "NIGHTLINE_UK",
          "TAQBIN_SG",
          "TCK_EXPRESS",
          "ENDEAVOUR_DELIVERY",
          "NANJINGWOYUAN",
          "HEPPNER_FR",
          "EMPS_CN",
          "FONSEN",
          "PICKRR",
          "APC_OVERNIGHT_CONNUM",
          "STAR_TRACK_NEXT_FLIGHT",
          "DAJIN",
          "UPS_FREIGHT",
          "POSTA_PLUS",
          "CEVA",
          "ANSERX",
          "JS_EXPRESS",
          "PADTF",
          "UPS_MAIL_INNOVATIONS",
          "EZSHIP",
          "SYPOST",
          "AMAZON_SHIP_MCF",
          "YUSEN",
          "BRING",
          "SDA_IT",
          "GBA",
          "NEWEGGEXPRESS",
          "SPEEDCOURIERS_GR",
          "FORRUN",
          "PICKUP",
          "ECMS",
          "INTELIPOST",
          "FLASHEXPRESS",
          "CN_STO",
          "SEKO_SFTP",
          "HOME_DELIVERY_SOLUTIONS",
          "DPD_HGRY",
          "KERRYTTC_VN",
          "JOYING_BOX",
          "TOTAL_EXPRESS",
          "ZJS_EXPRESS",
          "STARKEN",
          "DEMANDSHIP",
          "CN_DPEX",
          "AUPOST_CN",
          "LOGISTERS",
          "GOGLOBALPOST",
          "GLS_CZ",
          "PAACK_WEBHOOK",
          "GRAB_WEBHOOK",
          "PARCELPOINT",
          "ICUMULUS",
          "DAIGLOBALTRACK",
          "GLOBAL_IPARCEL",
          "YURTICI_KARGO",
          "CN_PAYPAL_PACKAGE",
          "PARCEL_2_POST",
          "GLS_IT",
          "PIL_LOGISTICS",
          "HEPPNER",
          "GENERAL_OVERNIGHT",
          "HAPPY2POINT",
          "CHITCHATS",
          "SMOOTH",
          "CLE_LOGISTICS",
          "FIEGE",
          "MX_CARGO",
          "ZIINGFINALMILE",
          "DAYTON_FREIGHT",
          "TCS",
          "AEX",
          "HERMES_DE",
          "ROUTIFIC_WEBHOOK",
          "GLOBAVEND",
          "CJ_LOGISTICS",
          "PALLET_NETWORK",
          "RAF_PH",
          "UK_XDP",
          "PAPER_EXPRESS",
          "LA_POSTE_SUIVI",
          "PAQUETEXPRESS",
          "LIEFERY",
          "STRECK_TRANSPORT",
          "PONY_EXPRESS",
          "ALWAYS_EXPRESS",
          "GBS_BROKER",
          "CITYLINK_MY",
          "ALLJOY",
          "YODEL",
          "YODEL_DIR",
          "STONE3PL",
          "PARCELPAL_WEBHOOK",
          "DHL_ECOMERCE_ASA",
          "SIMPLYPOST",
          "KY_EXPRESS",
          "SHENZHEN",
          "US_LASERSHIP",
          "UC_EXPRE",
          "DIDADI",
          "CJ_KR",
          "DBSCHENKER_B2B",
          "MXE",
          "CAE_DELIVERS",
          "PFCEXPRESS",
          "WHISTL",
          "WEPOST",
          "DHL_PARCEL_ES",
          "DDEXPRESS",
          "ARAMEX_AU",
          "BNEED",
          "HK_TGX",
          "LATVIJAS_PASTS",
          "VIAEUROPE",
          "CORREO_UY",
          "CHRONOPOST_FR",
          "J_NET",
          "_6LS",
          "BLR_BELPOST",
          "BIRDSYSTEM",
          "DOBROPOST",
          "WAHANA_ID",
          "WEASHIP",
          "SONICTL",
          "KWT",
          "AFLLOG_FTP",
          "SKYNET_WORLDWIDE",
          "NOVA_POSHTA",
          "SEINO",
          "SZENDEX",
          "BPOST_INT",
          "DBSCHENKER_SV",
          "AO_DEUTSCHLAND",
          "EU_FLEET_SOLUTIONS",
          "PCFCORP",
          "LINKBRIDGE",
          "PRIMAMULTICIPTA",
          "COUREX",
          "ZAJIL_EXPRESS",
          "COLLECTCO",
          "JTEXPRESS",
          "FEDEX_UK",
          "USHIP",
          "PIXSELL",
          "SHIPTOR",
          "CDEK",
          "VNM_VIETTELPOST",
          "CJ_CENTURY",
          "GSO",
          "VIWO",
          "SKYBOX",
          "KERRYTJ",
          "NTLOGISTICS_VN",
          "SDH_SCM",
          "ZINC",
          "DPE_SOUTH_AFRC",
          "CESKA_CZ",
          "ACS_GR",
          "DEALERSEND",
          "JOCOM",
          "CSE",
          "TFORCE_FINALMILE",
          "SHIP_GATE",
          "SHIPTER",
          "NATIONAL_SAMEDAY",
          "YUNEXPRESS",
          "CAINIAO",
          "DMS_MATRIX",
          "DIRECTLOG",
          "ASENDIA_US",
          "_3JMSLOGISTICS",
          "LICCARDI_EXPRESS",
          "SKY_POSTAL",
          "CNWANGTONG",
          "POSTNORD_LOGISTICS_DK",
          "LOGISTIKA",
          "CELERITAS",
          "PRESSIODE",
          "SHREE_MARUTI",
          "LOGISTICSWORLDWIDE_HK",
          "EFEX",
          "LOTTE",
          "LONESTAR",
          "APRISAEXPRESS",
          "BEL_RS",
          "OSM_WORLDWIDE",
          "WESTGATE_GL",
          "FASTRACK",
          "DTD_EXPR",
          "ALFATREX",
          "PROMEDDELIVERY",
          "THABIT_LOGISTICS",
          "HCT_LOGISTICS",
          "CARRY_FLAP",
          "US_OLD_DOMINION",
          "ANICAM_BOX",
          "WANBEXPRESS",
          "AN_POST",
          "DPD_LOCAL",
          "STALLIONEXPRESS",
          "RAIDEREX",
          "SHOPFANS",
          "KYUNGDONG_PARCEL",
          "CHAMPION_LOGISTICS",
          "PICKUPP_SGP",
          "MORNING_EXPRESS",
          "NACEX",
          "THENILE_WEBHOOK",
          "HOLISOL",
          "LBCEXPRESS_FTP",
          "KURASI",
          "USF_REDDAWAY",
          "APG",
          "CN_BOXC",
          "ECOSCOOTING",
          "MAINWAY",
          "PAPERFLY",
          "HOUNDEXPRESS",
          "BOX_BERRY",
          "EP_BOX",
          "PLUS_LOG_UK",
          "FULFILLA",
          "ASE",
          "MAIL_PLUS",
          "XPO_LOGISTICS",
          "WNDIRECT",
          "CLOUDWISH_ASIA",
          "ZELERIS",
          "GIO_EXPRESS",
          "OCS_WORLDWIDE",
          "ARK_LOGISTICS",
          "AQUILINE",
          "PILOT_FREIGHT",
          "QWINTRY",
          "DANSKE_FRAGT",
          "CARRIERS",
          "AIR_CANADA_GLOBAL",
          "PRESIDENT_TRANS",
          "STEPFORWARDFS",
          "SKYNET_UK",
          "PITTOHIO",
          "CORREOS_EXPRESS",
          "RL_US",
          "MARA_XPRESS",
          "DESTINY",
          "UK_YODEL",
          "COMET_TECH",
          "DHL_PARCEL_RU",
          "TNT_REFR",
          "SHREE_ANJANI_COURIER",
          "MIKROPAKKET_BE",
          "ETS_EXPRESS",
          "COLIS_PRIVE",
          "CN_YUNDA",
          "AAA_COOPER",
          "ROCKET_PARCEL",
          "_360LION",
          "PANDU",
          "PROFESSIONAL_COURIERS",
          "FLYTEXPRESS",
          "LOGISTICSWORLDWIDE_MY",
          "CORREOS_DE_ESPANA",
          "IMX",
          "FOUR_PX_EXPRESS",
          "XPRESSBEES",
          "PICKUPP_VNM",
          "STARTRACK_EXPRESS",
          "FR_COLISSIMO",
          "NACEX_SPAIN_REFERENCE",
          "DHL_SUPPLY_CHAIN_AU",
          "ESHIPPING",
          "SHREETIRUPATI",
          "HX_EXPRESS",
          "INDOPAKET",
          "CN_17POST",
          "K1_EXPRESS",
          "CJ_GLS",
          "MYS_GDEX",
          "NATIONEX",
          "ANJUN",
          "FARGOOD",
          "SMG_EXPRESS",
          "RZYEXPRESS",
          "SEFL",
          "TNT_CLICK_IT",
          "HDB",
          "HIPSHIPPER",
          "RPXLOGISTICS",
          "KUEHNE",
          "IT_NEXIVE",
          "PTS",
          "SWISS_POST_FTP",
          "FASTRK_SERV",
          "_4_72",
          "US_YRC",
          "POSTNL_INTL_3S",
          "ELIAN_POST",
          "CUBYN",
          "SAU_SAUDI_POST",
          "ABXEXPRESS_MY",
          "HUAHAN_EXPRESS",
          "IND_JAYONEXPRESS",
          "ZES_EXPRESS",
          "ZEPTO_EXPRESS",
          "SKYNET_ZA",
          "ZEEK_2_DOOR",
          "BLINKLASTMILE",
          "POSTA_UKR",
          "CHROBINSON",
          "CN_POST56",
          "COURANT_PLUS",
          "SCUDEX_EXPRESS",
          "SHIPENTEGRA",
          "B_TWO_C_EUROPE",
          "COPE",
          "IND_GATI",
          "CN_WISHPOST",
          "NACEX_ES",
          "TAQBIN_HK",
          "GLOBALTRANZ",
          "HKD",
          "BJSHOMEDELIVERY",
          "OMNIVA",
          "SUTTON",
          "PANTHER_REFERENCE",
          "SFCSERVICE",
          "LTL",
          "PARKNPARCEL",
          "SPRING_GDS",
          "ECEXPRESS",
          "INTERPARCEL_AU",
          "AGILITY",
          "XL_EXPRESS",
          "ADERONLINE",
          "DIRECTCOURIERS",
          "PLANZER",
          "SENDING",
          "NINJAVAN_WB",
          "NATIONWIDE_MY",
          "SENDIT",
          "GB_ARROW",
          "IND_GOJAVAS",
          "KPOST",
          "DHL_FREIGHT",
          "BLUECARE",
          "JINDOUYUN",
          "TRACKON",
          "GB_TUFFNELLS",
          "TRUMPCARD",
          "ETOTAL",
          "SFPLUS_WEBHOOK",
          "SEKOLOGISTICS",
          "HERMES_2MANN_HANDLING",
          "DPD_LOCAL_REF",
          "UDS",
          "ZA_SPECIALISED_FREIGHT",
          "THA_KERRY",
          "PRT_INT_SEUR",
          "BRA_CORREIOS",
          "NZ_NZ_POST",
          "CN_EQUICK",
          "MYS_EMS",
          "GB_NORSK",
          "ESP_MRW",
          "ESP_PACKLINK",
          "KANGAROO_MY",
          "RPX",
          "XDP_UK_REFERENCE",
          "NINJAVAN_MY",
          "ADICIONAL",
          "NINJAVAN_ID",
          "ROADBULL",
          "YAKIT",
          "MAILAMERICAS",
          "MIKROPAKKET",
          "DYNALOGIC",
          "DHL_ES",
          "DHL_PARCEL_NL",
          "DHL_GLOBAL_MAIL_ASIA",
          "DAWN_WING",
          "GENIKI_GR",
          "HERMESWORLD_UK",
          "ALPHAFAST",
          "BUYLOGIC",
          "EKART",
          "MEX_SENDA",
          "SFC_LOGISTICS",
          "POST_SERBIA",
          "IND_DELHIVERY",
          "DE_DPD_DELISTRACK",
          "RPD2MAN",
          "CN_SF_EXPRESS",
          "YANWEN",
          "MYS_SKYNET",
          "CORREOS_DE_MEXICO",
          "CBL_LOGISTICA",
          "MEX_ESTAFETA",
          "AU_AUSTRIAN_POST",
          "RINCOS",
          "NLD_DHL",
          "RUSSIAN_POST",
          "COURIERS_PLEASE",
          "POSTNORD_LOGISTICS",
          "FEDEX",
          "DPE_EXPRESS",
          "DPD",
          "ADSONE",
          "IDN_JNE",
          "THECOURIERGUY",
          "CNEXPS",
          "PRT_CHRONOPOST",
          "LANDMARK_GLOBAL",
          "IT_DHL_ECOMMERCE",
          "ESP_NACEX",
          "PRT_CTT",
          "BE_KIALA",
          "ASENDIA_UK",
          "GLOBAL_TNT",
          "POSTUR_IS",
          "EPARCEL_KR",
          "INPOST_PACZKOMATY",
          "IT_POSTE_ITALIA",
          "BE_BPOST",
          "PL_POCZTA_POLSKA",
          "MYS_MYS_POST",
          "SG_SG_POST",
          "THA_THAILAND_POST",
          "LEXSHIP",
          "FASTWAY_NZ",
          "DHL_AU",
          "COSTMETICSNOW",
          "PFLOGISTICS",
          "LOOMIS_EXPRESS",
          "GLS_ITALY",
          "LINE",
          "GEL_EXPRESS",
          "HUODULL",
          "NINJAVAN_SG",
          "JANIO",
          "AO_COURIER",
          "BRT_IT_SENDER_REF",
          "SAILPOST",
          "LALAMOVE",
          "NEWZEALAND_COURIERS",
          "ETOMARS",
          "VIRTRANSPORT",
          "WIZMO",
          "PALLETWAYS",
          "I_DIKA",
          "CFL_LOGISTICS",
          "GEMWORLDWIDE",
          "GLOBAL_EXPRESS",
          "LOGISTYX_TRANSGROUP",
          "WESTBANK_COURIER",
          "ARCO_SPEDIZIONI",
          "YDH_EXPRESS",
          "PARCELINKLOGISTICS",
          "CNDEXPRESS",
          "NOX_NIGHT_TIME_EXPRESS",
          "AERONET",
          "LTIANEXP",
          "INTEGRA2_FTP",
          "PARCELONE",
          "NOX_NACHTEXPRESS",
          "CN_CHINA_POST_EMS",
          "CHUKOU1",
          "GLS_SLOV",
          "ORANGE_DS",
          "JOOM_LOGIS",
          "AUS_STARTRACK",
          "DHL",
          "GB_APC",
          "BONDSCOURIERS",
          "JPN_JAPAN_POST",
          "USPS",
          "WINIT",
          "ARG_OCA",
          "TW_TAIWAN_POST",
          "DMM_NETWORK",
          "TNT",
          "BH_POSTA",
          "SWE_POSTNORD",
          "CA_CANADA_POST",
          "WISELOADS",
          "ASENDIA_HK",
          "NLD_GLS",
          "MEX_REDPACK",
          "JET_SHIP",
          "DE_DHL_EXPRESS",
          "NINJAVAN_THAI",
          "RABEN_GROUP",
          "ESP_ASM",
          "HRV_HRVATSKA",
          "GLOBAL_ESTES",
          "LTU_LIETUVOS",
          "BEL_DHL",
          "AU_AU_POST",
          "SPEEDEXCOURIER",
          "FR_COLIS",
          "ARAMEX",
          "DPEX",
          "MYS_AIRPAK",
          "CUCKOOEXPRESS",
          "DPD_POLAND",
          "NLD_POSTNL",
          "NIM_EXPRESS",
          "QUANTIUM",
          "SENDLE",
          "ESP_REDUR",
          "MATKAHUOLTO",
          "CPACKET",
          "POSTI",
          "HUNTER_EXPRESS",
          "CHOIR_EXP",
          "LEGION_EXPRESS",
          "AUSTRIAN_POST_EXPRESS",
          "GRUPO",
          "POSTA_RO",
          "INTERPARCEL_UK",
          "GLOBAL_ABF",
          "POSTEN_NORGE",
          "XPERT_DELIVERY",
          "DHL_REFR",
          "DHL_HK",
          "SKYNET_UAE",
          "GOJEK",
          "YODEL_INTNL",
          "JANCO",
          "YTO",
          "WISE_EXPRESS",
          "JTEXPRESS_VN",
          "FEDEX_INTL_MLSERV",
          "VAMOX",
          "AMS_GRP",
          "DHL_JP",
          "HRPARCEL",
          "GESWL",
          "BLUESTAR",
          "CDEK_TR",
          "DESCARTES",
          "DELTEC_UK",
          "DTDC_EXPRESS",
          "TOURLINE",
          "BH_WORLDWIDE",
          "OCS",
          "YINGNUO_LOGISTICS",
          "UPS",
          "TOLL",
          "PRT_SEUR",
          "DTDC_AU",
          "THA_DYNAMIC_LOGISTICS",
          "UBI_LOGISTICS",
          "FEDEX_CROSSBORDER",
          "A1POST",
          "TAZMANIAN_FREIGHT",
          "CJ_INT_MY",
          "SAIA_FREIGHT",
          "SG_QXPRESS",
          "NHANS_SOLUTIONS",
          "DPD_FR",
          "COORDINADORA",
          "ANDREANI",
          "DOORA",
          "INTERPARCEL_NZ",
          "PHL_JAMEXPRESS",
          "BEL_BELGIUM_POST",
          "US_APC",
          "IDN_POS",
          "FR_MONDIAL",
          "DE_DHL",
          "HK_RPX",
          "DHL_PIECEID",
          "VNPOST_EMS",
          "RRDONNELLEY",
          "DPD_DE",
          "DELCART_IN",
          "IMEXGLOBALSOLUTIONS",
          "ACOMMERCE",
          "EURODIS",
          "CANPAR",
          "GLS",
          "IND_ECOM",
          "ESP_ENVIALIA",
          "DHL_UK",
          "SMSA_EXPRESS",
          "TNT_FR",
          "DEX_I",
          "BUDBEE_WEBHOOK",
          "COPA_COURIER",
          "VNM_VIETNAM_POST",
          "DPD_HK",
          "TOLL_NZ",
          "ECHO",
          "FEDEX_FR",
          "BORDEREXPRESS",
          "MAILPLUS_JPN",
          "TNT_UK_REFR",
          "KEC",
          "DPD_RO",
          "TNT_JP",
          "TH_CJ",
          "EC_CN",
          "FASTWAY_UK",
          "FASTWAY_US",
          "GLS_DE",
          "GLS_ES",
          "GLS_FR",
          "MONDIAL_BE",
          "SGT_IT",
          "TNT_CN",
          "TNT_DE",
          "TNT_ES",
          "TNT_PL",
          "PARCELFORCE",
          "SWISS_POST",
          "TOLL_IPEC",
          "AIR_21",
          "AIRSPEED",
          "BERT",
          "BLUEDART",
          "COLLECTPLUS",
          "COURIERPLUS",
          "COURIER_POST",
          "DHL_GLOBAL_MAIL",
          "DPD_UK",
          "DELTEC_DE",
          "DEUTSCHE_DE",
          "DOTZOT",
          "ELTA_GR",
          "EMS_CN",
          "ECARGO",
          "ENSENDA",
          "FERCAM_IT",
          "FASTWAY_ZA",
          "FASTWAY_AU",
          "FIRST_LOGISITCS",
          "GEODIS",
          "GLOBEGISTICS",
          "GREYHOUND",
          "JETSHIP_MY",
          "LION_PARCEL",
          "AEROFLASH",
          "ONTRAC",
          "SAGAWA",
          "SIODEMKA",
          "STARTRACK",
          "TNT_AU",
          "TNT_IT",
          "TRANSMISSION",
          "YAMATO",
          "DHL_IT",
          "DHL_AT",
          "LOGISTICSWORLDWIDE_KR",
          "GLS_SPAIN",
          "AMAZON_UK_API",
          "DPD_FR_REFERENCE",
          "DHLPARCEL_UK",
          "MEGASAVE",
          "QUALITYPOST",
          "IDS_LOGISTICS",
          "JOYINGBOX",
          "PANTHER_ORDER_NUMBER",
          "WATKINS_SHEPARD",
          "FASTTRACK",
          "UP_EXPRESS",
          "ELOGISTICA",
          "ECOURIER",
          "CJ_PHILIPPINES",
          "SPEEDEX",
          "ORANGECONNEX",
          "TECOR",
          "SAEE",
          "GLS_ITALY_FTP",
          "DELIVERE",
          "YYCOM",
          "ADICIONAL_PT",
          "DKSH",
          "NIPPON_EXPRESS_FTP",
          "GOLS",
          "FUJEXP",
          "QTRACK",
          "OMLOGISTICS_API",
          "GDPHARM",
          "MISUMI_CN",
          "AIR_CANADA",
          "CITY56_WEBHOOK",
          "SAGAWA_API",
          "KEDAEX",
          "PGEON_API",
          "WEWORLDEXPRESS",
          "JT_LOGISTICS",
          "TRUSK",
          "VIAXPRESS",
          "DHL_SUPPLYCHAIN_ID",
          "ZUELLIGPHARMA_SFTP",
          "MEEST",
          "TOLL_PRIORITY",
          "MOTHERSHIP_API",
          "CAPITAL",
          "EUROPAKET_API",
          "HFD",
          "TOURLINE_REFERENCE",
          "GIO_ECOURIER",
          "CN_LOGISTICS",
          "PANDION",
          "BPOST_API",
          "PASSPORTSHIPPING",
          "PAKAJO",
          "DACHSER",
          "YUSEN_SFTP",
          "SHYPLITE",
          "XYY",
          "MWD",
          "FAXECARGO",
          "MAZET",
          "FIRST_LOGISTICS_API",
          "SPRINT_PACK",
          "HERMES_DE_FTP",
          "CONCISE",
          "KERRY_EXPRESS_TW_API",
          "EWE",
          "FASTDESPATCH",
          "ABCUSTOM_SFTP",
          "CHAZKI",
          "SHIPPIE",
          "GEODIS_API",
          "NAQEL_EXPRESS",
          "PAPA_WEBHOOK",
          "FORWARDAIR",
          "DIALOGO_LOGISTICA_API",
          "LALAMOVE_API",
          "TOMYDOOR",
          "KRONOS_WEBHOOK",
          "JTCARGO",
          "T_CAT",
          "CONCISE_WEBHOOK",
          "TELEPORT_WEBHOOK",
          "CUSTOMCO_API",
          "SPX_TH",
          "BOLLORE_LOGISTICS",
          "CLICKLINK_SFTP",
          "M3LOGISTICS",
          "VNPOST_API",
          "AXLEHIRE_FTP",
          "SHADOWFAX",
          "MYHERMES_UK_API",
          "DAIICHI",
          "MENSAJEROSURBANOS_API",
          "POLARSPEED",
          "IDEXPRESS_ID",
          "PAYO",
          "WHISTL_SFTP",
          "INTEX_DE",
          "TRANS2U",
          "PRODUCTCAREGROUP_SFTP",
          "BIGSMART",
          "EXPEDITORS_API_REF",
          "AITWORLDWIDE_API",
          "WORLDCOURIER",
          "QUIQUP",
          "AGEDISS_SFTP",
          "ANDREANI_API",
          "CRLEXPRESS",
          "SMARTCAT",
          "CROSSFLIGHT",
          "PROCARRIER",
          "DHL_REFERENCE_API",
          "SEINO_API",
          "WSPEXPRESS",
          "KRONOS",
          "TOTAL_EXPRESS_API",
          "PARCLL",
          "XPEDIGO",
          "STAR_TRACK_WEBHOOK",
          "GPOST",
          "UCS",
          "DMFGROUP",
          "COORDINADORA_API",
          "MARKEN",
          "NTL",
          "REDJEPAKKETJE",
          "ALLIED_EXPRESS_FTP",
          "MONDIALRELAY_ES",
          "NAEKO_FTP",
          "MHI",
          "SHIPPIFY",
          "MALCA_AMIT_API",
          "JTEXPRESS_SG_API",
          "DACHSER_WEB",
          "FLIGHTLG",
          "CAGO",
          "COM1EXPRESS",
          "TONAMI_FTP",
          "PACKFLEET",
          "PUROLATOR_INTERNATIONAL",
          "WINESHIPPING_WEBHOOK",
          "DHL_ES_SFTP",
          "PCHOME_API",
          "CESKAPOSTA_API",
          "GORUSH",
          "HOMERUNNER",
          "AMAZON_ORDER",
          "EFWNOW_API",
          "CBL_LOGISTICA_API",
          "NIMBUSPOST",
          "LOGWIN_LOGISTICS",
          "NOWLOG_API",
          "DPD_NL",
          "GODEPENDABLE",
          "ESDEX",
          "LOGISYSTEMS_SFTP",
          "EXPEDITORS",
          "SNTGLOBAL_API",
          "SHIPX",
          "QINTL_API",
          "PACKS",
          "POSTNL_INTERNATIONAL",
          "AMAZON_EMAIL_PUSH",
          "DHL_API",
          "SPX",
          "AXLEHIRE",
          "ICSCOURIER",
          "DIALOGO_LOGISTICA",
          "SHUNBANG_EXPRESS",
          "TCS_API",
          "SF_EXPRESS_CN",
          "PACKETA",
          "SIC_TELIWAY",
          "MONDIALRELAY_FR",
          "INTIME_FTP",
          "JD_EXPRESS",
          "FASTBOX",
          "PATHEON",
          "INDIA_POST",
          "TIPSA_REF",
          "ECOFREIGHT",
          "VOX",
          "DIRECTFREIGHT_AU_REF",
          "BESTTRANSPORT_SFTP",
          "AUSTRALIA_POST_API",
          "FRAGILEPAK_SFTP",
          "FLIPXP",
          "VALUE_WEBHOOK",
          "DAESHIN",
          "SHERPA",
          "MWD_API",
          "SMARTKARGO",
          "DNJ_EXPRESS",
          "GOPEOPLE",
          "MYSENDLE_API",
          "ARAMEX_API",
          "PIDGE",
          "THAIPARCELS",
          "PANTHER_REFERENCE_API",
          "POSTAPLUS",
          "BUFFALO",
          "U_ENVIOS",
          "ELITE_CO",
          "BARQEXP",
          "ROCHE_INTERNAL_SFTP",
          "DBSCHENKER_ICELAND",
          "TNT_FR_REFERENCE",
          "NEWGISTICSAPI",
          "GLOVO",
          "GWLOGIS_API",
          "SPREETAIL_API",
          "MOOVA",
          "PLYCONGROUP",
          "USPS_WEBHOOK",
          "REIMAGINEDELIVERY",
          "EDF_FTP",
          "DAO365",
          "BIOCAIR_FTP",
          "RANSA_WEBHOOK",
          "SHIPXPRES",
          "COURANT_PLUS_API",
          "SHIPA",
          "HOMELOGISTICS",
          "DX",
          "POSTE_ITALIANE_PACCOCELERE",
          "TOLL_WEBHOOK",
          "LCTBR_API",
          "DX_FREIGHT",
          "DHL_SFTP",
          "SHIPROCKET",
          "UBER_WEBHOOK",
          "STATOVERNIGHT",
          "BURD",
          "FASTSHIP",
          "IBVENTURE_WEBHOOK",
          "GATI_KWE_API",
          "CRYOPDP_FTP",
          "HUBBED",
          "TIPSA_API",
          "ARASKARGO",
          "THIJS_NL",
          "ATSHEALTHCARE_REFERENCE",
          "99MINUTOS",
          "HELLENIC_POST",
          "HSM_GLOBAL",
          "MNX",
          "NMTRANSFER",
          "LOGYSTO",
          "INDIA_POST_INT",
          "AMAZON_FBA_SWISHIP_IN",
          "SRT_TRANSPORT",
          "BOMI",
          "DELIVERR_SFTP",
          "HSDEXPRESS",
          "SIMPLETIRE_WEBHOOK",
          "HUNTER_EXPRESS_SFTP",
          "UPS_API",
          "WOOYOUNG_LOGISTICS_SFTP",
          "PHSE_API",
          "WISH_EMAIL_PUSH",
          "NORTHLINE",
          "MEDAFRICA",
          "DPD_AT_SFTP",
          "ANTERAJA",
          "DHL_GLOBAL_FORWARDING_API",
          "LBCEXPRESS_API",
          "SIMSGLOBAL",
          "CDLDELIVERS",
          "TYP",
          "TESTING_COURIER_WEBHOOK",
          "PANDAGO_API",
          "ROYAL_MAIL_FTP",
          "THUNDEREXPRESS",
          "SECRETLAB_WEBHOOK",
          "SETEL",
          "JD_WORLDWIDE",
          "DPD_RU_API",
          "ARGENTS_WEBHOOK",
          "POSTONE",
          "TUSKLOGISTICS",
          "RHENUS_UK_API",
          "TAQBIN_SG_API",
          "INNTRALOG_SFTP",
          "DAYROSS",
          "CORREOSEXPRESS_API",
          "INTERNATIONAL_SEUR_API",
          "YODEL_API",
          "HEROEXPRESS",
          "DHL_SUPPLYCHAIN_IN",
          "URGENT_CARGUS",
          "FRONTDOORCORP",
          "JTEXPRESS_PH",
          "PARCELSTARS_WEBHOOK",
          "DPD_SK_SFTP",
          "MOVIANTO",
          "OZEPARTS_SHIPPING",
          "KARGOMKOLAY",
          "TRUNKRS",
          "OMNIRPS_WEBHOOK",
          "CHILEXPRESS",
          "TESTING_COURIER",
          "JNE_API",
          "BJSHOMEDELIVERY_FTP",
          "DEXPRESS_WEBHOOK",
          "USPS_API",
          "TRANSVIRTUAL",
          "SOLISTICA_API",
          "CHIENVENTURE_WEBHOOK",
          "DPD_UK_SFTP",
          "INPOST_UK",
          "JAVIT",
          "ZTO_DOMESTIC",
          "DHL_GT_API",
          "CEVA_TRACKING",
          "KOMON_EXPRESS",
          "EASTWESTCOURIER_FTP",
          "DANNIAO",
          "SPECTRAN",
          "DELIVER_IT",
          "RELAISCOLIS",
          "GLS_SPAIN_API",
          "POSTPLUS",
          "AIRTERRA",
          "GIO_ECOURIER_API",
          "DPD_CH_SFTP",
          "FEDEX_API",
          "INTERSMARTTRANS",
          "HERMES_UK_SFTP",
          "EXELOT_FTP",
          "DHL_PA_API",
          "VIRTRANSPORT_SFTP",
          "WORLDNET",
          "INSTABOX_WEBHOOK",
          "KNG",
          "FLASHEXPRESS_WEBHOOK",
          "MAGYAR_POSTA_API",
          "WESHIP_API",
          "OHI_WEBHOOK",
          "MUDITA",
          "BLUEDART_API",
          "T_CAT_API",
          "ADS",
          "HERMES_IT",
          "FITZMARK_API",
          "POSTI_API",
          "SMSA_EXPRESS_WEBHOOK",
          "TAMERGROUP_WEBHOOK",
          "LIVRAPIDE",
          "NIPPON_EXPRESS",
          "BETTERTRUCKS",
          "FAN",
          "PB_USPSFLATS_FTP",
          "PARCELRIGHT",
          "ITHINKLOGISTICS",
          "KERRY_EXPRESS_TH_WEBHOOK",
          "ECOUTIER",
          "SHOWL",
          "BRT_IT_API",
          "RIXONHK_API",
          "DBSCHENKER_API",
          "ILYANGLOGIS",
          "MAIL_BOX_ETC",
          "WESHIP",
          "DHL_GLOBAL_MAIL_API",
          "ACTIVOS24_API",
          "ATSHEALTHCARE",
          "LUWJISTIK",
          "GW_WORLD",
          "FAIRSENDEN_API",
          "SERVIP_WEBHOOK",
          "SWISHIP",
          "TANET",
          "HOTSIN_CARGO",
          "DIREX",
          "HUANTONG",
          "IMILE_API",
          "BDMNET",
          "AUEXPRESS",
          "NYTLOGISTICS",
          "DSV_REFERENCE",
          "NOVOFARMA_WEBHOOK",
          "AITWORLDWIDE_SFTP",
          "SHOPOLIVE",
          "FNF_ZA",
          "DHL_ECOMMERCE_GC",
          "FETCHR",
          "STARLINKS_API",
          "YYEXPRESS",
          "SERVIENTREGA",
          "HANJIN",
          "SPANISH_SEUR_FTP",
          "DX_B2B_CONNUM",
          "HELTHJEM_API",
          "INEXPOST",
          "A2B_BA",
          "RHENUS_GROUP",
          "SBERLOGISTICS_RU",
          "MALCA_AMIT",
          "PPL",
          "OSM_WORLDWIDE_SFTP",
          "ACILOGISTIX",
          "OPTIMACOURIER",
          "NOVA_POSHTA_API",
          "LOGGI",
          "YIFAN",
          "MYDYNALOGIC",
          "MORNINGLOBAL",
          "CONCISE_API",
          "FXTRAN",
          "DELIVERYOURPARCEL_ZA",
          "UPARCEL",
          "MOBI_BR",
          "LOGINEXT_WEBHOOK",
          "EMS",
          "SPEEDY"
        ]
      },
      "shipment_tracker": {
        "type": "object",
        "title": "Shipment Tracker.",
        "description": "The tracking information for a shipment.",
        "properties": {
          "transaction_id": {
            "type": "string",
            "description": "The PayPal transaction ID.",
            "minLength": 1,
            "maxLength": 50,
            "pattern": "^[a-zA-Z0-9]*$"
          },
          "tracking_number": {
            "type": "string",
            "description": "The tracking number for the shipment. This property supports Unicode.",
            "minLength": 1,
            "maxLength": 64
          },
          "tracking_number_type": {
            "$ref": "#/components/schemas/shipment-tracker-tracking-number-type"
          },
          "status": {
            "$ref": "#/components/schemas/shipment_tracking_status"
          },
          "shipment_date": {
            "$ref": "#/components/schemas/shipment-tracker-shipment-date"
          },
          "carrier": {
            "$ref": "#/components/schemas/shipment_carrier"
          },
          "carrier_name_other": {
            "type": "string",
            "description": "The name of the carrier for the shipment. Provide this value only if the carrier parameter is OTHER. This property supports Unicode.",
            "minLength": 1,
            "maxLength": 64
          },
          "postage_payment_id": {
            "type": "string",
            "description": "The postage payment ID. This property supports Unicode.",
            "readOnly": true,
            "minLength": 1,
            "maxLength": 64
          },
          "notify_buyer": {
            "type": "boolean",
            "description": "If true, sends an email notification to the buyer of the PayPal transaction. The email contains the tracking information that was uploaded through the API.",
            "default": false
          },
          "quantity": {
            "type": "integer",
            "description": "The quantity of items shipped.",
            "readOnly": true,
            "minimum": 1,
            "maximum": 100
          },
          "tracking_number_validated": {
            "type": "boolean",
            "description": "Indicates whether the carrier validated the tracking number.",
            "readOnly": true
          },
          "last_updated_time": {
            "$ref": "#/components/schemas/shipment-tracker-last-updated-time"
          },
          "shipment_direction": {
            "$ref": "#/components/schemas/shipment-tracker-shipment-direction"
          },
          "shipment_uploader": {
            "$ref": "#/components/schemas/shipment-tracker-shipment-uploader"
          }
        },
        "required": [
          "transaction_id",
          "status"
        ]
      },
      "order_tracker_request": {
        "type": "object",
        "title": "Order Tracker Request.",
        "description": "The tracking details of an order.",
        "allOf": [
          {
            "$ref": "#/components/schemas/shipment_tracker"
          },
          {
            "$ref": "#/components/schemas/order-tracker-request-allof1"
          }
        ]
      },
      "orders.track.create-403": {
        "properties": {
          "issues": {
            "$ref": "#/components/schemas/orders-track-create403-issues"
          }
        }
      },
      "orders.track.create-422": {
        "properties": {
          "issues": {
            "$ref": "#/components/schemas/orders-track-create422-issues"
          }
        }
      },
      "orders.trackers.patch-403": {
        "properties": {
          "issues": {
            "$ref": "#/components/schemas/orders-trackers-patch403-issues"
          }
        }
      },
      "orders.trackers.patch-404": {
        "properties": {
          "issues": {
            "$ref": "#/components/schemas/orders-trackers-patch404-issues"
          }
        }
      },
      "orders.trackers.patch-422": {
        "properties": {
          "issues": {
            "$ref": "#/components/schemas/orders-trackers-patch422-issues"
          }
        }
      },
      "BadRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BadRequestResponse"
          },
          {
            "$ref": "#/components/schemas/BadRequestError"
          }
        ]
      },
      "UnauthorizedRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UnauthorizedRequestResponse"
          },
          {
            "$ref": "#/components/schemas/UnauthorizedRequestError"
          }
        ]
      },
      "UnprocessableRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UnprocessableRequestResponse"
          },
          {
            "$ref": "#/components/schemas/UnprocessableRequestError"
          }
        ]
      },
      "ResourceNotFound": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceNotFoundResponse"
          },
          {
            "$ref": "#/components/schemas/not_found_error"
          }
        ]
      },
      "orders-patch-response404-json": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceNotFoundResponse"
          },
          {
            "$ref": "#/components/schemas/not_found_error"
          }
        ]
      },
      "orders-patch-response422-json": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UnprocessableRequestResponse"
          },
          {
            "$ref": "#/components/schemas/orders.patch-422"
          }
        ]
      },
      "orders-confirm-response403-json": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ForbiddenRequest"
          },
          {
            "$ref": "#/components/schemas/forbidden_error"
          }
        ]
      },
      "orders-confirm-response422-json": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UnprocessableRequestResponse"
          },
          {
            "$ref": "#/components/schemas/orders.confirm-422"
          }
        ]
      },
      "orders-authorize-response403-json": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ForbiddenRequest"
          },
          {
            "$ref": "#/components/schemas/orders.authorize-403"
          }
        ]
      },
      "orders-authorize-response404-json": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceNotFoundResponse"
          },
          {
            "$ref": "#/components/schemas/not_found_error"
          }
        ]
      },
      "orders-authorize-response422-json": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UnprocessableRequestResponse"
          },
          {
            "$ref": "#/components/schemas/orders.authorize-422"
          }
        ]
      },
      "Forbidden": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ForbiddenRequest"
          },
          {
            "$ref": "#/components/schemas/orders.capture-403"
          }
        ]
      },
      "CaptureOrdersUnprocessableRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UnprocessableRequestResponse"
          },
          {
            "$ref": "#/components/schemas/orders.capture-422"
          }
        ]
      },
      "orders-track-create-response403-json": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ForbiddenRequest"
          },
          {
            "$ref": "#/components/schemas/orders.track.create-403"
          }
        ]
      },
      "orders-track-create-response404-json": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceNotFoundResponse"
          },
          {
            "$ref": "#/components/schemas/not_found_error"
          }
        ]
      },
      "orders-track-create-response422-json": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UnprocessableRequestResponse"
          },
          {
            "$ref": "#/components/schemas/orders.track.create-422"
          }
        ]
      },
      "orders-trackers-patch-response403-json": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ForbiddenRequest"
          },
          {
            "$ref": "#/components/schemas/orders.trackers.patch-403"
          }
        ]
      },
      "orders-trackers-patch-response404-json": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceNotFoundResponse"
          },
          {
            "$ref": "#/components/schemas/orders.trackers.patch-404"
          }
        ]
      },
      "orders-trackers-patch-response422-json": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UnprocessableRequestResponse"
          },
          {
            "$ref": "#/components/schemas/orders.trackers.patch-422"
          }
        ]
      },
      "BadRequestIssues": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/BadRequestIssue"
        }
      },
      "BadRequestIssue": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/InvalidArrayMaxItems"
          },
          {
            "$ref": "#/components/schemas/InvalidArrayMinItems"
          },
          {
            "$ref": "#/components/schemas/InvalidCountryCode"
          },
          {
            "$ref": "#/components/schemas/InvalidParameterSyntax"
          },
          {
            "$ref": "#/components/schemas/InvalidStringLength"
          },
          {
            "$ref": "#/components/schemas/InvalidParameterValue"
          },
          {
            "$ref": "#/components/schemas/MissingRequiredParameter"
          },
          {
            "$ref": "#/components/schemas/NotSupported"
          },
          {
            "$ref": "#/components/schemas/PaypalRequestIdRequired"
          },
          {
            "$ref": "#/components/schemas/MalformedRequestJson"
          }
        ]
      },
      "InvalidArrayMaxItems": {
        "title": "INVALID_ARRAY_MAX_ITEMS",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/InvalidArrayMaxItemsIssue"
          },
          "description": {
            "$ref": "#/components/schemas/InvalidArrayMaxItemsDescription"
          }
        }
      },
      "InvalidArrayMinItems": {
        "title": "INVALID_ARRAY_MIN_ITEMS",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/InvalidArrayMinItemsIssue"
          },
          "description": {
            "$ref": "#/components/schemas/InvalidArrayMinItemsDescription"
          }
        }
      },
      "InvalidCountryCode": {
        "title": "INVALID_COUNTRY_CODE",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/InvalidCountryCodeIssue"
          },
          "description": {
            "$ref": "#/components/schemas/InvalidCountryCodeDescription"
          }
        }
      },
      "InvalidParameterSyntax": {
        "title": "INVALID_PARAMETER_SYNTAX",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/InvalidParameterSyntaxIssue"
          },
          "description": {
            "$ref": "#/components/schemas/InvalidParameterSyntaxDescription"
          }
        }
      },
      "InvalidStringLength": {
        "title": "INVALID_STRING_LENGTH",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/InvalidStringLengthIssue"
          },
          "description": {
            "$ref": "#/components/schemas/InvalidStringLengthDescription"
          }
        }
      },
      "InvalidParameterValue": {
        "title": "INVALID_PARAMETER_VALUE",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/InvalidParameterValueIssue"
          },
          "description": {
            "$ref": "#/components/schemas/InvalidParameterValueDescription"
          }
        }
      },
      "MissingRequiredParameter": {
        "title": "MISSING_REQUIRED_PARAMETER",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/MissingRequiredParameterIssue"
          },
          "description": {
            "$ref": "#/components/schemas/MissingRequiredParameterDescription"
          }
        }
      },
      "NotSupported": {
        "title": "NOT_SUPPORTED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/NotSupportedIssue"
          },
          "description": {
            "$ref": "#/components/schemas/NotSupportedDescription"
          }
        }
      },
      "PaypalRequestIdRequired": {
        "title": "PAYPAL_REQUEST_ID_REQUIRED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/PaypalRequestIdRequiredIssue"
          },
          "description": {
            "$ref": "#/components/schemas/PaypalRequestIdRequiredDescription"
          }
        }
      },
      "MalformedRequestJson": {
        "title": "MALFORMED_REQUEST_JSON",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/MalformedRequestJsonIssue"
          },
          "description": {
            "$ref": "#/components/schemas/MalformedRequestJsonDescription"
          }
        }
      },
      "UnauthorizedErrorIssues": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/UnauthorizedErrorIssue"
        }
      },
      "UnauthorizedErrorIssue": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/InvalidAccountStatus"
          }
        ]
      },
      "InvalidAccountStatus": {
        "title": "INVALID_ACCOUNT_STATUS",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/InvalidAccountStatusIssue"
          },
          "description": {
            "$ref": "#/components/schemas/InvalidAccountStatusDescription"
          }
        }
      },
      "forbidden-error-issues": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/forbidden-error-issues-items"
        }
      },
      "forbidden-error-issues-items": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/permission-denied"
          },
          {
            "$ref": "#/components/schemas/NotEnabledForCardProcessing"
          },
          {
            "$ref": "#/components/schemas/payee-account-not-verified"
          }
        ]
      },
      "permission-denied": {
        "title": "PERMISSION_DENIED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/PermissionDeniedIssue"
          },
          "description": {
            "$ref": "#/components/schemas/PermissionDeniedDescription"
          }
        }
      },
      "payee-account-not-verified": {
        "title": "PAYEE_ACCOUNT_NOT_VERIFIED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/PayeeAccountNotVerifiedIssue"
          },
          "description": {
            "$ref": "#/components/schemas/PayeeAccountNotVerifiedDescription"
          }
        }
      },
      "not-found-error-issues": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/not-found-error-issues-items"
        }
      },
      "not-found-error-issues-items": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/invalid-resource-id"
          }
        ]
      },
      "invalid-resource-id": {
        "title": "INVALID_RESOURCE_ID",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/invalid-resource-id-issue"
          },
          "description": {
            "$ref": "#/components/schemas/invalid-resource-id-description"
          }
        }
      },
      "UnprocessableErrorIssues": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/UnprocessableErrorIssue"
        }
      },
      "UnprocessableErrorIssue": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/AmountMismatch"
          },
          {
            "$ref": "#/components/schemas/CannotBeNegative"
          },
          {
            "$ref": "#/components/schemas/CannotBeZeroOrNegative"
          },
          {
            "$ref": "#/components/schemas/CardExpired"
          },
          {
            "$ref": "#/components/schemas/MissingPreviousReference"
          },
          {
            "$ref": "#/components/schemas/MissingCryptogram"
          },
          {
            "$ref": "#/components/schemas/CityRequired"
          },
          {
            "$ref": "#/components/schemas/DecimalPrecision"
          },
          {
            "$ref": "#/components/schemas/DonationItemsNotSupported"
          },
          {
            "$ref": "#/components/schemas/DuplicateReferenceId"
          },
          {
            "$ref": "#/components/schemas/InvalidCurrencyCode"
          },
          {
            "$ref": "#/components/schemas/InvalidPayerId"
          },
          {
            "$ref": "#/components/schemas/ItemTotalMismatch"
          },
          {
            "$ref": "#/components/schemas/ItemTotalRequired"
          },
          {
            "$ref": "#/components/schemas/MaxValueExceeded"
          },
          {
            "$ref": "#/components/schemas/MissingPickupAddress"
          },
          {
            "$ref": "#/components/schemas/MultiCurrencyOrder"
          },
          {
            "$ref": "#/components/schemas/MultipleItemCategories"
          },
          {
            "$ref": "#/components/schemas/MultipleShippingAddressNotSupported"
          },
          {
            "$ref": "#/components/schemas/MultipleShippingTypeNotSupported"
          },
          {
            "$ref": "#/components/schemas/PayeeAccountInvalid"
          },
          {
            "$ref": "#/components/schemas/PayeeAccountLockedOrClosed"
          },
          {
            "$ref": "#/components/schemas/PayeeAccountRestricted"
          },
          {
            "$ref": "#/components/schemas/PayeePricingTierIdNotEnabled"
          },
          {
            "$ref": "#/components/schemas/InvalidPayeePricingTierId"
          },
          {
            "$ref": "#/components/schemas/PayeeFXRateIdExpired"
          },
          {
            "$ref": "#/components/schemas/PayeeFXRateIdCurrencyMismatch"
          },
          {
            "$ref": "#/components/schemas/InvalidFXRateId"
          },
          {
            "$ref": "#/components/schemas/PlatformFeesNotSupported"
          },
          {
            "$ref": "#/components/schemas/InvalidPlatformFeesAccount"
          },
          {
            "$ref": "#/components/schemas/InvalidPlatformFeesAmount"
          },
          {
            "$ref": "#/components/schemas/PostalCodeRequired"
          },
          {
            "$ref": "#/components/schemas/ReferenceIdRequired"
          },
          {
            "$ref": "#/components/schemas/ShippingOptionNotSupported"
          },
          {
            "$ref": "#/components/schemas/TaxTotalMismatch"
          },
          {
            "$ref": "#/components/schemas/TaxTotalRequired"
          },
          {
            "$ref": "#/components/schemas/UnsupportedIntent"
          },
          {
            "$ref": "#/components/schemas/UnsupportedPaymentInstruction"
          },
          {
            "$ref": "#/components/schemas/ShippingTypeNotSupportedForClient"
          },
          {
            "$ref": "#/components/schemas/UnsupportedShippingType"
          },
          {
            "$ref": "#/components/schemas/ShippingOptionNotSelected"
          },
          {
            "$ref": "#/components/schemas/ShippingOptionNotSupported"
          },
          {
            "$ref": "#/components/schemas/MultipleShippingOptionSelected"
          },
          {
            "$ref": "#/components/schemas/PreferredShippingOptionAmountMismatch"
          },
          {
            "$ref": "#/components/schemas/AgreementAlreadyCancelled"
          },
          {
            "$ref": "#/components/schemas/BillingAgreementNotFound"
          },
          {
            "$ref": "#/components/schemas/ComplianceViolation"
          },
          {
            "$ref": "#/components/schemas/DomesticTransactionRequired"
          },
          {
            "$ref": "#/components/schemas/DuplicateInvoiceId"
          },
          {
            "$ref": "#/components/schemas/InstrumentDeclined"
          },
          {
            "$ref": "#/components/schemas/MaxNumberOfPaymentAttemptsExceeded"
          },
          {
            "$ref": "#/components/schemas/NotEnabledForCardProcessing"
          },
          {
            "$ref": "#/components/schemas/PayeeBlockedTransaction"
          },
          {
            "$ref": "#/components/schemas/PayerAccountLockedOrClosed"
          },
          {
            "$ref": "#/components/schemas/PayerAccountRestricted"
          },
          {
            "$ref": "#/components/schemas/PayerCannotPay"
          },
          {
            "$ref": "#/components/schemas/TransactionBlockedByPayee"
          },
          {
            "$ref": "#/components/schemas/TransactionLimitExceeded"
          },
          {
            "$ref": "#/components/schemas/TransactionReceivingLimitExceeded"
          },
          {
            "$ref": "#/components/schemas/TransactionRefused"
          },
          {
            "$ref": "#/components/schemas/AuthCaptureNotEnabled"
          },
          {
            "$ref": "#/components/schemas/UnsupportedProcessingInstruction"
          },
          {
            "$ref": "#/components/schemas/OrderCompleteOnPaymentApproval"
          },
          {
            "$ref": "#/components/schemas/InvalidExpiryDate"
          },
          {
            "$ref": "#/components/schemas/IncompatibleParameterValue"
          },
          {
            "$ref": "#/components/schemas/InvalidPreviousTransactionReference"
          },
          {
            "$ref": "#/components/schemas/PreviousTransactionReferenceHasChargeback"
          },
          {
            "$ref": "#/components/schemas/PreviousTransactionReferenceVoided"
          },
          {
            "$ref": "#/components/schemas/PaymentSourceMismatch"
          },
          {
            "$ref": "#/components/schemas/MerchantInitiatedWithSecurityCode"
          },
          {
            "$ref": "#/components/schemas/MerchantInitiatedWithAuthenticationResults"
          },
          {
            "$ref": "#/components/schemas/MerchantInitiatedWithMultiplePurchaseUnits"
          },
          {
            "$ref": "#/components/schemas/PaymentSourceInfoCannotBeVerified"
          },
          {
            "$ref": "#/components/schemas/PaymentSourceDeclinedByProcessor"
          },
          {
            "$ref": "#/components/schemas/PaymentSourceCannotBeUsed"
          },
          {
            "$ref": "#/components/schemas/NotEnabledForApplePay"
          },
          {
            "$ref": "#/components/schemas/NotEnabledForGooglePay"
          },
          {
            "$ref": "#/components/schemas/ApplePayAmountMismatch"
          },
          {
            "$ref": "#/components/schemas/BillingAddressInvalid"
          },
          {
            "$ref": "#/components/schemas/ShippingAddressInvalid"
          },
          {
            "$ref": "#/components/schemas/VaultInstructionDuplicated"
          },
          {
            "$ref": "#/components/schemas/VaultInstructionRequired"
          },
          {
            "$ref": "#/components/schemas/MismatchedVaultIdToPaymentSource"
          },
          {
            "$ref": "#/components/schemas/CryptogramRequired"
          },
          {
            "$ref": "#/components/schemas/EMVDataRequired"
          },
          {
            "$ref": "#/components/schemas/NotEligibleForPnrefProcessing"
          },
          {
            "$ref": "#/components/schemas/NotEligibleForPaypalTransactionIdProcessing"
          },
          {
            "$ref": "#/components/schemas/PaypalTransactionIdNotFound"
          },
          {
            "$ref": "#/components/schemas/PnrefNotFound"
          },
          {
            "$ref": "#/components/schemas/InvalidSecurityCodeLength"
          },
          {
            "$ref": "#/components/schemas/NotEnabledToVaultPaymentSource"
          },
          {
            "$ref": "#/components/schemas/RequiredParameterForCustomerInitiatedPayment"
          },
          {
            "$ref": "#/components/schemas/TokenExpired"
          },
          {
            "$ref": "#/components/schemas/InvalidGooglePayToken"
          },
          {
            "$ref": "#/components/schemas/GooglePayGatewayMerchantIdMismatch"
          },
          {
            "$ref": "#/components/schemas/OneOfParametersRequired"
          },
          {
            "$ref": "#/components/schemas/AliasDeclinedByProcessor"
          },
          {
            "$ref": "#/components/schemas/BlikOneClickMissingRequiredParameter"
          }
        ]
      },
      "AmountMismatch": {
        "title": "AMOUNT_MISMATCH",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/AmountMismatchIssue"
          },
          "description": {
            "$ref": "#/components/schemas/AmountMismatchDescription"
          }
        }
      },
      "CannotBeNegative": {
        "title": "CANNOT_BE_NEGATIVE",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/CannotBeNegativeIssue"
          },
          "description": {
            "$ref": "#/components/schemas/CannotBeNegativeDescription"
          }
        }
      },
      "CannotBeZeroOrNegative": {
        "title": "CANNOT_BE_ZERO_OR_NEGATIVE",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/CannotBeZeroOrNegativeIssue"
          },
          "description": {
            "$ref": "#/components/schemas/CannotBeZeroOrNegativeDescription"
          }
        }
      },
      "CardExpired": {
        "title": "CARD_EXPIRED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/CardExpiredIssue"
          },
          "description": {
            "$ref": "#/components/schemas/CardExpiredDescription"
          }
        }
      },
      "MissingPreviousReference": {
        "title": "MISSING_PREVIOUS_REFERENCE",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/MissingPreviousReferenceIssue"
          },
          "description": {
            "$ref": "#/components/schemas/MissingPreviousReferenceDescription"
          }
        }
      },
      "MissingCryptogram": {
        "title": "MISSING_CRYPTOGRAM",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/MissingCryptogramIssue"
          },
          "description": {
            "$ref": "#/components/schemas/MissingCryptogramDescription"
          }
        }
      },
      "CityRequired": {
        "title": "CITY_REQUIRED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/CityRequiredIssue"
          },
          "description": {
            "$ref": "#/components/schemas/CityRequiredDescription"
          }
        }
      },
      "DecimalPrecision": {
        "title": "DECIMAL_PRECISION",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/DecimalPrecisionIssue"
          },
          "description": {
            "$ref": "#/components/schemas/DecimalPrecisionDescription"
          }
        }
      },
      "DonationItemsNotSupported": {
        "title": "DONATION_ITEMS_NOT_SUPPORTED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/DonationItemsNotSupportedIssue"
          },
          "description": {
            "$ref": "#/components/schemas/DonationItemsNotSupportedDescription"
          }
        }
      },
      "DuplicateReferenceId": {
        "title": "DUPLICATE_REFERENCE_ID",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/DuplicateReferenceIdIssue"
          },
          "description": {
            "$ref": "#/components/schemas/DuplicateReferenceIdDescription"
          }
        }
      },
      "InvalidCurrencyCode": {
        "title": "INVALID_CURRENCY_CODE",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/InvalidCurrencyCodeIssue"
          },
          "description": {
            "$ref": "#/components/schemas/InvalidCurrencyCodeDescription"
          }
        }
      },
      "InvalidPayerId": {
        "title": "INVALID_PAYER_ID",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/InvalidPayerIdIssue"
          },
          "description": {
            "$ref": "#/components/schemas/InvalidPayerIdDescription"
          }
        }
      },
      "ItemTotalMismatch": {
        "title": "ITEM_TOTAL_MISMATCH",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/ItemTotalMismatchIssue"
          },
          "description": {
            "$ref": "#/components/schemas/ItemTotalMismatchDescription"
          }
        }
      },
      "ItemTotalRequired": {
        "title": "ITEM_TOTAL_REQUIRED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/ItemTotalRequiredIssue"
          },
          "description": {
            "$ref": "#/components/schemas/ItemTotalRequiredDescription"
          }
        }
      },
      "MaxValueExceeded": {
        "title": "MAX_VALUE_EXCEEDED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/MaxValueExceededIssue"
          },
          "description": {
            "$ref": "#/components/schemas/MaxValueExceededDescription"
          }
        }
      },
      "MissingPickupAddress": {
        "title": "MISSING_PICKUP_ADDRESS",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/MissingPickupAddressIssue"
          },
          "description": {
            "$ref": "#/components/schemas/MissingPickupAddressDescription"
          }
        }
      },
      "MultiCurrencyOrder": {
        "title": "MULTI_CURRENCY_ORDER",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/MultiCurrencyOrderIssue"
          },
          "description": {
            "$ref": "#/components/schemas/MultiCurrencyOrderDescription"
          }
        }
      },
      "MultipleItemCategories": {
        "title": "MULTIPLE_ITEM_CATEGORIES",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/MultipleItemCategoriesIssue"
          },
          "description": {
            "$ref": "#/components/schemas/MultipleItemCategoriesDescription"
          }
        }
      },
      "MultipleShippingAddressNotSupported": {
        "title": "MULTIPLE_SHIPPING_ADDRESS_NOT_SUPPORTED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/MultipleShippingAddressNotSupportedIssue"
          },
          "description": {
            "$ref": "#/components/schemas/MultipleShippingAddressNotSupportedDescription"
          }
        }
      },
      "MultipleShippingTypeNotSupported": {
        "title": "MULTIPLE_SHIPPING_TYPE_NOT_SUPPORTED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/MultipleShippingTypeNotSupportedIssue"
          },
          "description": {
            "$ref": "#/components/schemas/MultipleShippingTypeNotSupportedDescription"
          }
        }
      },
      "PayeeAccountInvalid": {
        "title": "PAYEE_ACCOUNT_INVALID",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/PayeeAccountInvalidIssue"
          },
          "description": {
            "$ref": "#/components/schemas/PayeeAccountInvalidDescription"
          }
        }
      },
      "PayeeAccountLockedOrClosed": {
        "title": "PAYEE_ACCOUNT_LOCKED_OR_CLOSED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/PayeeAccountLockedOrClosedIssue"
          },
          "description": {
            "$ref": "#/components/schemas/PayeeAccountLockedOrClosedDescription"
          }
        }
      },
      "PayeeAccountRestricted": {
        "title": "PAYEE_ACCOUNT_RESTRICTED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/PayeeAccountRestrictedIssue"
          },
          "description": {
            "$ref": "#/components/schemas/PayeeAccountRestrictedDescription"
          }
        }
      },
      "PayeePricingTierIdNotEnabled": {
        "title": "PAYEE_PRICING_TIER_ID_NOT_ENABLED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/PayeePricingTierIdNotEnabledIssue"
          },
          "description": {
            "$ref": "#/components/schemas/PayeePricingTierIdNotEnabledDescription"
          }
        }
      },
      "InvalidPayeePricingTierId": {
        "title": "INVALID_PAYEE_PRICING_TIER_ID",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/InvalidPayeePricingTierIdIssue"
          },
          "description": {
            "$ref": "#/components/schemas/InvalidPayeePricingTierIdDescription"
          }
        }
      },
      "PayeeFXRateIdExpired": {
        "title": "PAYEE_FX_RATE_ID_EXPIRED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/PayeeFXRateIdExpiredIssue"
          },
          "description": {
            "$ref": "#/components/schemas/PayeeFXRateIdExpiredDescription"
          }
        }
      },
      "PayeeFXRateIdCurrencyMismatch": {
        "title": "PAYEE_FX_RATE_ID_CURRENCY_MISMATCH",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/PayeeFXRateIdCurrencyMismatchIssue"
          },
          "description": {
            "$ref": "#/components/schemas/PayeeFXRateIdCurrencyMismatchDescription"
          }
        }
      },
      "InvalidFXRateId": {
        "title": "INVALID_FX_RATE_ID",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/InvalidFXRateIdIssue"
          },
          "description": {
            "$ref": "#/components/schemas/InvalidFXRateIdDescription"
          }
        }
      },
      "PlatformFeesNotSupported": {
        "title": "PLATFORM_FEES_NOT_SUPPORTED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/PlatformFeesNotSupportedIssue"
          },
          "description": {
            "$ref": "#/components/schemas/PlatformFeesNotSupportedDescription"
          }
        }
      },
      "InvalidPlatformFeesAccount": {
        "title": "INVALID_PLATFORM_FEES_ACCOUNT",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/InvalidPlatformFeesAccountIssue"
          },
          "description": {
            "$ref": "#/components/schemas/InvalidPlatformFeesAccountDescription"
          }
        }
      },
      "InvalidPlatformFeesAmount": {
        "title": "INVALID_PLATFORM_FEES_AMOUNT",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/InvalidPlatformFeesAmountIssue"
          },
          "description": {
            "$ref": "#/components/schemas/InvalidPlatformFeesAmountDescription"
          }
        }
      },
      "PostalCodeRequired": {
        "title": "POSTAL_CODE_REQUIRED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/PostalCodeRequiredIssue"
          },
          "description": {
            "$ref": "#/components/schemas/PostalCodeRequiredDescription"
          }
        }
      },
      "ReferenceIdRequired": {
        "title": "REFERENCE_ID_REQUIRED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/ReferenceIdRequiredIssue"
          },
          "description": {
            "$ref": "#/components/schemas/ReferenceIdRequiredDescription"
          }
        }
      },
      "TaxTotalMismatch": {
        "title": "TAX_TOTAL_MISMATCH",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/TaxTotalMismatchIssue"
          },
          "description": {
            "$ref": "#/components/schemas/TaxTotalMismatchDescription"
          }
        }
      },
      "TaxTotalRequired": {
        "title": "TAX_TOTAL_REQUIRED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/TaxTotalRequiredIssue"
          },
          "description": {
            "$ref": "#/components/schemas/TaxTotalRequiredDescription"
          }
        }
      },
      "UnsupportedIntent": {
        "title": "UNSUPPORTED_INTENT",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/UnsupportedIntentIssue"
          },
          "description": {
            "$ref": "#/components/schemas/UnsupportedIntentDescription"
          }
        }
      },
      "UnsupportedPaymentInstruction": {
        "title": "UNSUPPORTED_PAYMENT_INSTRUCTION",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/UnsupportedPaymentInstructionIssue"
          },
          "description": {
            "$ref": "#/components/schemas/UnsupportedPaymentInstructionDescription"
          }
        }
      },
      "ShippingTypeNotSupportedForClient": {
        "title": "SHIPPING_TYPE_NOT_SUPPORTED_FOR_CLIENT",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/ShippingTypeNotSupportedForClientIssue"
          },
          "description": {
            "$ref": "#/components/schemas/ShippingTypeNotSupportedForClientDescription"
          }
        }
      },
      "UnsupportedShippingType": {
        "title": "UNSUPPORTED_SHIPPING_TYPE",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/UnsupportedShippingTypeIssue"
          },
          "description": {
            "$ref": "#/components/schemas/UnsupportedShippingTypeDescription"
          }
        }
      },
      "ShippingOptionNotSelected": {
        "title": "SHIPPING_OPTION_NOT_SELECTED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/ShippingOptionNotSelectedIssue"
          },
          "description": {
            "$ref": "#/components/schemas/ShippingOptionNotSelectedDescription"
          }
        }
      },
      "MultipleShippingOptionSelected": {
        "title": "MULTIPLE_SHIPPING_OPTION_SELECTED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/MultipleShippingOptionSelectedIssue"
          },
          "description": {
            "$ref": "#/components/schemas/MultipleShippingOptionSelectedDescription"
          }
        }
      },
      "PreferredShippingOptionAmountMismatch": {
        "title": "PREFERRED_SHIPPING_OPTION_AMOUNT_MISMATCH",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/PreferredShippingOptionAmountMismatchIssue"
          },
          "description": {
            "$ref": "#/components/schemas/PreferredShippingOptionAmountMismatchDescription"
          }
        }
      },
      "AgreementAlreadyCancelled": {
        "title": "AGREEMENT_ALREADY_CANCELLED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/AgreementAlreadyCancelledIssue"
          },
          "description": {
            "$ref": "#/components/schemas/AgreementAlreadyCancelledDescription"
          }
        }
      },
      "BillingAgreementNotFound": {
        "title": "BILLING_AGREEMENT_NOT_FOUND",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/BillingAgreementNotFoundIssue"
          },
          "description": {
            "$ref": "#/components/schemas/BillingAgreementNotFoundDescription"
          }
        }
      },
      "ComplianceViolation": {
        "title": "COMPLIANCE_VIOLATION",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/ComplianceViolationIssue"
          },
          "description": {
            "$ref": "#/components/schemas/ComplianceViolationDescription"
          }
        }
      },
      "DomesticTransactionRequired": {
        "title": "DOMESTIC_TRANSACTION_REQUIRED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/DomesticTransactionRequiredIssue"
          },
          "description": {
            "$ref": "#/components/schemas/DomesticTransactionRequiredDescription"
          }
        }
      },
      "DuplicateInvoiceId": {
        "title": "DUPLICATE_INVOICE_ID",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/DuplicateInvoiceIdIssue"
          },
          "description": {
            "$ref": "#/components/schemas/DuplicateInvoiceIdDescription"
          }
        }
      },
      "InstrumentDeclined": {
        "title": "INSTRUMENT_DECLINED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/InstrumentDeclinedIssue"
          },
          "description": {
            "$ref": "#/components/schemas/InstrumentDeclinedDescription"
          }
        }
      },
      "MaxNumberOfPaymentAttemptsExceeded": {
        "title": "MAX_NUMBER_OF_PAYMENT_ATTEMPTS_EXCEEDED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/MaxNumberOfPaymentAttemptsExceededIssue"
          },
          "description": {
            "$ref": "#/components/schemas/ExceededMaxPaymentAttempts"
          }
        }
      },
      "PayeeBlockedTransaction": {
        "title": "PAYEE_BLOCKED_TRANSACTION",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/PayeeBlockedTransactionIssue"
          },
          "description": {
            "$ref": "#/components/schemas/PayeeBlockedTransactionDescription"
          }
        }
      },
      "PayerAccountLockedOrClosed": {
        "title": "PAYER_ACCOUNT_LOCKED_OR_CLOSED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/PayerAccountLockedOrClosedIssue"
          },
          "description": {
            "$ref": "#/components/schemas/PayerAccountLockedOrClosedDescription"
          }
        }
      },
      "PayerAccountRestricted": {
        "title": "PAYER_ACCOUNT_RESTRICTED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/PayerAccountRestrictedIssue"
          },
          "description": {
            "$ref": "#/components/schemas/PayerAccountRestrictedDescription"
          }
        }
      },
      "PayerCannotPay": {
        "title": "PAYER_CANNOT_PAY",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/PayerCannotPayIssue"
          },
          "description": {
            "$ref": "#/components/schemas/PayerCannotPayDescription"
          }
        }
      },
      "TransactionBlockedByPayee": {
        "title": "TRANSACTION_BLOCKED_BY_PAYEE",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/TransactionBlockedByPayeeIssue"
          },
          "description": {
            "$ref": "#/components/schemas/TransactionBlockedByPayeeDescription"
          }
        }
      },
      "TransactionLimitExceeded": {
        "title": "TRANSACTION_LIMIT_EXCEEDED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/TransactionLimitExceededIssue"
          },
          "description": {
            "$ref": "#/components/schemas/TransactionLimitExceededDescription"
          }
        }
      },
      "TransactionReceivingLimitExceeded": {
        "title": "TRANSACTION_RECEIVING_LIMIT_EXCEEDED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/TransactionReceivingLimitExceededIssue"
          },
          "description": {
            "$ref": "#/components/schemas/TransactionReceivingLimitExceededDescription"
          }
        }
      },
      "TransactionRefused": {
        "title": "TRANSACTION_REFUSED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/TransactionRefusedIssue"
          },
          "description": {
            "$ref": "#/components/schemas/TransactionRefusedDescription"
          }
        }
      },
      "AuthCaptureNotEnabled": {
        "title": "AUTH_CAPTURE_NOT_ENABLED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/AuthCaptureNotEnabledIssue"
          },
          "description": {
            "$ref": "#/components/schemas/AuthCaptureNotEnabledDescription"
          }
        }
      },
      "UnsupportedProcessingInstruction": {
        "title": "UNSUPPORTED_PROCESSING_INSTRUCTION",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/UnsupportedProcessingInstructionIssue"
          },
          "description": {
            "$ref": "#/components/schemas/UnsupportedProcessingInstructionDescription"
          }
        }
      },
      "OrderCompleteOnPaymentApproval": {
        "title": "ORDER_COMPLETE_ON_PAYMENT_APPROVAL",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/OrderCompleteOnPaymentApprovalIssue"
          },
          "description": {
            "$ref": "#/components/schemas/OrderCompleteOnPaymentApprovalDescription"
          }
        }
      },
      "InvalidExpiryDate": {
        "title": "INVALID_EXPIRY_DATE",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/InvalidExpiryDateIssue"
          },
          "description": {
            "$ref": "#/components/schemas/InvalidExpiryDateDescription"
          }
        }
      },
      "IncompatibleParameterValue": {
        "title": "INCOMPATIBLE_PARAMETER_VALUE",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/IncompatibleParameterValueIssue"
          },
          "description": {
            "$ref": "#/components/schemas/IncompatibleParameterValueDescription"
          }
        }
      },
      "InvalidPreviousTransactionReference": {
        "title": "INVALID_PREVIOUS_TRANSACTION_REFERENCE",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/InvalidPreviousTransactionReferenceIssue"
          },
          "description": {
            "$ref": "#/components/schemas/InvalidPreviousTransactionReferenceDescription"
          }
        }
      },
      "PreviousTransactionReferenceHasChargeback": {
        "title": "PREVIOUS_TRANSACTION_REFERENCE_HAS_CHARGEBACK",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/PreviousTransactionReferenceChargebackIssue"
          },
          "description": {
            "$ref": "#/components/schemas/PrevTransRefChargebackDesc"
          }
        }
      },
      "PreviousTransactionReferenceVoided": {
        "title": "PREVIOUS_TRANSACTION_REFERENCE_VOIDED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/PreviousTransactionReferenceVoidedIssue"
          },
          "description": {
            "$ref": "#/components/schemas/PreviousTransactionReferenceVoidedDescription"
          }
        }
      },
      "PaymentSourceMismatch": {
        "title": "PAYMENT_SOURCE_MISMATCH",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/PaymentSourceMismatchIssue"
          },
          "description": {
            "$ref": "#/components/schemas/PaymentSourceMismatchDescription"
          }
        }
      },
      "MerchantInitiatedWithSecurityCode": {
        "title": "MERCHANT_INITIATED_WITH_SECURITY_CODE",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/MerchantInitiatedWithSecurityCodeIssue"
          },
          "description": {
            "$ref": "#/components/schemas/MerchantInitiatedWithSecurityCodeDescription"
          }
        }
      },
      "MerchantInitiatedWithAuthenticationResults": {
        "title": "MERCHANT_INITIATED_WITH_AUTHENTICATION_RESULTS",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/MerchantInitiatedAuthenticationResults"
          },
          "description": {
            "$ref": "#/components/schemas/MerchInitAuthResultsDesc"
          }
        }
      },
      "MerchantInitiatedWithMultiplePurchaseUnits": {
        "title": "MERCHANT_INITIATED_WITH_MULTIPLE_PURCHASE_UNITS",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/MerchantInitiatedMultiplePurchaseUnits"
          },
          "description": {
            "$ref": "#/components/schemas/MerchInitMultPurchUnitsDesc"
          }
        }
      },
      "PaymentSourceInfoCannotBeVerified": {
        "title": "PAYMENT_SOURCE_INFO_CANNOT_BE_VERIFIED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/PaymentSourceInfoCannotBeVerifiedIssue"
          },
          "description": {
            "$ref": "#/components/schemas/PaymentSourceInfoCannotBeVerifiedDescription"
          }
        }
      },
      "PaymentSourceDeclinedByProcessor": {
        "title": "PAYMENT_SOURCE_DECLINED_BY_PROCESSOR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/PaymentSourceDeclinedByProcessorIssue"
          },
          "description": {
            "$ref": "#/components/schemas/PaymentSourceDeclinedByProcessorDescription"
          }
        }
      },
      "PaymentSourceCannotBeUsed": {
        "title": "PAYMENT_SOURCE_CANNOT_BE_USED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/PaymentSourceCannotBeUsedIssue"
          },
          "description": {
            "$ref": "#/components/schemas/PaymentSourceCannotBeUsedDescription"
          }
        }
      },
      "NotEnabledForApplePay": {
        "title": "NOT_ENABLED_FOR_APPLE_PAY",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/NotEnabledForApplePayIssue"
          },
          "description": {
            "$ref": "#/components/schemas/NotEnabledForApplePayDescription"
          }
        }
      },
      "NotEnabledForGooglePay": {
        "title": "NOT_ENABLED_FOR_GOOGLE_PAY",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/NotEnabledForGooglePayIssue"
          },
          "description": {
            "$ref": "#/components/schemas/NotEnabledForGooglePayDescription"
          }
        }
      },
      "ApplePayAmountMismatch": {
        "title": "APPLE_PAY_AMOUNT_MISMATCH",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/ApplePayAmountMismatchIssue"
          },
          "description": {
            "$ref": "#/components/schemas/ApplePayAmountMismatchDescription"
          }
        }
      },
      "BillingAddressInvalid": {
        "title": "BILLING_ADDRESS_INVALID",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/BillingAddressInvalidIssue"
          },
          "description": {
            "$ref": "#/components/schemas/BillingAddressInvalidDescription"
          }
        }
      },
      "ShippingAddressInvalid": {
        "title": "SHIPPING_ADDRESS_INVALID",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/ShippingAddressInvalidIssue"
          },
          "description": {
            "$ref": "#/components/schemas/ShippingAddressInvalidDescription"
          }
        }
      },
      "VaultInstructionDuplicated": {
        "title": "VAULT_INSTRUCTION_DUPLICATED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/VaultInstructionDuplicatedIssue"
          },
          "description": {
            "$ref": "#/components/schemas/VaultInstructionDuplicatedDescription"
          }
        }
      },
      "VaultInstructionRequired": {
        "title": "VAULT_INSTRUCTION_REQUIRED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/VaultInstructionRequiredIssue"
          },
          "description": {
            "$ref": "#/components/schemas/VaultInstructionRequiredDescription"
          }
        }
      },
      "MismatchedVaultIdToPaymentSource": {
        "title": "MISMATCHED_VAULT_ID_TO_PAYMENT_SOURCE",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/MismatchedVaultIdToPaymentSourceIssue"
          },
          "description": {
            "$ref": "#/components/schemas/MismatchedVaultIdToPaymentSourceDescription"
          }
        }
      },
      "CryptogramRequired": {
        "title": "CRYPTOGRAM_REQUIRED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/CryptogramRequiredIssue"
          },
          "description": {
            "$ref": "#/components/schemas/CryptogramRequiredDescription"
          }
        }
      },
      "EMVDataRequired": {
        "title": "EMV_DATA_REQUIRED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/EMVDataRequiredIssue"
          },
          "description": {
            "$ref": "#/components/schemas/EMVDataRequiredDescription"
          }
        }
      },
      "NotEligibleForPnrefProcessing": {
        "title": "NOT_ELIGIBLE_FOR_PNREF_PROCESSING",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/NotEligibleForPnrefProcessingIssue"
          },
          "description": {
            "$ref": "#/components/schemas/NotEligibleForPnrefProcessingDescription"
          }
        }
      },
      "NotEligibleForPaypalTransactionIdProcessing": {
        "title": "NOT_ELIGIBLE_FOR_PAYPAL_TRANSACTION_ID_PROCESSING",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/NotEligibleForPaypalTransactionIdProcessingIssue"
          },
          "description": {
            "$ref": "#/components/schemas/NotEligiblePaypalTransIdProcessingDesc"
          }
        }
      },
      "PaypalTransactionIdNotFound": {
        "title": "PAYPAL_TRANSACTION_ID_NOT_FOUND",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/PaypalTransactionIdNotFoundIssue"
          },
          "description": {
            "$ref": "#/components/schemas/PaypalTransactionIdNotFoundDescription"
          }
        }
      },
      "PnrefNotFound": {
        "title": "PNREF_NOT_FOUND",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/PnrefNotFoundIssue"
          },
          "description": {
            "$ref": "#/components/schemas/PnrefNotFoundDescription"
          }
        }
      },
      "InvalidSecurityCodeLength": {
        "title": "INVALID_SECURITY_CODE_LENGTH",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/InvalidSecurityCodeLengthIssue"
          },
          "description": {
            "$ref": "#/components/schemas/InvalidSecurityCodeLengthDescription"
          }
        }
      },
      "NotEnabledToVaultPaymentSource": {
        "title": "NOT_ENABLED_TO_VAULT_PAYMENT_SOURCE",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/NotEnabledToVaultPaymentSourceIssue"
          },
          "description": {
            "$ref": "#/components/schemas/NotEnabledToVaultPaymentSourceDescription"
          }
        }
      },
      "RequiredParameterForCustomerInitiatedPayment": {
        "title": "REQUIRED_PARAMETER_FOR_CUSTOMER_INITIATED_PAYMENT",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/RequiredParameterForCustomerInitiatedPaymentIssue"
          },
          "description": {
            "$ref": "#/components/schemas/ReqParamCustInitPayDesc"
          }
        }
      },
      "TokenExpired": {
        "title": "TOKEN_EXPIRED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/TokenExpiredIssue"
          },
          "description": {
            "$ref": "#/components/schemas/TokenExpiredDescription"
          }
        }
      },
      "InvalidGooglePayToken": {
        "title": "INVALID_GOOGLE_PAY_TOKEN",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/InvalidGooglePayTokenIssue"
          },
          "description": {
            "$ref": "#/components/schemas/InvalidGooglePayTokenDescription"
          }
        }
      },
      "GooglePayGatewayMerchantIdMismatch": {
        "title": "GOOGLE_PAY_GATEWAY_MERCHANT_ID_MISMATCH",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/GooglePayGatewayMerchantIdMismatchIssue"
          },
          "description": {
            "$ref": "#/components/schemas/invalid-google-pay-merchant-id"
          }
        }
      },
      "OneOfParametersRequired": {
        "title": "ONE_OF_PARAMETERS_REQUIRED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/one-of-parameters-required-issue"
          },
          "description": {
            "$ref": "#/components/schemas/one-of-parameters-required-description"
          }
        }
      },
      "AliasDeclinedByProcessor": {
        "title": "ALIAS_DECLINED_BY_PROCESSOR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/alias-declined-by-processor-issue"
          },
          "description": {
            "$ref": "#/components/schemas/alias-declined-by-processor-description"
          }
        }
      },
      "BlikOneClickMissingRequiredParameter": {
        "title": "BLIK_ONE_CLICK_MISSING_REQUIRED_PARAMETER",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/blik-one-click-missing-required-parameter-issue"
          },
          "description": {
            "$ref": "#/components/schemas/one-click-first-transaction-params"
          }
        }
      },
      "BadRequestIssuesDetails": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ErrorDetails"
        }
      },
      "UnauthorizedRequestIssuesDetails": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ErrorDetails"
        }
      },
      "ForbiddenRequestIssuesDetails": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ErrorDetails"
        }
      },
      "ResourceNotFoundIssues": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ErrorDetails"
        }
      },
      "error409-issues": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ErrorDetails"
        }
      },
      "error415-issues": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ErrorDetails"
        }
      },
      "UnprocessableRequestIssues": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ErrorDetails"
        }
      },
      "PayerEmailAddress": {
        "description": "The email address of the payer.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Email"
          }
        ]
      },
      "PayerId": {
        "description": "The PayPal-assigned ID for the payer.",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/AccountId"
          }
        ]
      },
      "PhoneNumber": {
        "description": "The phone number, in its canonical international [E.164 numbering plan format](https://www.itu.int/rec/T-REC-E.164/en). Supports only the `national_number` property.",
        "allOf": [
          {
            "$ref": "#/components/schemas/DetailedPhone"
          }
        ]
      },
      "AdditionalAddressDetails": {
        "type": "object",
        "title": "Non-portable Additional Address Details",
        "description": "The non-portable additional address details that are sometimes needed for compliance, risk, or other scenarios where fine-grain address information might be needed. Not portable with common third party and open source. Redundant with core fields.<br/>For example, `address_portable.address_line_1` is usually a combination of `address_details.street_number`, `street_name`, and `street_type`.",
        "properties": {
          "street_number": {
            "type": "string",
            "description": "The street number.",
            "maxLength": 100
          },
          "street_name": {
            "type": "string",
            "description": "The street name. Just `Drury` in `Drury Lane`.",
            "maxLength": 100
          },
          "street_type": {
            "type": "string",
            "description": "The street type. For example, avenue, boulevard, road, or expressway.",
            "maxLength": 100
          },
          "delivery_service": {
            "type": "string",
            "description": "The delivery service. Post office box, bag number, or post office name.",
            "maxLength": 100
          },
          "building_name": {
            "type": "string",
            "description": "A named locations that represents the premise. Usually a building name or number or collection of buildings with a common name or number. For example, <code>Craven House</code>.",
            "maxLength": 100
          },
          "sub_building": {
            "type": "string",
            "description": "The first-order entity below a named building or location that represents the sub-premises. Usually a single building within a collection of buildings with a common name. Can be a flat, story, floor, room, or apartment.",
            "maxLength": 100
          }
        }
      },
      "PayerDetails": {
        "properties": {
          "name": {
            "$ref": "#/components/schemas/PayerName"
          },
          "phone": {
            "$ref": "#/components/schemas/PayerPhone"
          },
          "birth_date": {
            "$ref": "#/components/schemas/PayerBirthDate"
          },
          "tax_info": {
            "$ref": "#/components/schemas/PayerTaxInfo"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          }
        }
      },
      "PayerName": {
        "description": "The name of the payer. Supports only the `given_name` and `surname` properties.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Name"
          }
        ]
      },
      "PayerPhone": {
        "description": "The phone number of the customer. Available only when you enable the **Contact Telephone Number** option in the <a href=\"https://www.paypal.com/cgi-bin/customerprofileweb?cmd=_profile-website-payments\">**Profile & Settings**</a> for the merchant's PayPal account. The `phone.phone_number` supports only `national_number`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/PhoneWithType"
          }
        ]
      },
      "PayerBirthDate": {
        "description": "The birth date of the payer in `YYYY-MM-DD` format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/DateNoTime"
          }
        ]
      },
      "PayerTaxInfo": {
        "description": "The tax information of the payer. Required only for Brazilian payer's. Both `tax_id` and `tax_id_type` are required.",
        "allOf": [
          {
            "$ref": "#/components/schemas/TaxInfo"
          }
        ]
      },
      "Subtotal": {
        "description": "The subtotal for all items. Required if the request includes `purchase_units[].items[].unit_amount`. Must equal the sum of `(items[].unit_amount * items[].quantity)` for all items. <code>item_total.value</code> can not be a negative number.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Money"
          }
        ]
      },
      "ShippingFee": {
        "description": "The shipping fee for all items within a given `purchase_unit`. <code>shipping.value</code> can not be a negative number.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Money"
          }
        ]
      },
      "HandlingFee": {
        "description": "The handling fee for all items within a given `purchase_unit`. <code>handling.value</code> can not be a negative number.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Money"
          }
        ]
      },
      "TotalTax": {
        "description": "The total tax for all items. Required if the request includes `purchase_units.items.tax`. Must equal the sum of `(items[].tax * items[].quantity)` for all items. <code>tax_total.value</code> can not be a negative number.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Money"
          }
        ]
      },
      "InsuranceFee": {
        "description": "The insurance fee for all items within a given `purchase_unit`. <code>insurance.value</code> can not be a negative number.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Money"
          }
        ]
      },
      "ShippingDiscount": {
        "description": "The shipping discount for all items within a given `purchase_unit`. <code>shipping_discount.value</code> can not be a negative number.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Money"
          }
        ]
      },
      "OverallDiscount": {
        "description": "The discount for all items within a given `purchase_unit`. <code>discount.value</code> can not be a negative number.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Money"
          }
        ]
      },
      "AmountBreakdownDetail": {
        "properties": {
          "breakdown": {
            "$ref": "#/components/schemas/AmountBreakdown"
          }
        }
      },
      "MerchantEmailAddress": {
        "description": "The email address of merchant.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Email"
          }
        ]
      },
      "MerchantId": {
        "description": "The encrypted PayPal account ID of the merchant.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AccountId"
          }
        ]
      },
      "PlatformFeeAmount": {
        "description": "The fee for this transaction.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Money"
          }
        ]
      },
      "PlatformFeePayee": {
        "description": "The recipient of the fee for this transaction. If you omit this value, the default is the API caller.",
        "allOf": [
          {
            "$ref": "#/components/schemas/MerchantBase"
          }
        ]
      },
      "PlatformFees": {
        "type": "array",
        "description": "An array of various fees, commissions, tips, or donations. This field is only applicable to merchants that been enabled for PayPal Commerce Platform for Marketplaces and Platforms capability.",
        "minItems": 0,
        "maxItems": 1,
        "items": {
          "$ref": "#/components/schemas/PlatformFee"
        }
      },
      "PaymentDisbursementMode": {
        "description": "The funds that are held payee by the marketplace/platform. This field is only applicable to merchants that been enabled for PayPal Commerce Platform for Marketplaces and Platforms capability.",
        "allOf": [
          {
            "$ref": "#/components/schemas/DisbursementMode"
          }
        ]
      },
      "ItemUnitAmount": {
        "description": "The item price or rate per unit. If you specify <code>unit_amount</code>, <code>purchase_units[].amount.breakdown.item_total</code> is required. Must equal <code>unit_amount * quantity</code> for all items. <code>unit_amount.value</code> can not be a negative number.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Money"
          }
        ]
      },
      "ItemTax": {
        "description": "The item tax for each unit. If <code>tax</code> is specified, <code>purchase_units[].amount.breakdown.tax_total</code> is required. Must equal <code>tax * quantity</code> for all items. <code>tax.value</code> can not be a negative number.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Money"
          }
        ]
      },
      "ShippingOptionType": {
        "description": "The method by which the payer wants to get their items.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ShippingOptionTypeDetail"
          }
        ]
      },
      "ShippingCost": {
        "description": "The shipping cost for the selected option.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Money"
          }
        ]
      },
      "ShippingPersonName": {
        "description": "The name of the person to whom to ship the items. Supports only the `full_name` property.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Name"
          }
        ]
      },
      "ShippingOptions": {
        "type": "array",
        "description": "An array of shipping options that the payee or merchant offers to the payer to ship or pick up their items.",
        "minItems": 0,
        "maxItems": 10,
        "items": {
          "$ref": "#/components/schemas/ShippingOption"
        }
      },
      "ShippingOption": {
        "description": "The option that the payee or merchant offers to the payer to ship or pick up their items.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ShippingOptionDetails"
          }
        ]
      },
      "TotalTaxAmount": {
        "description": "Use this field to break down the amount of tax included in the total purchase amount. The value provided here will not add to the total purchase amount. The value can't be negative, and in most cases, it must be greater than zero in order to qualify for lower interchange rates. \n Value, by country, is:\n\n    UK. A county.\n    US. A state.\n    Canada. A province.\n    Japan. A prefecture.\n    Switzerland. A kanton.\n",
        "allOf": [
          {
            "$ref": "#/components/schemas/Money"
          }
        ]
      },
      "LineItemDetail": {
        "properties": {
          "commodity_code": {
            "type": "string",
            "description": "Code used to classify items purchased and track the total amount spent across various categories of products and services. Different corporate purchasing organizations may use different standards, but the United Nations Standard Products and Services Code (UNSPSC) is frequently used.",
            "minLength": 1,
            "maxLength": 12,
            "pattern": "^[a-zA-Z0-9_'.-]*$"
          },
          "discount_amount": {
            "$ref": "#/components/schemas/DiscountAmount"
          },
          "total_amount": {
            "$ref": "#/components/schemas/SubtotalAmount"
          },
          "unit_of_measure": {
            "type": "string",
            "description": "Unit of measure is a standard used to express the magnitude of a quantity in international trade. Most commonly used (but not limited to) examples are: Acre (ACR), Ampere (AMP), Centigram (CGM), Centimetre (CMT), Cubic inch (INQ), Cubic metre (MTQ), Fluid ounce (OZA), Foot (FOT), Hour (HUR), Item (ITM), Kilogram (KGM), Kilometre (KMT), Kilowatt (KWT), Liquid gallon (GLL), Liter (LTR), Pounds (LBS), Square foot (FTK).",
            "minLength": 1,
            "maxLength": 12,
            "pattern": "^[a-zA-Z0-9_'.-]*$"
          }
        }
      },
      "SubtotalAmount": {
        "description": "The subtotal for all items. Must equal the sum of (items[].unit_amount * items[].quantity) for all items. item_total.value can not be a negative number.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Money"
          }
        ]
      },
      "ShippingAmount": {
        "description": "Use this field to break down the shipping cost included in the total purchase amount. The value provided here will not add to the total purchase amount. The value cannot be negative.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Money"
          }
        ]
      },
      "DutyAmount": {
        "description": "Use this field to break down the duty amount included in the total purchase amount. The value provided here will not add to the total purchase amount. The value cannot be negative.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Money"
          }
        ]
      },
      "DiscountAmount": {
        "description": "Use this field to break down the discount amount included in the total purchase amount. The value provided here will not add to the total purchase amount. The value cannot be negative.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Money"
          }
        ]
      },
      "LineItems": {
        "type": "array",
        "description": "A list of the items that were purchased with this payment. If your merchant account has been configured for Level 3 processing this field will be passed to the processor on your behalf.",
        "minItems": 1,
        "maxItems": 100,
        "items": {
          "$ref": "#/components/schemas/LineItem"
        }
      },
      "CardSupplementaryData": {
        "description": "Merchants and partners can add Level 2 and 3 data to payments to reduce risk and payment processing costs. For more information about processing payments, see <a href=\"https://developer.paypal.com/docs/checkout/advanced/processing/\">checkout</a> or <a href=\"https://developer.paypal.com/docs/multiparty/checkout/advanced/processing/\">multiparty checkout</a>.",
        "allOf": [
          {
            "$ref": "#/components/schemas/CardSupplementaryDataDetails"
          }
        ]
      },
      "TotalOrderAmount": {
        "description": "The total order amount with an optional breakdown that provides details, such as the total item amount, total tax amount, shipping, handling, insurance, and discounts, if any.<br/>If you specify `amount.breakdown`, the amount equals `item_total` plus `tax_total` plus `shipping` plus `handling` plus `insurance` minus `shipping_discount` minus discount.<br/>The amount must be a positive number. The `amount.value` field supports up to 15 digits preceding the decimal. For a list of supported currencies, decimal precision, and maximum charge amount, see the PayPal REST APIs <a href=\"https://developer.paypal.com/api/rest/reference/currency-codes/\">Currency Codes</a>.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AmountWithBreakdown"
          }
        ]
      },
      "Payee": {
        "description": "The merchant who receives payment for this transaction.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Merchant"
          }
        ]
      },
      "PurchaseUnitItems": {
        "type": "array",
        "description": "An array of items that the customer purchases from the merchant.",
        "items": {
          "$ref": "#/components/schemas/PurchaseUnitItem"
        }
      },
      "PurchaseUnitItem": {
        "description": "The item.",
        "allOf": [
          {
            "$ref": "#/components/schemas/PurchaseItem"
          }
        ]
      },
      "Shipping": {
        "description": "The name and address of the person to whom to ship the items.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ShippingDetails"
          }
        ]
      },
      "CustomerEmailAddress": {
        "description": "Email address of the buyer as provided to the merchant or on file with the merchant. Email Address is required if you are processing the transaction using PayPal Guest Processing which is offered to select partners and merchants. For all other use cases we do not expect partners/merchant to send email_address of their customer.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Email"
          }
        ]
      },
      "CustomerPhoneNumber": {
        "description": "The phone number of the buyer as provided to the merchant or on file with the merchant. The `phone.phone_number` supports only `national_number`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/PhoneWithType"
          }
        ]
      },
      "CardVaultingAttributes": {
        "description": "Instruction to vault the card based on the specified strategy.",
        "allOf": [
          {
            "$ref": "#/components/schemas/CardVaultingInstruction"
          }
        ]
      },
      "CardId": {
        "description": "The PayPal-generated ID for the card.",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/InstrumentId"
          }
        ]
      },
      "CardExpiry": {
        "description": "The card expiration year and month, in [Internet date format](https://tools.ietf.org/html/rfc3339#section-5.6).",
        "allOf": [
          {
            "$ref": "#/components/schemas/InternetDateTimeFormat"
          }
        ]
      },
      "CardBrandType": {
        "description": "The card brand or network. Typically used in the response.",
        "readOnly": true,
        "deprecated": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/CardBrand"
          }
        ]
      },
      "CardTypeDetails": {
        "description": "The payment card type.",
        "allOf": [
          {
            "$ref": "#/components/schemas/CardType"
          }
        ]
      },
      "CardAttributesDetails": {
        "description": "Additional attributes associated with the use of this card.",
        "allOf": [
          {
            "$ref": "#/components/schemas/CardAttributes"
          }
        ]
      },
      "TransactionNetwork": {
        "description": "Name of the card network through which the transaction was routed.",
        "allOf": [
          {
            "$ref": "#/components/schemas/CardBrand"
          }
        ]
      },
      "NetworkTokenExpiry": {
        "description": "The card expiration year and month, in [Internet date format](https://tools.ietf.org/html/rfc3339#section-5.6).",
        "allOf": [
          {
            "$ref": "#/components/schemas/InternetDateTimeFormat"
          }
        ]
      },
      "ThreeDSReturnURL": {
        "description": "The URL where the customer will be redirected upon successfully completing the 3DS challenge.",
        "format": "uri",
        "allOf": [
          {
            "$ref": "#/components/schemas/URL"
          }
        ]
      },
      "ThreeDSCancelURL": {
        "description": "The URL where the customer will be redirected upon cancelling the 3DS challenge.",
        "format": "uri",
        "allOf": [
          {
            "$ref": "#/components/schemas/URL"
          }
        ]
      },
      "CardDetails": {
        "properties": {
          "vault_id": {
            "$ref": "#/components/schemas/CardVaultingId"
          },
          "stored_credential": {
            "$ref": "#/components/schemas/StoredPaymentSource"
          },
          "network_token": {
            "$ref": "#/components/schemas/NetworkTokenDetails"
          },
          "experience_context": {
            "$ref": "#/components/schemas/CardExperienceContext"
          }
        }
      },
      "CardVaultingId": {
        "description": "The PayPal-generated ID for the saved card payment source. Typically stored on the merchant's server.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VaultId"
          }
        ]
      },
      "NetworkTokenDetails": {
        "description": "A 3rd party network token refers to a network token that the merchant provisions from and vaults with an external TSP (Token Service Provider) other than PayPal.",
        "allOf": [
          {
            "$ref": "#/components/schemas/NetworkToken"
          }
        ]
      },
      "PaypalWalletBaseDetails": {
        "properties": {
          "description": {
            "type": "string",
            "description": "The description displayed to PayPal consumer on the approval flow for PayPal, as well as on the PayPal payment token management experience on PayPal.com.",
            "minLength": 1,
            "maxLength": 128
          },
          "usage_pattern": {
            "$ref": "#/components/schemas/BillingAgreementPattern"
          },
          "shipping": {
            "$ref": "#/components/schemas/ShippingInfo"
          },
          "usage_type": {
            "$ref": "#/components/schemas/UsageType"
          },
          "customer_type": {
            "$ref": "#/components/schemas/CustomerType"
          },
          "permit_multiple_payment_tokens": {
            "type": "boolean",
            "description": "Create multiple payment tokens for the same payer, merchant/platform combination. Use this when the customer has not logged in at merchant/platform. The payment token thus generated, can then also be used to create the customer account at merchant/platform. Use this also when multiple payment tokens are required for the same payer, different customer at merchant/platform. This helps to identify customers distinctly even though they may share the same PayPal account. This only applies to PayPal payment source.",
            "default": false
          }
        }
      },
      "ShippingInfo": {
        "description": "The shipping address for the Payer.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ShippingDetails"
          }
        ]
      },
      "PayPalWalletVaultAttributes": {
        "description": "Attributes used to provide the instructions during vaulting of the PayPal Wallet.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VaultedPayPalWalletAttributes"
          }
        ]
      },
      "ExperienceLocale": {
        "description": "The BCP 47-formatted locale of pages that the PayPal payment experience shows. PayPal supports a five-character code. For example, `da-DK`, `he-IL`, `id-ID`, `ja-JP`, `no-NO`, `pt-BR`, `ru-RU`, `sv-SE`, `th-TH`, `zh-CN`, `zh-HK`, or `zh-TW`.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Language"
          }
        ]
      },
      "ReturnURL": {
        "description": "The URL where the customer will be redirected upon approving a payment.",
        "format": "uri",
        "example": "https://example.com/returnUrl",
        "allOf": [
          {
            "$ref": "#/components/schemas/URL"
          }
        ]
      },
      "CancelURL": {
        "description": "The URL where the customer will be redirected upon cancelling the payment approval.",
        "format": "uri",
        "example": "https://example.com/cancelUrl",
        "allOf": [
          {
            "$ref": "#/components/schemas/URL"
          }
        ]
      },
      "PayPalGeneratedVaultId": {
        "description": "The PayPal-generated ID for the payment_source stored within the Vault.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VaultId"
          }
        ]
      },
      "AdditionalPayPalWalletAttributes": {
        "description": "Additional attributes associated with the use of this wallet.",
        "allOf": [
          {
            "$ref": "#/components/schemas/PayPalWalletAttributes"
          }
        ]
      },
      "AccountHolderFullName": {
        "description": "The name of the account holder associated with this payment method.",
        "allOf": [
          {
            "$ref": "#/components/schemas/FullName"
          }
        ]
      },
      "PaymentExperienceContext": {
        "description": "Customizes the payer experience during the approval process for the payment.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ExperienceContext"
          }
        ]
      },
      "PaymentAttributes": {
        "description": "Attributes for altpay recurring.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AltpayRecurringAttributes"
          }
        ]
      },
      "BlikExperienceContextBase": {
        "properties": {
          "consumer_ip": {
            "$ref": "#/components/schemas/BlikConsumerIp"
          },
          "consumer_user_agent": {
            "type": "string",
            "description": "The payer's User Agent. For example, Mozilla/5.0 (Macintosh; Intel Mac OS X x.y; rv:42.0).",
            "minLength": 1,
            "maxLength": 256,
            "pattern": "^.*$"
          }
        }
      },
      "BlikConsumerIp": {
        "description": "The IP address of the consumer. It could be either IPv4 or IPv6.",
        "allOf": [
          {
            "$ref": "#/components/schemas/IPAddress"
          }
        ]
      },
      "BlikExperienceContextDetails": {
        "description": "Customizes the payer experience during the approval process for the payment.",
        "allOf": [
          {
            "$ref": "#/components/schemas/BlikExperienceContext"
          }
        ]
      },
      "Level0IntegrationFlow": {
        "description": "The level_0 integration flow object.",
        "allOf": [
          {
            "$ref": "#/components/schemas/BlikLevel0PaymentInformation"
          }
        ]
      },
      "BlikOneClickIntegrationFlow": {
        "description": "The one-click integration flow object.",
        "allOf": [
          {
            "$ref": "#/components/schemas/BlikOneClickPaymentInformation"
          }
        ]
      },
      "ApplePayTransactionAmount": {
        "description": "The transaction amount for the payment that the payer has approved on apple platform.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Money"
          }
        ]
      },
      "ApplePayTokenizedCard": {
        "description": "Apple Pay tokenized credit card used to pay.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Card"
          }
        ]
      },
      "ApplePayPaymentDetails": {
        "description": "Apple Pay payment data object which contains the cryptogram, eci_indicator and other data.",
        "allOf": [
          {
            "$ref": "#/components/schemas/DecryptedApplePayPaymentDetails"
          }
        ]
      },
      "DecryptedPayloadDetails": {
        "description": "The decrypted payload details for the apple pay token.",
        "allOf": [
          {
            "$ref": "#/components/schemas/DecryptedApplePayTokenDetails"
          }
        ]
      },
      "ApplePayVaultId": {
        "description": "The PayPal-generated ID for the saved apple pay payment_source. This ID should be stored on the merchant's server so the saved payment source can be used for future transactions.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VaultId"
          }
        ]
      },
      "VenmoWalletDetails": {
        "properties": {
          "description": {
            "type": "string",
            "description": "The description displayed to Venmo consumer on the approval flow for Venmo, as well as on the Venmo payment token management experience on Venmo.com.",
            "minLength": 1,
            "maxLength": 128,
            "pattern": "^[a-zA-Z0-9_'\\-., :;\\!?\"]*$"
          },
          "usage_pattern": {
            "$ref": "#/components/schemas/BillingAgreementPattern"
          },
          "usage_type": {
            "$ref": "#/components/schemas/VenmoUsageType"
          },
          "customer_type": {
            "$ref": "#/components/schemas/VenmoCustomerType"
          },
          "permit_multiple_payment_tokens": {
            "type": "boolean",
            "description": "Create multiple payment tokens for the same payer, merchant/platform combination. Use this when the customer has not logged in at merchant/platform. The payment token thus generated, can then also be used to create the customer account at merchant/platform. Use this also when multiple payment tokens are required for the same payer, different customer at merchant/platform. This helps to identify customers distinctly even though they may share the same Venmo account.",
            "default": false
          }
        }
      },
      "VenmoVaultAttributes": {
        "description": "Attributes used to provide the instructions during vaulting of the Venmo Wallet.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VenmoWalletVaultingAttributes"
          }
        ]
      },
      "VenmoVaultId": {
        "description": "The PayPal-generated ID for the saved Venmo wallet payment_source. This ID should be stored on the merchant's server so the saved payment source can be used for future transactions.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VaultId"
          }
        ]
      },
      "VenmoWalletAdditionalAttributes": {
        "description": "Additional attributes associated with the use of this wallet.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VenmoAttributes"
          }
        ]
      },
      "PayPalPaymentSource": {
        "description": "Indicates that PayPal Wallet is the payment source. Main use of this selection is to provide additional instructions associated with this choice like vaulting.",
        "allOf": [
          {
            "$ref": "#/components/schemas/PayPalWallet"
          }
        ]
      },
      "BancontactPaymentSource": {
        "description": "Bancontact is the most popular online payment in Belgium. [More Details](https://www.bancontact.com/).",
        "allOf": [
          {
            "$ref": "#/components/schemas/BancontactPaymentInformation"
          }
        ]
      },
      "BlikPaymentSource": {
        "description": "BLIK is a mobile payment system, created by Polish Payment Standard in order to allow millions of users to pay in shops, payout cash in ATMs and make online purchases and payments. [More Details](https://blikmobile.pl/).",
        "allOf": [
          {
            "$ref": "#/components/schemas/BlikPaymentInformation"
          }
        ]
      },
      "EPSPaymentSource": {
        "description": "The eps transfer is an online payment method developed by many Austrian banks. [More Details](https://www.eps-ueberweisung.at/).",
        "allOf": [
          {
            "$ref": "#/components/schemas/EPSPaymentInformation"
          }
        ]
      },
      "GiropayPaymentSource": {
        "description": "Giropay is an Internet payment System in Germany, based on online banking. [More Details](https://giropay.de/).",
        "allOf": [
          {
            "$ref": "#/components/schemas/GirpayPaymentInformation"
          }
        ]
      },
      "IdealPaymentSource": {
        "description": "The Dutch payment method iDEAL is an online payment method that enables consumers to pay online through their own bank. [More Details](https://www.ideal.nl/).",
        "allOf": [
          {
            "$ref": "#/components/schemas/IdealPaymentInformation"
          }
        ]
      },
      "MyBankPaymentSource": {
        "description": "MyBank is an e-authorisation solution which enables safe digital payments and identity authentication through a consumer’s own online banking portal or mobile application. [More Details](https://www.mybank.eu/).",
        "allOf": [
          {
            "$ref": "#/components/schemas/MyBankPaymentInformation"
          }
        ]
      },
      "P24PaymentAource": {
        "description": "P24 (Przelewy24) is a secure and fast online bank transfer service linked to all the major banks in Poland. [More Details](https://www.przelewy24.pl/).",
        "allOf": [
          {
            "$ref": "#/components/schemas/P24PaymentInformation"
          }
        ]
      },
      "SofortPaymentSource": {
        "description": "SOFORT Banking is a real-time bank transfer payment method that buyers use to transfer funds directly to merchants from their bank accounts. [More Details](https://www.klarna.com/sofort/).",
        "allOf": [
          {
            "$ref": "#/components/schemas/SofortPaymentInformation"
          }
        ]
      },
      "TrustlyPaymentSource": {
        "description": "Trustly is a payment method that allows customers to shop and pay from their bank account. [More Details](https://www.trustly.net/).",
        "allOf": [
          {
            "$ref": "#/components/schemas/TrustlyPaymentInformation"
          }
        ]
      },
      "ApplePayPaymentSource": {
        "description": "ApplePay payment source, allows buyer to pay using ApplePay, both on Web as well as on Native.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ApplePayPaymentInformation"
          }
        ]
      },
      "GooglePayPaymentSource": {
        "description": "Google Pay payment source, allows buyer to pay using Google Pay.",
        "allOf": [
          {
            "$ref": "#/components/schemas/GooglePayPaymentInformation"
          }
        ]
      },
      "VenmoPaymentSource": {
        "description": "Information needed to indicate that Venmo is being used to fund the payment.",
        "allOf": [
          {
            "$ref": "#/components/schemas/VenmoPaymentInformation"
          }
        ]
      },
      "ApplicationContextPaymentMethod": {
        "description": "DEPRECATED. The customer and merchant payment preferences. The fields in `application_context` are now available in the `experience_context` object under the `payment_source` which supports them (eg. `payment_source.paypal.experience_context.payment_method_selected`). Please specify this field in the `experience_context` object instead of the `application_context` object..",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentMethod"
          }
        ]
      },
      "ApplicationContextStoredPaymentSource": {
        "description": "DEPRECATED. Provides additional details to process a payment using a `payment_source` that has been stored or is intended to be stored (also referred to as stored_credential or card-on-file).<br/>Parameter compatibility:<br/>`payment_type=ONE_TIME` is compatible only with `payment_initiator=CUSTOMER`. `usage=FIRST` is compatible only with `payment_initiator=CUSTOMER`. `previous_transaction_reference` or `previous_network_transaction_reference` is compatible only with `payment_initiator=MERCHANT`. Only one of the parameters - `previous_transaction_reference` and `previous_network_transaction_reference` - can be present in the request.  The fields in `stored_payment_source` are now available in the `stored_credential` object under the `payment_source` which supports them (eg. `payment_source.card.stored_credential.payment_initiator`). Please specify this field in the `payment_source` object instead of the `application_context` object.",
        "deprecated": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/StoredPaymentSource"
          }
        ]
      },
      "OrderPurchaseUnits": {
        "type": "array",
        "description": "An array of purchase units. Each purchase unit establishes a contract between a payer and the payee. Each purchase unit represents either a full or partial order that the payer intends to purchase from the payee.",
        "minItems": 1,
        "maxItems": 10,
        "items": {
          "$ref": "#/components/schemas/OrderPurchaseUnit"
        }
      },
      "OrderPurchaseUnit": {
        "description": "The purchase unit. Establishes a contract between a payer and the payee.",
        "allOf": [
          {
            "$ref": "#/components/schemas/OrderPurchaseUnitDetails"
          }
        ]
      },
      "ApplicationContextDetails": {
        "description": "Customize the payer experience during the approval process for the payment with PayPal.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ApplicationContext"
          }
        ]
      },
      "TransactionCreationTimestamp": {
        "description": "The date and time when the transaction occurred, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/DateTimeFormat"
          }
        ]
      },
      "TransactionModificationTime": {
        "description": "The date and time when the transaction was last updated, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/DateTimeFormat"
          }
        ]
      },
      "AuthenticationStatus": {
        "description": "The outcome of the issuer's authentication.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ParesStatus"
          }
        ]
      },
      "EnrollmentStatus": {
        "description": "Status of authentication eligibility.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Enrolled"
          }
        ]
      },
      "3DSecureExemptionDetails": {
        "description": "Exemption details of 3D Secure Authentication.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ExemptionDetails"
          }
        ]
      },
      "RequestLinks": {
        "type": "array",
        "description": "An array of request-related HATEOAS links.",
        "readOnly": true,
        "minItems": 1,
        "maxItems": 10,
        "items": {
          "$ref": "#/components/schemas/RequestLinksItem"
        }
      },
      "RequestLinksItem": {
        "description": "A request-related [HATEOAS link](/docs/api/reference/api-responses/#hateoas-links).",
        "allOf": [
          {
            "$ref": "#/components/schemas/LinkDescription"
          }
        ]
      },
      "CardExpiryDate": {
        "description": "The card expiration year and month, in [Internet date format](https://tools.ietf.org/html/rfc3339#section-5.6).",
        "allOf": [
          {
            "$ref": "#/components/schemas/InternetDateTimeFormat"
          }
        ]
      },
      "TwoCharacterCountryCode": {
        "description": "The [two-character ISO-3166-1 country code](/docs/integration/direct/rest/country-codes/) of the bank.",
        "example": "US",
        "allOf": [
          {
            "$ref": "#/components/schemas/CountryCode"
          }
        ]
      },
      "BINProducts": {
        "type": "array",
        "description": "The type of card product assigned to the BIN by the issuer. These values are defined by the issuer and may change over time. Some examples include: PREPAID_GIFT, CONSUMER, CORPORATE.",
        "items": {
          "type": "string",
          "description": "This value provides the category of the BIN.",
          "minLength": 1,
          "maxLength": 255
        },
        "minItems": 1,
        "maxItems": 256
      },
      "CardBrandNetwork": {
        "description": "The card brand or network. Typically used in the response.",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/CardBrand"
          }
        ]
      },
      "AvailableCardBrandsNetworks": {
        "type": "array",
        "description": "Array of brands or networks associated with the card.",
        "readOnly": true,
        "minItems": 1,
        "maxItems": 256,
        "items": {
          "$ref": "#/components/schemas/CardBrand"
        }
      },
      "CardBINDetails": {
        "description": "Bank Identification Number (BIN) details used to fund a payment.",
        "allOf": [
          {
            "$ref": "#/components/schemas/BINdetails"
          }
        ]
      },
      "CobrandedCardLabels": {
        "type": "array",
        "description": "Array of labels for the cobranded card.",
        "minItems": 1,
        "maxItems": 25,
        "items": {
          "type": "string",
          "description": "Label for the cobranded card.",
          "minLength": 1,
          "maxLength": 256
        }
      },
      "AssociatedMerchant": {
        "description": "Merchant associated with the purchase.",
        "allOf": [
          {
            "$ref": "#/components/schemas/MerchantBase"
          }
        ]
      },
      "AmountCharged": {
        "description": "Amount that was charged to the cobranded card.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Money"
          }
        ]
      },
      "CobrandedCards": {
        "type": "array",
        "description": "An array of merchant cobranded cards used by buyer to complete an order. This array will be present if a merchant has onboarded their cobranded card with PayPal and provided corresponding label(s).",
        "minItems": 0,
        "maxItems": 25,
        "items": {
          "$ref": "#/components/schemas/CobrandedCard"
        }
      },
      "AccountHolderEmailAddress": {
        "description": "The email address of the PayPal account holder.",
        "example": "customer@example.com",
        "allOf": [
          {
            "$ref": "#/components/schemas/Email"
          }
        ]
      },
      "AccountHolderAccountId": {
        "description": "The PayPal-assigned ID for the PayPal account holder.",
        "example": "QYR5Z8XDVJNXQ",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/account_id-2"
          }
        ]
      },
      "AccountHolderName": {
        "description": "The name of the PayPal account holder. Supports only the `given_name` and `surname` properties.",
        "example": {
          "given_name": "John",
          "surname": "Doe"
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Name"
          }
        ]
      },
      "AccountHolderPhoneNumber": {
        "description": "The phone number, in its canonical international [E.164 numbering plan format](https://www.itu.int/rec/T-REC-E.164/en). Available only when you enable the **Contact Telephone Number** option in the <a href=\"https://www.paypal.com/cgi-bin/customerprofileweb?cmd=_profile-website-payments\">**Profile & Settings**</a> for the merchant's PayPal account. Supports only the `national_number` property.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Phone"
          }
        ]
      },
      "AccountHolderBirthDate": {
        "description": "The birth date of the PayPal account holder in `YYYY-MM-DD` format.",
        "allOf": [
          {
            "$ref": "#/components/schemas/DateNoTime"
          }
        ]
      },
      "AccountHolderTaxInfo": {
        "description": "The tax information of the PayPal account holder. Required only for Brazilian PayPal account holder's. Both `tax_id` and `tax_id_type` are required.",
        "allOf": [
          {
            "$ref": "#/components/schemas/TaxInfo"
          }
        ]
      },
      "Address": {
        "description": "The address of the payer. Supports only the `address_line_1`, `address_line_2`, `admin_area_1`, `admin_area_2`, `postal_code`, and `country_code` properties. Also referred to as the billing address of the customer.",
        "allOf": [
          {
            "$ref": "#/components/schemas/PortableInternationalPostalAddress"
          }
        ]
      },
      "BankIdentificationCode": {
        "description": "The bank identification code (BIC).",
        "allOf": [
          {
            "$ref": "#/components/schemas/BIC"
          }
        ]
      },
      "SepatAttributes": {
        "description": "Attributes for SEPA direct debit object.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AltpayRecurringAttributes"
          }
        ]
      },
      "AccountHolderEmail": {
        "description": "The email address of the account holder associated with this payment method.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EmailAddress"
          }
        ]
      },
      "OneClickIntegration": {
        "description": "The one-click integration flow object.",
        "allOf": [
          {
            "$ref": "#/components/schemas/OneClickPayment"
          }
        ]
      },
      "VenmoWalletAccountId": {
        "description": "This is an immutable system-generated id for a user's Venmo account.",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/account_id-2"
          }
        ]
      },
      "VenmoWalletAssociatedName": {
        "description": "The name associated with the Venmo account. Supports only the `given_name` and `surname` properties.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Name"
          }
        ]
      },
      "venmoWalletAssociatedPhoneNumber": {
        "description": "The phone number associated with the Venmo account, in its canonical international [E.164 numbering plan format](https://www.itu.int/rec/T-REC-E.164/en). Supports only the `national_number` property.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Phone"
          }
        ]
      },
      "tracker-item-upc": {
        "description": "The Universal Product Code of the item.",
        "allOf": [
          {
            "$ref": "#/components/schemas/universal_product_code"
          }
        ]
      },
      "TrackerDetails": {
        "properties": {
          "id": {
            "type": "string",
            "description": "The tracker id.",
            "readOnly": true
          },
          "status": {
            "$ref": "#/components/schemas/TrackerStatus"
          },
          "items": {
            "$ref": "#/components/schemas/ItemsInShipment"
          },
          "links": {
            "$ref": "#/components/schemas/RequestLinks"
          }
        }
      },
      "ItemsInShipment": {
        "type": "array",
        "description": "An array of details of items in the shipment.",
        "items": {
          "$ref": "#/components/schemas/ItemInShipment"
        }
      },
      "ItemInShipment": {
        "description": "Items in a shipment.",
        "allOf": [
          {
            "$ref": "#/components/schemas/TrackerItem"
          }
        ]
      },
      "TrackingDetails": {
        "properties": {
          "trackers": {
            "$ref": "#/components/schemas/Trackers"
          }
        }
      },
      "Trackers": {
        "type": "array",
        "description": "An array of trackers for a transaction.",
        "items": {
          "$ref": "#/components/schemas/Tracker"
        }
      },
      "AuthorizedPaymentStatusDetails": {
        "description": "The details of the authorized order pending status.",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/AuthorizationStatusDetails"
          }
        ]
      },
      "DisputeCategories": {
        "type": "array",
        "description": "An array of conditions that are covered for the transaction.",
        "items": {
          "$ref": "#/components/schemas/DisputeCategory"
        },
        "example": [
          "ITEM_NOT_RECEIVED",
          "UNAUTHORIZED_TRANSACTION"
        ],
        "readOnly": true
      },
      "AuthorizationBase": {
        "properties": {
          "id": {
            "description": "The PayPal-generated ID for the authorized payment.",
            "type": "string",
            "readOnly": true
          },
          "amount": {
            "$ref": "#/components/schemas/AuthorizedPaymentAmount"
          },
          "invoice_id": {
            "description": "The API caller-provided external invoice number for this order. Appears in both the payer's transaction history and the emails that the payer receives.",
            "type": "string",
            "readOnly": true
          },
          "custom_id": {
            "type": "string",
            "description": "The API caller-provided external ID. Used to reconcile API caller-initiated transactions with PayPal transactions. Appears in transaction and settlement reports.",
            "maxLength": 127
          },
          "network_transaction_reference": {
            "$ref": "#/components/schemas/NetworkTransactionReference"
          },
          "seller_protection": {
            "$ref": "#/components/schemas/AuthorizedSellerProtection"
          },
          "expiration_time": {
            "$ref": "#/components/schemas/AuthorizationExpirationTime"
          },
          "links": {
            "$ref": "#/components/schemas/AuthorizationLinks"
          }
        }
      },
      "AuthorizedPaymentAmount": {
        "description": "The amount for this authorized payment.",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/Money"
          }
        ]
      },
      "AuthorizedSellerProtection": {
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/SellerProtection"
          }
        ]
      },
      "AuthorizationExpirationTime": {
        "description": "The date and time when the authorized payment expires, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/DateTimeFormat"
          }
        ]
      },
      "AuthorizationLinks": {
        "description": "An array of related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links).",
        "type": "array",
        "readOnly": true,
        "items": {
          "$ref": "#/components/schemas/LinkDescription"
        }
      },
      "AuthorizationWithAdditionalDataResponse": {
        "properties": {
          "processor_response": {
            "$ref": "#/components/schemas/CardTransactionProcessorResponse"
          }
        }
      },
      "CardTransactionProcessorResponse": {
        "description": "The processor response for card transactions.",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ProcessorResponseInformation"
          }
        ]
      },
      "CapturPaymentStatusDetails": {
        "description": "The details of the captured payment status.",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/CaptureStatusDetails"
          }
        ]
      },
      "SourceCurrency": {
        "description": "The source currency from which to convert an amount.",
        "allOf": [
          {
            "$ref": "#/components/schemas/CurrencyCode"
          }
        ]
      },
      "TargetCurrency": {
        "description": "The target currency to which to convert an amount.",
        "allOf": [
          {
            "$ref": "#/components/schemas/CurrencyCode"
          }
        ]
      },
      "GrossAmount": {
        "description": "The amount for this captured payment in the currency of the transaction.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Money"
          }
        ]
      },
      "PaypalFee": {
        "description": "The applicable fee for this captured payment in the currency of the transaction.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Money"
          }
        ]
      },
      "PayPalFeeReceivableCurrency": {
        "description": "The applicable fee for this captured payment in the receivable currency. Returned only in cases the fee is charged in the receivable currency. Example 'CNY'.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Money"
          }
        ]
      },
      "NetAmount": {
        "description": "The net amount that the payee receives for this captured payment in their PayPal account. The net amount is computed as <code>gross_amount</code> minus the <code>paypal_fee</code> minus the <code>platform_fees</code>.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Money"
          }
        ]
      },
      "ReceivableAmount": {
        "description": "The net amount that is credited to the payee's PayPal account. Returned only when the currency of the captured payment is different from the currency of the PayPal account where the payee wants to credit the funds. The amount is computed as <code>net_amount</code> times <code>exchange_rate</code>.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Money"
          }
        ]
      },
      "ExchangeRateDetails": {
        "description": "The exchange rate that determines the amount that is credited to the payee's PayPal account. Returned when the currency of the captured payment is different from the currency of the PayPal account where the payee wants to credit the funds.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ExchangeRate"
          }
        ]
      },
      "CaptureBaseInformation": {
        "properties": {
          "id": {
            "description": "The PayPal-generated ID for the captured payment.",
            "type": "string",
            "readOnly": true,
            "example": "3C679366HH908993F"
          },
          "amount": {
            "$ref": "#/components/schemas/CaptureAmount"
          },
          "invoice_id": {
            "description": "The API caller-provided external invoice number for this order. Appears in both the payer's transaction history and the emails that the payer receives.",
            "type": "string",
            "readOnly": true
          },
          "custom_id": {
            "type": "string",
            "description": "The API caller-provided external ID. Used to reconcile API caller-initiated transactions with PayPal transactions. Appears in transaction and settlement reports.",
            "maxLength": 127
          },
          "network_transaction_reference": {
            "$ref": "#/components/schemas/NetworkTransactionReference"
          },
          "seller_protection": {
            "$ref": "#/components/schemas/CaptureSellerProtection"
          },
          "final_capture": {
            "description": "Indicates whether you can make additional captures against the authorized payment. Set to `true` if you do not intend to capture additional payments against the authorization. Set to `false` if you intend to capture additional payments against the authorization.",
            "type": "boolean",
            "default": false,
            "readOnly": true,
            "example": true
          },
          "seller_receivable_breakdown": {
            "$ref": "#/components/schemas/SellerReceivableBreakdownDetails"
          },
          "disbursement_mode": {
            "$ref": "#/components/schemas/PaymentDisbursementMode"
          },
          "links": {
            "$ref": "#/components/schemas/CaptureLinks"
          },
          "processor_response": {
            "$ref": "#/components/schemas/CaptureProcessorResponse"
          }
        }
      },
      "CaptureAmount": {
        "description": "The amount for this captured payment.",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/Money"
          }
        ]
      },
      "CaptureSellerProtection": {
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/SellerProtection"
          }
        ]
      },
      "SellerReceivableBreakdownDetails": {
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/SellerReceivableBreakdown"
          }
        ]
      },
      "CaptureLinks": {
        "description": "An array of related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links).",
        "type": "array",
        "readOnly": true,
        "items": {
          "$ref": "#/components/schemas/LinkDescription"
        }
      },
      "CaptureProcessorResponse": {
        "description": "An object that provides additional processor information for a direct credit card transaction.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ProcessorResponseInformation"
          }
        ]
      },
      "RefundPaymentStatusDetails": {
        "description": "The details of the refund status.",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/RefundStatusDetails"
          }
        ]
      },
      "net-amount-breakdown-item-payable-amount": {
        "description": "The net amount debited from the merchant's PayPal account.",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/Money"
          }
        ]
      },
      "net-amount-breakdown-item-converted-amount": {
        "description": "The converted payable amount.",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/Money"
          }
        ]
      },
      "net-amount-breakdown-item-exchange-rate": {
        "description": "The exchange rate that determines the amount that was debited from the merchant's PayPal account.",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ExchangeRate"
          }
        ]
      },
      "RefundBaseInformation": {
        "properties": {
          "id": {
            "description": "The PayPal-generated ID for the refund.",
            "type": "string",
            "readOnly": true
          },
          "amount": {
            "$ref": "#/components/schemas/RefundAmount"
          },
          "invoice_id": {
            "description": "The API caller-provided external invoice number for this order. Appears in both the payer's transaction history and the emails that the payer receives.",
            "type": "string",
            "readOnly": true
          },
          "custom_id": {
            "type": "string",
            "description": "The API caller-provided external ID. Used to reconcile API caller-initiated transactions with PayPal transactions. Appears in transaction and settlement reports.",
            "minLength": 1,
            "maxLength": 127,
            "pattern": "^[A-Za-z0-9-_.,]*$"
          },
          "acquirer_reference_number": {
            "type": "string",
            "description": "Reference ID issued for the card transaction. This ID can be used to track the transaction across processors, card brands and issuing banks.",
            "minLength": 1,
            "maxLength": 36,
            "pattern": "^[a-zA-Z0-9]+$"
          },
          "note_to_payer": {
            "description": "The reason for the refund. Appears in both the payer's transaction history and the emails that the payer receives.",
            "type": "string",
            "readOnly": true
          },
          "seller_payable_breakdown": {
            "$ref": "#/components/schemas/RefundBreakdown"
          },
          "payer": {
            "$ref": "#/components/schemas/MerchantDetails"
          },
          "links": {
            "$ref": "#/components/schemas/RefundLinks"
          }
        }
      },
      "RefundAmount": {
        "description": "The amount that the payee refunded to the payer.",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/Money"
          }
        ]
      },
      "RefundBreakdown": {
        "description": "The breakdown of the refund.",
        "type": "object",
        "title": "Merchant Payable Breakdown",
        "properties": {
          "gross_amount": {
            "$ref": "#/components/schemas/GrossRefundAmount"
          },
          "paypal_fee": {
            "$ref": "#/components/schemas/RefundedPayPalFee"
          },
          "paypal_fee_in_receivable_currency": {
            "$ref": "#/components/schemas/RefundedFeeReceivableCurrency"
          },
          "net_amount": {
            "$ref": "#/components/schemas/NetRefundAmount"
          },
          "net_amount_in_receivable_currency": {
            "$ref": "#/components/schemas/RefundedNetAmountInReceivableCurrency"
          },
          "platform_fees": {
            "$ref": "#/components/schemas/RefundedPlatformFees"
          },
          "net_amount_breakdown": {
            "$ref": "#/components/schemas/NetRefundAmountBreakdown"
          },
          "total_refunded_amount": {
            "$ref": "#/components/schemas/TotalRefundedAmount"
          }
        },
        "readOnly": true
      },
      "GrossRefundAmount": {
        "description": "The amount that the payee refunded to the payer.",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/Money"
          }
        ]
      },
      "RefundedPayPalFee": {
        "description": "The PayPal fee that was refunded to the payer in the currency of the transaction. This fee might not match the PayPal fee that the payee paid when the payment was captured.",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/Money"
          }
        ]
      },
      "RefundedFeeReceivableCurrency": {
        "description": "The PayPal fee that was refunded to the payer in the receivable currency. Returned only in cases when the receivable currency is different from transaction currency. Example 'CNY'.",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/Money"
          }
        ]
      },
      "NetRefundAmount": {
        "description": "The net amount that the payee's account is debited in the transaction currency. The net amount is calculated as <code>gross_amount</code> minus <code>paypal_fee</code> minus <code>platform_fees</code>.",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/Money"
          }
        ]
      },
      "RefundedNetAmountInReceivableCurrency": {
        "description": "The net amount that the payee's account is debited in the receivable currency. Returned only in cases when the receivable currency is different from transaction currency. Example 'CNY'.",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/Money"
          }
        ]
      },
      "RefundedPlatformFees": {
        "type": "array",
        "description": "An array of platform or partner fees, commissions, or brokerage fees for the refund.",
        "minItems": 0,
        "maxItems": 1,
        "items": {
          "$ref": "#/components/schemas/PlatformFee"
        }
      },
      "NetRefundAmountBreakdown": {
        "type": "array",
        "description": "An array of breakdown values for the net amount. Returned when the currency of the refund is different from the currency of the PayPal account where the payee holds their funds.",
        "items": {
          "$ref": "#/components/schemas/net_amount_breakdown_item"
        },
        "readOnly": true
      },
      "TotalRefundedAmount": {
        "description": "The total amount refunded from the original capture to date. For example, if a payer makes a $100 purchase and was refunded $20 a week ago and was refunded $30 in this refund, the `gross_amount` is $30 for this refund and the `total_refunded_amount` is $50.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Money"
          }
        ]
      },
      "MerchantDetails": {
        "description": "The details associated with the merchant for this transaction.",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/MerchantBase"
          }
        ]
      },
      "RefundLinks": {
        "description": "An array of related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links).",
        "type": "array",
        "readOnly": true,
        "items": {
          "$ref": "#/components/schemas/LinkDescription"
        }
      },
      "AuthorizedPayments": {
        "type": "array",
        "description": "An array of authorized payments for a purchase unit. A purchase unit can have zero or more authorized payments.",
        "items": {
          "$ref": "#/components/schemas/AuthorizedPayment"
        }
      },
      "AuthorizedPayment": {
        "description": "The authorized payment for a purchase unit.",
        "allOf": [
          {
            "$ref": "#/components/schemas/AuthorizationWithAdditionalData"
          }
        ]
      },
      "CapturedPayments": {
        "type": "array",
        "description": "An array of captured payments for a purchase unit. A purchase unit can have zero or more captured payments.",
        "items": {
          "$ref": "#/components/schemas/CapturedPayment"
        }
      },
      "CapturedPayment": {
        "description": "The captured payment for a purchase unit.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Capture"
          }
        ]
      },
      "Refunds": {
        "type": "array",
        "description": "An array of refunds for a purchase unit. A purchase unit can have zero or more refunds.",
        "items": {
          "$ref": "#/components/schemas/RefundItems"
        }
      },
      "RefundItems": {
        "description": "A refund for a purchase unit.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Refund"
          }
        ]
      },
      "PurchaseUnitShipping": {
        "description": "The shipping address and method.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ShippingWithTrackingDetails"
          }
        ]
      },
      "SupplementaryData": {
        "description": "Supplementary data about this payment. Merchants and partners can add Level 2 and 3 data to payments to reduce risk and payment processing costs. For more information about processing payments, see <a href=\"https://developer.paypal.com/docs/checkout/advanced/processing/\">checkout</a> or <a href=\"https://developer.paypal.com/docs/multiparty/checkout/advanced/processing/\">multiparty checkout</a>.",
        "allOf": [
          {
            "$ref": "#/components/schemas/SupplementaryDataDetails"
          }
        ]
      },
      "PaymentsHistory": {
        "description": "The comprehensive history of payments for the purchase unit.",
        "readOnly": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentCollection"
          }
        ]
      },
      "OrderDetails": {
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the order.",
            "readOnly": true,
            "example": "5O190127TN364715T"
          },
          "payment_source": {
            "$ref": "#/components/schemas/PaymentSourceDetails"
          },
          "intent": {
            "$ref": "#/components/schemas/PaymentIntentCheckout"
          },
          "processing_instruction": {
            "$ref": "#/components/schemas/ProcessingInstruction"
          },
          "payer": {
            "$ref": "#/components/schemas/OrderPayer"
          },
          "purchase_units": {
            "$ref": "#/components/schemas/PurchaseUnits"
          },
          "status": {
            "$ref": "#/components/schemas/OrderStatusDetails"
          },
          "links": {
            "$ref": "#/components/schemas/OrderLinks"
          }
        }
      },
      "OrderPayer": {
        "description": "DEPRECATED. The customer is also known as the payer. The Payer object was intended to only be used with the `payment_source.paypal` object. In order to make this design more clear, the details in the `payer` object are now available under `payment_source.paypal`. Please use `payment_source.paypal`.",
        "deprecated": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/Payer"
          }
        ]
      },
      "orders-patch422-issues": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/orders-patch422-issues-items"
        }
      },
      "orders-patch422-issues-items": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/amount-mismatch1"
          },
          {
            "$ref": "#/components/schemas/cannot-be-negative1"
          },
          {
            "$ref": "#/components/schemas/cannot-be-zero-or-negative1"
          },
          {
            "$ref": "#/components/schemas/city-required1"
          },
          {
            "$ref": "#/components/schemas/decimal-precision1"
          },
          {
            "$ref": "#/components/schemas/donation-items-not-supported1"
          },
          {
            "$ref": "#/components/schemas/duplicate-reference-id1"
          },
          {
            "$ref": "#/components/schemas/invalid-currency-code1"
          },
          {
            "$ref": "#/components/schemas/item-total-mismatch1"
          },
          {
            "$ref": "#/components/schemas/item-total-required1"
          },
          {
            "$ref": "#/components/schemas/max-value-exceeded1"
          },
          {
            "$ref": "#/components/schemas/invalid-json-pointer-format"
          },
          {
            "$ref": "#/components/schemas/invalid-parameter"
          },
          {
            "$ref": "#/components/schemas/not-patchable"
          },
          {
            "$ref": "#/components/schemas/tax-total-mismatch1"
          },
          {
            "$ref": "#/components/schemas/tax-total-required1"
          },
          {
            "$ref": "#/components/schemas/unsupported-intent1"
          },
          {
            "$ref": "#/components/schemas/unsupported-patch-parameter-value"
          },
          {
            "$ref": "#/components/schemas/patch-value-required"
          },
          {
            "$ref": "#/components/schemas/patch-path-required"
          },
          {
            "$ref": "#/components/schemas/payee-account-locked-or-closed1"
          },
          {
            "$ref": "#/components/schemas/payee-account-restricted1"
          },
          {
            "$ref": "#/components/schemas/payee-fx-rate-id-expired1"
          },
          {
            "$ref": "#/components/schemas/payee-fx-rate-id-currency-mismatch1"
          },
          {
            "$ref": "#/components/schemas/invalid-fx-rate-id1"
          },
          {
            "$ref": "#/components/schemas/platform-fees-not-supported1"
          },
          {
            "$ref": "#/components/schemas/invalid-platform-fees-account1"
          },
          {
            "$ref": "#/components/schemas/invalid-platform-fees-amount1"
          },
          {
            "$ref": "#/components/schemas/postal-code-required1"
          },
          {
            "$ref": "#/components/schemas/reference-id-not-found"
          },
          {
            "$ref": "#/components/schemas/reference-id-required1"
          },
          {
            "$ref": "#/components/schemas/multi-currency-order1"
          },
          {
            "$ref": "#/components/schemas/shipping-option-not-selected1"
          },
          {
            "$ref": "#/components/schemas/ShippingOptionNotSupported"
          },
          {
            "$ref": "#/components/schemas/multiple-shipping-option-selected1"
          },
          {
            "$ref": "#/components/schemas/order-already-completed"
          },
          {
            "$ref": "#/components/schemas/preferred-shipping-option-amount-mismatch1"
          },
          {
            "$ref": "#/components/schemas/amount-change-not-allowed"
          }
        ]
      },
      "amount-mismatch1": {
        "title": "Amount Mismatch",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/amount-mismatch1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/amount-mismatch1-description"
          }
        }
      },
      "cannot-be-negative1": {
        "title": "Cannot Be Negative",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/cannot-be-negative1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/cannot-be-negative1-description"
          }
        }
      },
      "cannot-be-zero-or-negative1": {
        "title": "Cannot Be Zero Or Negative",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/cannot-be-zero-or-negative1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/cannot-be-zero-or-negative1-description"
          }
        }
      },
      "city-required1": {
        "title": "City Required",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/city-required1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/city-required1-description"
          }
        }
      },
      "decimal-precision1": {
        "title": "Decimal Precision",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/decimal-precision1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/decimal-precision1-description"
          }
        }
      },
      "donation-items-not-supported1": {
        "title": "Donation Items Not Supported",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/donation-items-not-supported1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/donation-items-not-supported1-description"
          }
        }
      },
      "duplicate-reference-id1": {
        "title": "Duplicate Reference ID",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/duplicate-reference-id1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/duplicate-reference-id1-description"
          }
        }
      },
      "invalid-currency-code1": {
        "title": "Invalid Currency Code",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/invalid-currency-code1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/invalid-currency-code1-description"
          }
        }
      },
      "item-total-mismatch1": {
        "title": "Item Total Mismatch",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/item-total-mismatch1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/item-total-mismatch1-description"
          }
        }
      },
      "item-total-required1": {
        "title": "Item Total Required",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/item-total-required1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/item-total-required1-description"
          }
        }
      },
      "max-value-exceeded1": {
        "title": "Max Value Exceeded",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/max-value-exceeded1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/max-value-exceeded1-description"
          }
        }
      },
      "invalid-json-pointer-format": {
        "title": "INVALID_JSON_POINTER_FORMAT",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/invalid-json-pointer-format-issue"
          },
          "description": {
            "$ref": "#/components/schemas/invalid-json-pointer-format-description"
          }
        }
      },
      "invalid-parameter": {
        "title": "INVALID_PARAMETER",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/invalid-parameter-issue"
          },
          "description": {
            "$ref": "#/components/schemas/invalid-parameter-description"
          }
        }
      },
      "not-patchable": {
        "title": "NOT_PATCHABLE",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/not-patchable-issue"
          },
          "description": {
            "$ref": "#/components/schemas/not-patchable-description"
          }
        }
      },
      "tax-total-mismatch1": {
        "title": "Tax Total Mismatch",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/tax-total-mismatch1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/tax-total-mismatch1-description"
          }
        }
      },
      "tax-total-required1": {
        "title": "Tax Total Required",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/tax-total-required1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/tax-total-required1-description"
          }
        }
      },
      "unsupported-intent1": {
        "title": "Unsupported Intent",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/unsupported-intent1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/unsupported-intent1-description"
          }
        }
      },
      "unsupported-patch-parameter-value": {
        "title": "UNSUPPORTED_PATCH_PARAMETER_VALUE",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/unsupported-patch-parameter-value-issue"
          },
          "description": {
            "$ref": "#/components/schemas/unsupported-patch-parameter-value-description"
          }
        }
      },
      "patch-value-required": {
        "title": "PATCH_VALUE_REQUIRED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/patch-value-required-issue"
          },
          "description": {
            "$ref": "#/components/schemas/patch-value-required-description"
          }
        }
      },
      "patch-path-required": {
        "title": "PATCH_PATH_REQUIRED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/patch-path-required-issue"
          },
          "description": {
            "$ref": "#/components/schemas/patch-path-required-description"
          }
        }
      },
      "payee-account-locked-or-closed1": {
        "title": "Payee Account Locked Or Closed",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/payee-account-locked-or-closed1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/payee-account-locked-or-closed1-description"
          }
        }
      },
      "payee-account-restricted1": {
        "title": "Payee Account Restricted",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/payee-account-restricted1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/payee-account-restricted1-description"
          }
        }
      },
      "payee-fx-rate-id-expired1": {
        "title": "Payee FX Rate ID Expired",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/payee-fx-rate-id-expired1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/payee-fx-rate-id-expired1-description"
          }
        }
      },
      "payee-fx-rate-id-currency-mismatch1": {
        "title": "Payee FX Rate ID Currency Mismatch",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/payee-fx-rate-id-currency-mismatch1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/payee-fx-rate-id-currency-mismatch1-description"
          }
        }
      },
      "invalid-fx-rate-id1": {
        "title": "Invalid FX Rate ID",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/invalid-fx-rate-id1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/invalid-fx-rate-id1-description"
          }
        }
      },
      "platform-fees-not-supported1": {
        "title": "Platform Fees Not Supported",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/platform-fees-not-supported1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/platform-fees-not-supported1-description"
          }
        }
      },
      "invalid-platform-fees-account1": {
        "title": "Invalid Platform Fees Account Error",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/invalid-platform-fees-account1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/invalid-platform-fees-account1-description"
          }
        }
      },
      "invalid-platform-fees-amount1": {
        "title": "Invalid Platform Fees Amount",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/invalid-platform-fees-amount1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/invalid-platform-fees-amount1-description"
          }
        }
      },
      "postal-code-required1": {
        "title": "Postal Code Required",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/postal-code-required1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/postal-code-required1-description"
          }
        }
      },
      "reference-id-not-found": {
        "title": "REFERENCE_ID_NOT_FOUND",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/reference-id-not-found-issue"
          },
          "description": {
            "$ref": "#/components/schemas/reference-id-not-found-description"
          }
        }
      },
      "reference-id-required1": {
        "title": "Reference ID Required",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/reference-id-required1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/reference-id-required1-description"
          }
        }
      },
      "multi-currency-order1": {
        "title": "Multi-Currency Order",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/multi-currency-order1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/multi-currency-order1-description"
          }
        }
      },
      "shipping-option-not-selected1": {
        "title": "Shipping Option Not Selected",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/shipping-option-not-selected1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/shipping-option-not-selected1-description"
          }
        }
      },
      "multiple-shipping-option-selected1": {
        "title": "Multiple Shipping Option Selected",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/multiple-shipping-option-selected1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/multiple-shipping-option-selected1-description"
          }
        }
      },
      "order-already-completed": {
        "title": "ORDER_ALREADY_COMPLETED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/order-already-completed-issue"
          },
          "description": {
            "$ref": "#/components/schemas/order-already-completed-description"
          }
        }
      },
      "preferred-shipping-option-amount-mismatch1": {
        "title": "Preferred Shipping Option Amount Mismatch",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/preferred-shipping-option-amount-mismatch1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/shipping-option-amount-match-breakdown"
          }
        }
      },
      "amount-change-not-allowed": {
        "title": "AMOUNT_CHANGE_NOT_ALLOWED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/amount-change-not-allowed-issue"
          },
          "description": {
            "$ref": "#/components/schemas/amount-change-not-allowed-description"
          }
        }
      },
      "orders-confirm422-issues": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/orders-confirm422-issues-items"
        }
      },
      "orders-confirm422-issues-items": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/order-already-captured"
          },
          {
            "$ref": "#/components/schemas/order-already-authorized"
          },
          {
            "$ref": "#/components/schemas/order-cannot-be-confirmed"
          },
          {
            "$ref": "#/components/schemas/missing-previous-reference1"
          },
          {
            "$ref": "#/components/schemas/missing-cryptogram1"
          },
          {
            "$ref": "#/components/schemas/currency-not-supported-for-country"
          },
          {
            "$ref": "#/components/schemas/card-expired1"
          },
          {
            "$ref": "#/components/schemas/card-type-not-supported"
          },
          {
            "$ref": "#/components/schemas/currency-not-supported-for-card-type"
          },
          {
            "$ref": "#/components/schemas/only-one-payment-source-allowed"
          },
          {
            "$ref": "#/components/schemas/no-payment-source-provided"
          },
          {
            "$ref": "#/components/schemas/payment-already-approved"
          },
          {
            "$ref": "#/components/schemas/unsupported-processing-instruction1"
          },
          {
            "$ref": "#/components/schemas/order-complete-on-payment-approval1"
          },
          {
            "$ref": "#/components/schemas/invalid-expiry-date1"
          },
          {
            "$ref": "#/components/schemas/token-expired1"
          },
          {
            "$ref": "#/components/schemas/invalid-google-pay-token1"
          },
          {
            "$ref": "#/components/schemas/google-pay-gateway-merchant-id-mismatch1"
          },
          {
            "$ref": "#/components/schemas/cryptogram-required2"
          },
          {
            "$ref": "#/components/schemas/one-of-parameters-required1"
          },
          {
            "$ref": "#/components/schemas/return-url-required"
          },
          {
            "$ref": "#/components/schemas/cancel-url-required"
          },
          {
            "$ref": "#/components/schemas/country-not-supported-by-payment-source"
          },
          {
            "$ref": "#/components/schemas/required-parameter-for-payment-source"
          },
          {
            "$ref": "#/components/schemas/required-parameter-for-customer-initiated-payment1"
          },
          {
            "$ref": "#/components/schemas/item-category-not-supported-by-payment-source"
          },
          {
            "$ref": "#/components/schemas/payment-source-info-cannot-be-verified1"
          },
          {
            "$ref": "#/components/schemas/payment-source-declined-by-processor1"
          },
          {
            "$ref": "#/components/schemas/payment-source-cannot-be-used1"
          },
          {
            "$ref": "#/components/schemas/setup-error-for-bank"
          },
          {
            "$ref": "#/components/schemas/bank-not-supported-for-verification"
          },
          {
            "$ref": "#/components/schemas/apple-pay-amount-mismatch1"
          },
          {
            "$ref": "#/components/schemas/one-of-the-parameters-required"
          },
          {
            "$ref": "#/components/schemas/billing-address-invalid1"
          },
          {
            "$ref": "#/components/schemas/shipping-address-invalid1"
          },
          {
            "$ref": "#/components/schemas/order-is-pending-approval"
          },
          {
            "$ref": "#/components/schemas/device-data-not-available"
          },
          {
            "$ref": "#/components/schemas/currency-not-supported-for-bank"
          },
          {
            "$ref": "#/components/schemas/only-one-bank-source-allowed"
          },
          {
            "$ref": "#/components/schemas/invalid-iban"
          },
          {
            "$ref": "#/components/schemas/iban-country-not-supported"
          },
          {
            "$ref": "#/components/schemas/payee-country-not-supported-for-payment-source"
          },
          {
            "$ref": "#/components/schemas/card-number-required"
          },
          {
            "$ref": "#/components/schemas/card-expiry-required"
          },
          {
            "$ref": "#/components/schemas/incompatible-parameter-value1"
          },
          {
            "$ref": "#/components/schemas/vault-instruction-duplicated1"
          },
          {
            "$ref": "#/components/schemas/vault-instruction-required1"
          },
          {
            "$ref": "#/components/schemas/mismatched-vault-id-to-payment-source1"
          },
          {
            "$ref": "#/components/schemas/not-eligible-for-pnref-processing1"
          },
          {
            "$ref": "#/components/schemas/not-eligible-for-paypal-transaction-id-processing1"
          },
          {
            "$ref": "#/components/schemas/paypal-transaction-id-not-found1"
          },
          {
            "$ref": "#/components/schemas/pnref-not-found1"
          },
          {
            "$ref": "#/components/schemas/invalid-security-code-length1"
          },
          {
            "$ref": "#/components/schemas/not-enabled-to-vault-payment-source1"
          },
          {
            "$ref": "#/components/schemas/cryptogram-required3"
          },
          {
            "$ref": "#/components/schemas/emv-data-required1"
          },
          {
            "$ref": "#/components/schemas/alias-declined-by-processor1"
          },
          {
            "$ref": "#/components/schemas/blik-one-click-missing-required-parameter1"
          }
        ]
      },
      "order-already-captured": {
        "title": "ORDER_ALREADY_CAPTURED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/order-already-captured-issue"
          },
          "description": {
            "$ref": "#/components/schemas/order-already-captured-description"
          }
        }
      },
      "order-already-authorized": {
        "title": "ORDER_ALREADY_AUTHORIZED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/order-already-authorized-issue"
          },
          "description": {
            "$ref": "#/components/schemas/order-already-authorized-description"
          }
        }
      },
      "order-cannot-be-confirmed": {
        "title": "ORDER_CANNOT_BE_CONFIRMED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/order-cannot-be-confirmed-issue"
          },
          "description": {
            "$ref": "#/components/schemas/order-cannot-be-confirmed-description"
          }
        }
      },
      "missing-previous-reference1": {
        "title": "MISSING_PREVIOUS_REFERENCE_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/missing-previous-reference1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/missing-previous-reference1-description"
          }
        }
      },
      "missing-cryptogram1": {
        "title": "MISSING_CRYPTOGRAM_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/missing-cryptogram1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/missing-cryptogram1-description"
          }
        }
      },
      "currency-not-supported-for-country": {
        "title": "CURRENCY_NOT_SUPPORTED_FOR_COUNTRY",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/currency-not-supported-for-country-issue"
          },
          "description": {
            "$ref": "#/components/schemas/currency-not-supported-for-country-description"
          }
        }
      },
      "card-expired1": {
        "title": "CARD_EXPIRED_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/card-expired1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/card-expired1-description"
          }
        }
      },
      "card-type-not-supported": {
        "title": "CARD_TYPE_NOT_SUPPORTED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/card-type-not-supported-issue"
          },
          "description": {
            "$ref": "#/components/schemas/card-type-not-supported-description"
          }
        }
      },
      "currency-not-supported-for-card-type": {
        "title": "CURRENCY_NOT_SUPPORTED_FOR_CARD_TYPE",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/currency-not-supported-for-card-type-issue"
          },
          "description": {
            "$ref": "#/components/schemas/currency-not-supported-for-card-type-description"
          }
        }
      },
      "only-one-payment-source-allowed": {
        "title": "ONLY_ONE_PAYMENT_SOURCE_ALLOWED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/only-one-payment-source-allowed-issue"
          },
          "description": {
            "$ref": "#/components/schemas/only-one-payment-source-allowed-description"
          }
        }
      },
      "no-payment-source-provided": {
        "title": "NO_PAYMENT_SOURCE_PROVIDED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/no-payment-source-provided-issue"
          },
          "description": {
            "$ref": "#/components/schemas/no-payment-source-provided-description"
          }
        }
      },
      "payment-already-approved": {
        "title": "PAYMENT_ALREADY_APPROVED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/payment-already-approved-issue"
          },
          "description": {
            "$ref": "#/components/schemas/payment-already-approved-description"
          }
        }
      },
      "unsupported-processing-instruction1": {
        "title": "UNSUPPORTED_PROCESSING_INSTRUCTION_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/unsupported-processing-instruction1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/unsupported-processing-instruction1-description"
          }
        }
      },
      "order-complete-on-payment-approval1": {
        "title": "ORDER_COMPLETE_ON_PAYMENT_APPROVAL_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/order-complete-on-payment-approval1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/order-complete-on-payment-approval1-description"
          }
        }
      },
      "invalid-expiry-date1": {
        "title": "INVALID_EXPIRY_DATE_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/invalid-expiry-date1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/invalid-expiry-date1-description"
          }
        }
      },
      "token-expired1": {
        "title": "TOKEN_EXPIRED_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/token-expired1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/token-expired1-description"
          }
        }
      },
      "invalid-google-pay-token1": {
        "title": "INVALID_GOOGLE_PAY_TOKEN_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/invalid-google-pay-token1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/invalid-google-pay-token1-description"
          }
        }
      },
      "google-pay-gateway-merchant-id-mismatch1": {
        "title": "GOOGLE_PAY_GATEWAY_MERCHANT_ID_MISMATCH_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/google-pay-gateway-merchant-id-mismatch1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/invalid-google-pay-merchant-id-mismatch"
          }
        }
      },
      "cryptogram-required2": {
        "title": "CRYPTOGRAM_REQUIRED_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/cryptogram-required2-issue"
          },
          "description": {
            "$ref": "#/components/schemas/cryptogram-required2-description"
          }
        }
      },
      "one-of-parameters-required1": {
        "title": "ONE_OF_PARAMETERS_REQUIRED_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/one-of-parameters-required1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/one-of-parameters-required1-description"
          }
        }
      },
      "return-url-required": {
        "title": "RETURN_URL_REQUIRED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/return-url-required-issue"
          },
          "description": {
            "$ref": "#/components/schemas/return-url-required-description"
          }
        }
      },
      "cancel-url-required": {
        "title": "CANCEL_URL_REQUIRED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/cancel-url-required-issue"
          },
          "description": {
            "$ref": "#/components/schemas/cancel-url-required-description"
          }
        }
      },
      "country-not-supported-by-payment-source": {
        "title": "COUNTRY_NOT_SUPPORTED_BY_PAYMENT_SOURCE",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/country-not-supported-by-payment-source-issue"
          },
          "description": {
            "$ref": "#/components/schemas/unsupported-country-code-payment-source"
          }
        }
      },
      "required-parameter-for-payment-source": {
        "title": "REQUIRED_PARAMETER_FOR_PAYMENT_SOURCE",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/required-parameter-for-payment-source-issue"
          },
          "description": {
            "$ref": "#/components/schemas/required-parameter-for-payment-source-description"
          }
        }
      },
      "required-parameter-for-customer-initiated-payment1": {
        "title": "MISSING_PAYMENT_PARAM_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/customer-initiated-payment-required-param"
          },
          "description": {
            "$ref": "#/components/schemas/req-param-cust-present-initiator"
          }
        }
      },
      "item-category-not-supported-by-payment-source": {
        "title": "ITEM_CATEGORY_NOT_SUPPORTED_BY_PAYMENT_SOURCE",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/item-category-not-supported-payment-source"
          },
          "description": {
            "$ref": "#/components/schemas/payment-source-does-not-support-item-category"
          }
        }
      },
      "payment-source-info-cannot-be-verified1": {
        "title": "PAYMENT_SOURCE_INFO_CANNOT_BE_VERIFIED_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/payment-source-info-cannot-be-verified1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/unverified-payment-source-and-address-combination"
          }
        }
      },
      "payment-source-declined-by-processor1": {
        "title": "PAYMENT_SOURCE_DECLINED_BY_PROCESSOR_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/payment-source-declined-by-processor1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/payment-source-declined-by-processor1-description"
          }
        }
      },
      "payment-source-cannot-be-used1": {
        "title": "PAYMENT_SOURCE_CANNOT_BE_USED_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/payment-source-cannot-be-used1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/payment-source-cannot-be-used1-description"
          }
        }
      },
      "setup-error-for-bank": {
        "title": "SETUP_ERROR_FOR_BANK",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/setup-error-for-bank-issue"
          },
          "description": {
            "$ref": "#/components/schemas/setup-error-for-bank-description"
          }
        }
      },
      "bank-not-supported-for-verification": {
        "title": "BANK_NOT_SUPPORTED_FOR_VERIFICATION",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/bank-not-supported-for-verification-issue"
          },
          "description": {
            "$ref": "#/components/schemas/bank-not-supported-for-verification-description"
          }
        }
      },
      "apple-pay-amount-mismatch1": {
        "title": "APPLE_PAY_AMOUNT_MISMATCH_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/apple-pay-amount-mismatch1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/apple-pay-amount-mismatch1-description"
          }
        }
      },
      "one-of-the-parameters-required": {
        "title": "ONE_OF_THE_PARAMETERS_REQUIRED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/one-of-the-parameters-required-issue"
          },
          "description": {
            "$ref": "#/components/schemas/one-of-the-parameters-required-description"
          }
        }
      },
      "billing-address-invalid1": {
        "title": "BILLING_ADDRESS_INVALID_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/billing-address-invalid1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/billing-address-invalid1-description"
          }
        }
      },
      "shipping-address-invalid1": {
        "title": "SHIPPING_ADDRESS_INVALID_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/shipping-address-invalid1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/shipping-address-invalid1-description"
          }
        }
      },
      "order-is-pending-approval": {
        "title": "ORDER_IS_PENDING_APPROVAL",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/order-is-pending-approval-issue"
          },
          "description": {
            "$ref": "#/components/schemas/order-is-pending-approval-description"
          }
        }
      },
      "device-data-not-available": {
        "title": "DEVICE_DATA_NOT_AVAILABLE",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/device-data-not-available-issue"
          },
          "description": {
            "$ref": "#/components/schemas/device-data-not-available-description"
          }
        }
      },
      "currency-not-supported-for-bank": {
        "title": "CURRENCY_NOT_SUPPORTED_FOR_BANK",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/currency-not-supported-for-bank-issue"
          },
          "description": {
            "$ref": "#/components/schemas/currency-not-supported-for-bank-description"
          }
        }
      },
      "only-one-bank-source-allowed": {
        "title": "ONLY_ONE_BANK_SOURCE_ALLOWED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/only-one-bank-source-allowed-issue"
          },
          "description": {
            "$ref": "#/components/schemas/only-one-bank-source-allowed-description"
          }
        }
      },
      "invalid-iban": {
        "title": "INVALID_IBAN",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/invalid-iban-issue"
          },
          "description": {
            "$ref": "#/components/schemas/invalid-iban-description"
          }
        }
      },
      "iban-country-not-supported": {
        "title": "IBAN_COUNTRY_NOT_SUPPORTED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/iban-country-not-supported-issue"
          },
          "description": {
            "$ref": "#/components/schemas/iban-country-not-supported-description"
          }
        }
      },
      "payee-country-not-supported-for-payment-source": {
        "title": "PAYEE_COUNTRY_NOT_SUPPORTED_FOR_PAYMENT_SOURCE",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/payee-country-not-supported-payment-source"
          },
          "description": {
            "$ref": "#/components/schemas/payee-country-code-not-supported-payment-source"
          }
        }
      },
      "card-number-required": {
        "title": "CARD_NUMBER_REQUIRED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/card-number-required-issue"
          },
          "description": {
            "$ref": "#/components/schemas/card-number-required-description"
          }
        }
      },
      "card-expiry-required": {
        "title": "CARD_EXPIRY_REQUIRED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/card-expiry-required-issue"
          },
          "description": {
            "$ref": "#/components/schemas/card-expiry-required-description"
          }
        }
      },
      "incompatible-parameter-value1": {
        "title": "INCOMPATIBLE_PARAMETER_VALUE_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/incompatible-parameter-value1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/incompatible-parameter-value1-description"
          }
        }
      },
      "vault-instruction-duplicated1": {
        "title": "VAULT_INSTRUCTION_DUPLICATED_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/vault-instruction-duplicated1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/vault-instruction-duplicated1-description"
          }
        }
      },
      "vault-instruction-required1": {
        "title": "VAULT_INSTRUCTION_REQUIRED_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/vault-instruction-required1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/vault-instruction-required1-description"
          }
        }
      },
      "mismatched-vault-id-to-payment-source1": {
        "title": "MISMATCHED_VAULT_ID_TO_PAYMENT_SOURCE_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/mismatched-vault-id-to-payment-source1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/mismatched-vault-id-to-payment-source1-description"
          }
        }
      },
      "not-eligible-for-pnref-processing1": {
        "title": "NOT_ELIGIBLE_FOR_PNREF_PROCESSING_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/not-eligible-for-pnref-processing1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/not-eligible-for-pnref-processing1-description"
          }
        }
      },
      "not-eligible-for-paypal-transaction-id-processing1": {
        "title": "PAYPAL_ID_PROCESSING_INELIGIBILITY_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/not-eligible-paypal-transaction-id-processing"
          },
          "description": {
            "$ref": "#/components/schemas/paypal-transaction-id-processing-permission-error"
          }
        }
      },
      "paypal-transaction-id-not-found1": {
        "title": "PAYPAL_TRANSACTION_ID_NOT_FOUND_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/paypal-transaction-id-not-found1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/paypal-transaction-id-not-found1-description"
          }
        }
      },
      "pnref-not-found1": {
        "title": "PNREF_NOT_FOUND_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/pnref-not-found1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/pnref-not-found1-description"
          }
        }
      },
      "invalid-security-code-length1": {
        "title": "INVALID_SECURITY_CODE_LENGTH_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/invalid-security-code-length1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/invalid-security-code-length1-description"
          }
        }
      },
      "not-enabled-to-vault-payment-source1": {
        "title": "NOT_ENABLED_TO_VAULT_PAYMENT_SOURCE_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/not-enabled-to-vault-payment-source1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/not-enabled-to-vault-payment-source1-description"
          }
        }
      },
      "cryptogram-required3": {
        "title": "CRYPTOGRAM_IS_REQUIRED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/cryptogram-required3-issue"
          },
          "description": {
            "$ref": "#/components/schemas/cryptogram-required3-description"
          }
        }
      },
      "emv-data-required1": {
        "title": "EMV_DATA_REQUIRED_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/emv-data-required1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/emv-data-required1-description"
          }
        }
      },
      "alias-declined-by-processor1": {
        "title": "ALIAS_DECLINED_BY_PROCESSOR_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/alias-declined-by-processor1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/alias-declined-by-processor1-description"
          }
        }
      },
      "blik-one-click-missing-required-parameter1": {
        "title": "BLIK_ONE_CLICK_MISSING_REQUIRED_PARAMETER_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/blik-one-click-missing-required-parameter1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/blik-one-click-first-transaction-params"
          }
        }
      },
      "order-authorize-request-payment-source": {
        "description": "The source of payment for the order, which can be a token or a card. Use this object only if you have not redirected the user after order creation to approve the payment. In such cases, the user-selected payment method in the PayPal flow is implicitly used.",
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentSourceDefinition"
          }
        ]
      },
      "OrderAuthorizationDetails": {
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the order.",
            "readOnly": true
          },
          "payment_source": {
            "$ref": "#/components/schemas/PaymentSourceDetails"
          },
          "intent": {
            "$ref": "#/components/schemas/PaymentIntentCheckout"
          },
          "processing_instruction": {
            "$ref": "#/components/schemas/ProcessingInstruction"
          },
          "payer": {
            "$ref": "#/components/schemas/Payer"
          },
          "purchase_units": {
            "$ref": "#/components/schemas/PurchaseUnits"
          },
          "status": {
            "$ref": "#/components/schemas/OrderStatusDetails"
          },
          "links": {
            "$ref": "#/components/schemas/OrderLinks"
          }
        }
      },
      "PurchaseUnits": {
        "type": "array",
        "description": "An array of purchase units. Each purchase unit establishes a contract between a customer and merchant. Each purchase unit represents either a full or partial order that the customer intends to purchase from the merchant.",
        "minItems": 1,
        "maxItems": 10,
        "items": {
          "$ref": "#/components/schemas/PurchaseUnitContract"
        }
      },
      "PurchaseUnitContract": {
        "description": "A purchase unit. Establishes a contract between a customer and merchant.",
        "allOf": [
          {
            "$ref": "#/components/schemas/PurchaseUnit"
          }
        ]
      },
      "OrderStatusDetails": {
        "readOnly": true,
        "example": "COMPLETED",
        "allOf": [
          {
            "$ref": "#/components/schemas/OrderStatus"
          }
        ]
      },
      "OrderLinks": {
        "type": "array",
        "description": "An array of request-related HATEOAS links. To complete payer approval, use the `approve` link to redirect the payer. The API caller has 3 hours (default setting, this which can be changed by your account manager to 24/48/72 hours to accommodate your use case) from the time the order is created, to redirect your payer. Once redirected, the API caller has 3 hours for the payer to approve the order and either authorize or capture the order. If you are not using the PayPal JavaScript SDK to initiate PayPal Checkout (in context) ensure that you include `application_context.return_url` is specified or you will get \"We're sorry, Things don't appear to be working at the moment\" after the payer approves the payment.",
        "readOnly": true,
        "example": "[\r\n    {\r\n        \"href\": \"https://api-m.paypal.com/v2/checkout/orders/5O190127TN364715T\",\r\n        \"rel\": \"self\",\r\n        \"method\": \"GET\"\r\n    },\r\n    {\r\n        \"href\": \"https://www.paypal.com/checkoutnow?token=5O190127TN364715T\",\r\n        \"rel\": \"payer-action\",\r\n        \"method\": \"GET\"\r\n    }\r\n]",
        "items": {
          "$ref": "#/components/schemas/OrderLinksItems"
        }
      },
      "OrderLinksItems": {
        "description": "A request-related [HATEOAS link](/api/rest/responses/#hateoas-links). To complete payer approval, use the `approve` link with the `GET` method.",
        "allOf": [
          {
            "$ref": "#/components/schemas/LinkDescription"
          }
        ]
      },
      "orders-authorize403-issues": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/orders-authorize403-issues-items"
        }
      },
      "orders-authorize403-issues-items": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/not-eligible-for-token-processing"
          },
          {
            "$ref": "#/components/schemas/permission-denied1"
          },
          {
            "$ref": "#/components/schemas/permission-denied-for-donation-items"
          }
        ]
      },
      "not-eligible-for-token-processing": {
        "title": "NOT_ELIGIBLE_FOR_TOKEN_PROCESSING",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/not-eligible-for-token-processing-issue"
          },
          "description": {
            "$ref": "#/components/schemas/not-eligible-for-token-processing-description"
          }
        }
      },
      "permission-denied1": {
        "title": "PERMISSION_DENIED_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/permission-denied1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/permission-denied1-description"
          }
        }
      },
      "permission-denied-for-donation-items": {
        "title": "PERMISSION_DENIED_FOR_DONATION_ITEMS",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/permission-denied-for-donation-items-issue"
          },
          "description": {
            "$ref": "#/components/schemas/permission-denied-for-donation-items-description"
          }
        }
      },
      "orders-authorize422-issues": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/orders-authorize422-issues-items"
        }
      },
      "orders-authorize422-issues-items": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/action-does-not-match-intent"
          },
          {
            "$ref": "#/components/schemas/agreement-already-cancelled1"
          },
          {
            "$ref": "#/components/schemas/billing-agreement-not-found1"
          },
          {
            "$ref": "#/components/schemas/missing-previous-reference2"
          },
          {
            "$ref": "#/components/schemas/missing-cryptogram2"
          },
          {
            "$ref": "#/components/schemas/card-brand-not-supported"
          },
          {
            "$ref": "#/components/schemas/declined-due-to-related-txn"
          },
          {
            "$ref": "#/components/schemas/domestic-transaction-required1"
          },
          {
            "$ref": "#/components/schemas/duplicate-invoice-id1"
          },
          {
            "$ref": "#/components/schemas/order-not-approved"
          },
          {
            "$ref": "#/components/schemas/max-number-of-payment-attempts-exceeded1"
          },
          {
            "$ref": "#/components/schemas/payee-blocked-transaction1"
          },
          {
            "$ref": "#/components/schemas/payee-fx-rate-id-expired2"
          },
          {
            "$ref": "#/components/schemas/unsupported-intent-for-payment-source"
          },
          {
            "$ref": "#/components/schemas/payer-account-locked-or-closed1"
          },
          {
            "$ref": "#/components/schemas/payer-account-restricted1"
          },
          {
            "$ref": "#/components/schemas/payer-cannot-pay1"
          },
          {
            "$ref": "#/components/schemas/paypal-transaction-id-expired"
          },
          {
            "$ref": "#/components/schemas/pnref-expired"
          },
          {
            "$ref": "#/components/schemas/referenced-card-expired"
          },
          {
            "$ref": "#/components/schemas/token-expired2"
          },
          {
            "$ref": "#/components/schemas/token-id-not-found"
          },
          {
            "$ref": "#/components/schemas/transaction-limit-exceeded1"
          },
          {
            "$ref": "#/components/schemas/transaction-receiving-limit-exceeded1"
          },
          {
            "$ref": "#/components/schemas/transaction-refused1"
          },
          {
            "$ref": "#/components/schemas/order-already-authorized1"
          },
          {
            "$ref": "#/components/schemas/auth-capture-not-enabled1"
          },
          {
            "$ref": "#/components/schemas/amount-cannot-be-specified"
          },
          {
            "$ref": "#/components/schemas/authorization-amount-exceeded"
          },
          {
            "$ref": "#/components/schemas/authorization-currency-mismatch"
          },
          {
            "$ref": "#/components/schemas/max-authorization-count-exceeded"
          },
          {
            "$ref": "#/components/schemas/order-completed-or-voided"
          },
          {
            "$ref": "#/components/schemas/order-expired"
          },
          {
            "$ref": "#/components/schemas/invalid-pickup-address"
          },
          {
            "$ref": "#/components/schemas/shipping-address-invalid2"
          },
          {
            "$ref": "#/components/schemas/payment-type-not-supported-for-intent"
          },
          {
            "$ref": "#/components/schemas/billing-agreement-id-mismatch"
          },
          {
            "$ref": "#/components/schemas/preferred-payment-source-mismatch"
          },
          {
            "$ref": "#/components/schemas/incompatible-parameter-value2"
          },
          {
            "$ref": "#/components/schemas/invalid-previous-transaction-reference1"
          },
          {
            "$ref": "#/components/schemas/previous-transaction-reference-has-chargeback1"
          },
          {
            "$ref": "#/components/schemas/previous-transaction-reference-voided1"
          },
          {
            "$ref": "#/components/schemas/payment-source-mismatch1"
          },
          {
            "$ref": "#/components/schemas/merchant-initiated-with-security-code1"
          },
          {
            "$ref": "#/components/schemas/merchant-initiated-with-authentication-results1"
          },
          {
            "$ref": "#/components/schemas/merchant-initiated-with-multiple-purchase-units1"
          },
          {
            "$ref": "#/components/schemas/return-url-required1"
          },
          {
            "$ref": "#/components/schemas/cancel-url-required1"
          },
          {
            "$ref": "#/components/schemas/payer-action-required"
          },
          {
            "$ref": "#/components/schemas/apple-pay-amount-mismatch2"
          },
          {
            "$ref": "#/components/schemas/card-number-required1"
          },
          {
            "$ref": "#/components/schemas/card-expiry-required1"
          },
          {
            "$ref": "#/components/schemas/vault-instruction-required2"
          },
          {
            "$ref": "#/components/schemas/mismatched-vault-id-to-payment-source2"
          },
          {
            "$ref": "#/components/schemas/order-cannot-be-saved"
          },
          {
            "$ref": "#/components/schemas/save-order-not-supported"
          },
          {
            "$ref": "#/components/schemas/not-eligible-for-pnref-processing2"
          },
          {
            "$ref": "#/components/schemas/not-eligible-for-paypal-transaction-id-processing2"
          },
          {
            "$ref": "#/components/schemas/paypal-transaction-id-not-found2"
          },
          {
            "$ref": "#/components/schemas/pnref-not-found2"
          },
          {
            "$ref": "#/components/schemas/invalid-security-code-length2"
          },
          {
            "$ref": "#/components/schemas/required-parameter-for-customer-initiated-payment2"
          }
        ]
      },
      "action-does-not-match-intent": {
        "title": "ACTION_DOES_NOT_MATCH_INTENT",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/action-does-not-match-intent-issue"
          },
          "description": {
            "$ref": "#/components/schemas/action-does-not-match-intent-description"
          }
        }
      },
      "agreement-already-cancelled1": {
        "title": "AGREEMENT_ALREADY_CANCELLED_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/agreement-already-cancelled1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/agreement-already-cancelled1-description"
          }
        }
      },
      "billing-agreement-not-found1": {
        "title": "BILLING_AGREEMENT_NOT_FOUND_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/billing-agreement-not-found1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/billing-agreement-not-found1-description"
          }
        }
      },
      "missing-previous-reference2": {
        "title": "MISSING_PREVIOUS_REFERENCE_RESULT",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/missing-previous-reference2-issue"
          },
          "description": {
            "$ref": "#/components/schemas/missing-previous-reference2-description"
          }
        }
      },
      "missing-cryptogram2": {
        "title": "MISSING_CRYPTOGRAM_RESULT",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/missing-cryptogram2-issue"
          },
          "description": {
            "$ref": "#/components/schemas/missing-cryptogram2-description"
          }
        }
      },
      "card-brand-not-supported": {
        "title": "CARD_BRAND_NOT_SUPPORTED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/card-brand-not-supported-issue"
          },
          "description": {
            "$ref": "#/components/schemas/card-brand-not-supported-description"
          }
        }
      },
      "declined-due-to-related-txn": {
        "title": "DECLINED_DUE_TO_RELATED_TXN",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/declined-due-to-related-txn-issue"
          },
          "description": {
            "$ref": "#/components/schemas/declined-due-to-related-txn-description"
          }
        }
      },
      "domestic-transaction-required1": {
        "title": "DOMESTIC_TRANSACTION_REQUIRED_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/domestic-transaction-required1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/domestic-transaction-required1-description"
          }
        }
      },
      "duplicate-invoice-id1": {
        "title": "DUPLICATE_INVOICE_ID_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/duplicate-invoice-id1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/duplicate-invoice-id1-description"
          }
        }
      },
      "order-not-approved": {
        "title": "ORDER_NOT_APPROVED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/order-not-approved-issue"
          },
          "description": {
            "$ref": "#/components/schemas/order-not-approved-description"
          }
        }
      },
      "max-number-of-payment-attempts-exceeded1": {
        "title": "MAX_NUMBER_OF_PAYMENT_ATTEMPTS_EXCEEDED_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/max-number-of-payment-attempts-exceeded1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/exceeded-max-payment-attempts-error"
          }
        }
      },
      "payee-blocked-transaction1": {
        "title": "PAYEE_BLOCKED_TRANSACTION_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/payee-blocked-transaction1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/payee-blocked-transaction1-description"
          }
        }
      },
      "payee-fx-rate-id-expired2": {
        "title": "PAYEE_FX_RATE_ID_EXPIRED_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/payee-fx-rate-id-expired2-issue"
          },
          "description": {
            "$ref": "#/components/schemas/payee-fx-rate-id-expired2-description"
          }
        }
      },
      "unsupported-intent-for-payment-source": {
        "title": "UNSUPPORTED_INTENT_FOR_PAYMENT_SOURCE",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/unsupported-intent-for-payment-source-issue"
          },
          "description": {
            "$ref": "#/components/schemas/unsupported-intent-for-payment-source-description"
          }
        }
      },
      "payer-account-locked-or-closed1": {
        "title": "PAYER_ACCOUNT_LOCKED_OR_CLOSED_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/payer-account-locked-or-closed1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/payer-account-locked-or-closed1-description"
          }
        }
      },
      "payer-account-restricted1": {
        "title": "PAYER_ACCOUNT_RESTRICTED_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/payer-account-restricted1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/payer-account-restricted1-description"
          }
        }
      },
      "payer-cannot-pay1": {
        "title": "PAYER_CANNOT_PAY_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/payer-cannot-pay1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/payer-cannot-pay1-description"
          }
        }
      },
      "paypal-transaction-id-expired": {
        "title": "PAYPAL_TRANSACTION_ID_EXPIRED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/paypal-transaction-id-expired-issue"
          },
          "description": {
            "$ref": "#/components/schemas/paypal-transaction-id-expired-description"
          }
        }
      },
      "pnref-expired": {
        "title": "PNREF_EXPIRED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/pnref-expired-issue"
          },
          "description": {
            "$ref": "#/components/schemas/pnref-expired-description"
          }
        }
      },
      "referenced-card-expired": {
        "title": "REFERENCED_CARD_EXPIRED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/referenced-card-expired-issue"
          },
          "description": {
            "$ref": "#/components/schemas/referenced-card-expired-description"
          }
        }
      },
      "token-expired2": {
        "title": "TOKEN_EXPIRED_RESULT",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/token-expired2-issue"
          },
          "description": {
            "$ref": "#/components/schemas/token-expired2-description"
          }
        }
      },
      "token-id-not-found": {
        "title": "TOKEN_ID_NOT_FOUND",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/token-id-not-found-issue"
          },
          "description": {
            "$ref": "#/components/schemas/token-id-not-found-description"
          }
        }
      },
      "transaction-limit-exceeded1": {
        "title": "TRANSACTION_LIMIT_EXCEEDED_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/transaction-limit-exceeded1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/transaction-limit-exceeded1-description"
          }
        }
      },
      "transaction-receiving-limit-exceeded1": {
        "title": "TRANSACTION_RECEIVING_LIMIT_EXCEEDED_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/transaction-receiving-limit-exceeded1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/transaction-receiving-limit-exceeded1-description"
          }
        }
      },
      "transaction-refused1": {
        "title": "TRANSACTION_REFUSED_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/transaction-refused1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/transaction-refused1-description"
          }
        }
      },
      "order-already-authorized1": {
        "title": "ORDER_ALREADY_AUTHORIZED_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/order-already-authorized1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/order-already-authorized1-description"
          }
        }
      },
      "auth-capture-not-enabled1": {
        "title": "AUTH_CAPTURE_NOT_ENABLED_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/auth-capture-not-enabled1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/auth-capture-not-enabled1-description"
          }
        }
      },
      "amount-cannot-be-specified": {
        "title": "AMOUNT_CANNOT_BE_SPECIFIED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/amount-cannot-be-specified-issue"
          },
          "description": {
            "$ref": "#/components/schemas/amount-cannot-be-specified-description"
          }
        }
      },
      "authorization-amount-exceeded": {
        "title": "AUTHORIZATION_AMOUNT_EXCEEDED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/authorization-amount-exceeded-issue"
          },
          "description": {
            "$ref": "#/components/schemas/authorization-amount-exceeded-description"
          }
        }
      },
      "authorization-currency-mismatch": {
        "title": "AUTHORIZATION_CURRENCY_MISMATCH",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/authorization-currency-mismatch-issue"
          },
          "description": {
            "$ref": "#/components/schemas/authorization-currency-mismatch-description"
          }
        }
      },
      "max-authorization-count-exceeded": {
        "title": "MAX_AUTHORIZATION_COUNT_EXCEEDED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/max-authorization-count-exceeded-issue"
          },
          "description": {
            "$ref": "#/components/schemas/max-authorization-count-exceeded-description"
          }
        }
      },
      "order-completed-or-voided": {
        "title": "ORDER_COMPLETED_OR_VOIDED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/order-completed-or-voided-issue"
          },
          "description": {
            "$ref": "#/components/schemas/order-completed-or-voided-description"
          }
        }
      },
      "order-expired": {
        "title": "ORDER_EXPIRED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/order-expired-issue"
          },
          "description": {
            "$ref": "#/components/schemas/order-expired-description"
          }
        }
      },
      "invalid-pickup-address": {
        "title": "INVALID_PICKUP_ADDRESS",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/invalid-pickup-address-issue"
          },
          "description": {
            "$ref": "#/components/schemas/invalid-pickup-address-description"
          }
        }
      },
      "shipping-address-invalid2": {
        "title": "SHIPPING_ADDRESS_INVALID_RESULT",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/shipping-address-invalid2-issue"
          },
          "description": {
            "$ref": "#/components/schemas/shipping-address-invalid2-description"
          }
        }
      },
      "payment-type-not-supported-for-intent": {
        "title": "PAYMENT_TYPE_NOT_SUPPORTED_FOR_INTENT",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/payment-type-not-supported-for-intent-issue"
          },
          "description": {
            "$ref": "#/components/schemas/payment-type-not-supported-for-intent-description"
          }
        }
      },
      "billing-agreement-id-mismatch": {
        "title": "BILLING_AGREEMENT_ID_MISMATCH",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/billing-agreement-id-mismatch-issue"
          },
          "description": {
            "$ref": "#/components/schemas/billing-agreement-id-mismatch-description"
          }
        }
      },
      "preferred-payment-source-mismatch": {
        "title": "PREFERRED_PAYMENT_SOURCE_MISMATCH",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/preferred-payment-source-mismatch-issue"
          },
          "description": {
            "$ref": "#/components/schemas/preferred-payment-source-mismatch-description"
          }
        }
      },
      "incompatible-parameter-value2": {
        "title": "INCOMPATIBLE_PARAMETER_VALUE_RESULT",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/incompatible-parameter-value2-issue"
          },
          "description": {
            "$ref": "#/components/schemas/incompatible-parameter-value2-description"
          }
        }
      },
      "invalid-previous-transaction-reference1": {
        "title": "INVALID_PREVIOUS_TRANSACTION_REFERENCE_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/invalid-previous-transaction-reference1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/invalid-previous-transaction-reference-error"
          }
        }
      },
      "previous-transaction-reference-has-chargeback1": {
        "title": "CHARGEBACK_ON_PREVIOUS_TRANSACTION_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/previous-transaction-reference-chargeback-issue"
          },
          "description": {
            "$ref": "#/components/schemas/capture-with-chargeback-not-usable-desc"
          }
        }
      },
      "previous-transaction-reference-voided1": {
        "title": "PREVIOUS_TRANSACTION_REFERENCE_VOIDED_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/previous-transaction-reference-voided1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/previous-transaction-reference-voided1-description"
          }
        }
      },
      "payment-source-mismatch1": {
        "title": "PAYMENT_SOURCE_MISMATCH_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/payment-source-mismatch1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/payment-source-mismatch1-description"
          }
        }
      },
      "merchant-initiated-with-security-code1": {
        "title": "MERCHANT_INITIATED_WITH_SECURITY_CODE_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/merchant-initiated-with-security-code1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/merchant-initiated-with-security-code1-description"
          }
        }
      },
      "merchant-initiated-with-authentication-results1": {
        "title": "MERCHANT_AUTH_RESULTS_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/merchant-initiated-auth-with-results"
          },
          "description": {
            "$ref": "#/components/schemas/err-merch-init-auth-results-3ds-invalid"
          }
        }
      },
      "merchant-initiated-with-multiple-purchase-units1": {
        "title": "MULTI_PURCHASE_UNITS_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/merchant-initiated-multiple-purchase-units-issue"
          },
          "description": {
            "$ref": "#/components/schemas/err-merch-init-multi-units-not-supported"
          }
        }
      },
      "return-url-required1": {
        "title": "RETURN_URL_REQUIRED_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/return-url-required1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/return-url-required1-description"
          }
        }
      },
      "cancel-url-required1": {
        "title": "CANCEL_URL_REQUIRED_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/cancel-url-required1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/cancel-url-required1-description"
          }
        }
      },
      "payer-action-required": {
        "title": "PAYER_ACTION_REQUIRED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/payer-action-required-issue"
          },
          "description": {
            "$ref": "#/components/schemas/payer-action-required-description"
          }
        }
      },
      "apple-pay-amount-mismatch2": {
        "title": "APPLE_PAY_AMOUNT_MISMATCH_RESULT",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/apple-pay-amount-mismatch2-issue"
          },
          "description": {
            "$ref": "#/components/schemas/apple-pay-amount-mismatch2-description"
          }
        }
      },
      "card-number-required1": {
        "title": "CARD_NUMBER_REQUIRED_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/card-number-required1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/card-number-required1-description"
          }
        }
      },
      "card-expiry-required1": {
        "title": "CARD_EXPIRY_REQUIRED_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/card-expiry-required1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/card-expiry-required1-description"
          }
        }
      },
      "vault-instruction-required2": {
        "title": "VAULT_INSTRUCTION_REQUIRED_RESULT",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/vault-instruction-required2-issue"
          },
          "description": {
            "$ref": "#/components/schemas/vault-instruction-required2-description"
          }
        }
      },
      "mismatched-vault-id-to-payment-source2": {
        "title": "MISMATCHED_VAULT_ID_TO_PAYMENT_SOURCE_RESULT",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/mismatched-vault-id-to-payment-source2-issue"
          },
          "description": {
            "$ref": "#/components/schemas/mismatched-vault-id-to-payment-source2-description"
          }
        }
      },
      "order-cannot-be-saved": {
        "title": "ORDER_CANNOT_BE_SAVED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/order-cannot-be-saved-issue"
          },
          "description": {
            "$ref": "#/components/schemas/order-cannot-be-saved-description"
          }
        }
      },
      "save-order-not-supported": {
        "title": "SAVE_ORDER_NOT_SUPPORTED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/save-order-not-supported-issue"
          },
          "description": {
            "$ref": "#/components/schemas/save-order-not-supported-description"
          }
        }
      },
      "not-eligible-for-pnref-processing2": {
        "title": "NOT_ELIGIBLE_FOR_PNREF_PROCESSING_RESULT",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/not-eligible-for-pnref-processing2-issue"
          },
          "description": {
            "$ref": "#/components/schemas/not-eligible-for-pnref-processing2-description"
          }
        }
      },
      "not-eligible-for-paypal-transaction-id-processing2": {
        "title": "PAYPAL_ID_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/not-eligible-paypal-tx-id-processing"
          },
          "description": {
            "$ref": "#/components/schemas/paypal-tx-id-processing-permission-needed"
          }
        }
      },
      "paypal-transaction-id-not-found2": {
        "title": "PAYPAL_TRANSACTION_ID_NOT_FOUND_RESULT",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/paypal-transaction-id-not-found2-issue"
          },
          "description": {
            "$ref": "#/components/schemas/paypal-transaction-id-not-found2-description"
          }
        }
      },
      "pnref-not-found2": {
        "title": "PNREF_NOT_FOUND_RESULT",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/pnref-not-found2-issue"
          },
          "description": {
            "$ref": "#/components/schemas/pnref-not-found2-description"
          }
        }
      },
      "invalid-security-code-length2": {
        "title": "INVALID_SECURITY_CODE_LENGTH_RESULT",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/invalid-security-code-length2-issue"
          },
          "description": {
            "$ref": "#/components/schemas/invalid-security-code-length2-description"
          }
        }
      },
      "required-parameter-for-customer-initiated-payment2": {
        "title": "MISSING_PAYMENT_PARAMETER",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/required-param-for-cust-initiated-payment"
          },
          "description": {
            "$ref": "#/components/schemas/ReqParamCustInitPayDesc"
          }
        }
      },
      "orders-capture403-issues": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/orders-capture403-issues-items"
        }
      },
      "orders-capture403-issues-items": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/consent-needed"
          },
          {
            "$ref": "#/components/schemas/not-eligible-for-token-processing1"
          },
          {
            "$ref": "#/components/schemas/permission-denied2"
          },
          {
            "$ref": "#/components/schemas/permission-denied-for-donation-items1"
          }
        ]
      },
      "consent-needed": {
        "title": "CONSENT_NEEDED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/consent-needed-issue"
          },
          "description": {
            "$ref": "#/components/schemas/consent-needed-description"
          }
        }
      },
      "not-eligible-for-token-processing1": {
        "title": "NOT_ELIGIBLE_FOR_TOKEN_PROCESSING_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/not-eligible-for-token-processing1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/not-eligible-for-token-processing1-description"
          }
        }
      },
      "permission-denied2": {
        "title": "PERMISSION_DENIED_RESULT",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/permission-denied2-issue"
          },
          "description": {
            "$ref": "#/components/schemas/permission-denied2-description"
          }
        }
      },
      "permission-denied-for-donation-items1": {
        "title": "PERMISSION_DENIED_FOR_DONATION_ITEMS_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/permission-denied-for-donation-items1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/permission-denied-for-donation-items1-description"
          }
        }
      },
      "orders-capture422-issues": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/orders-capture422-issues-items"
        }
      },
      "orders-capture422-issues-items": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/agreement-already-cancelled2"
          },
          {
            "$ref": "#/components/schemas/billing-agreement-not-found2"
          },
          {
            "$ref": "#/components/schemas/declined-due-to-related-txn1"
          },
          {
            "$ref": "#/components/schemas/missing-previous-reference3"
          },
          {
            "$ref": "#/components/schemas/missing-cryptogram3"
          },
          {
            "$ref": "#/components/schemas/card-brand-not-supported1"
          },
          {
            "$ref": "#/components/schemas/compliance-violation1"
          },
          {
            "$ref": "#/components/schemas/domestic-transaction-required2"
          },
          {
            "$ref": "#/components/schemas/duplicate-invoice-id2"
          },
          {
            "$ref": "#/components/schemas/instrument-declined1"
          },
          {
            "$ref": "#/components/schemas/order-not-approved1"
          },
          {
            "$ref": "#/components/schemas/max-number-of-payment-attempts-exceeded2"
          },
          {
            "$ref": "#/components/schemas/payee-blocked-transaction2"
          },
          {
            "$ref": "#/components/schemas/payee-fx-rate-id-expired3"
          },
          {
            "$ref": "#/components/schemas/payer-account-locked-or-closed2"
          },
          {
            "$ref": "#/components/schemas/payer-account-restricted2"
          },
          {
            "$ref": "#/components/schemas/payer-cannot-pay2"
          },
          {
            "$ref": "#/components/schemas/paypal-transaction-id-expired1"
          },
          {
            "$ref": "#/components/schemas/pnref-expired1"
          },
          {
            "$ref": "#/components/schemas/referenced-card-expired1"
          },
          {
            "$ref": "#/components/schemas/token-id-not-found1"
          },
          {
            "$ref": "#/components/schemas/transaction-limit-exceeded2"
          },
          {
            "$ref": "#/components/schemas/transaction-receiving-limit-exceeded2"
          },
          {
            "$ref": "#/components/schemas/transaction-refused2"
          },
          {
            "$ref": "#/components/schemas/redirect-payer-for-alternate-funding"
          },
          {
            "$ref": "#/components/schemas/order-already-captured1"
          },
          {
            "$ref": "#/components/schemas/transaction-blocked-by-payee1"
          },
          {
            "$ref": "#/components/schemas/auth-capture-not-enabled2"
          },
          {
            "$ref": "#/components/schemas/not-enabled-for-bank-processing"
          },
          {
            "$ref": "#/components/schemas/NotEnabledForCardProcessing"
          },
          {
            "$ref": "#/components/schemas/payee-not-enabled-for-bank-processing"
          },
          {
            "$ref": "#/components/schemas/payee-not-enabled-for-card-processing"
          },
          {
            "$ref": "#/components/schemas/invalid-pickup-address1"
          },
          {
            "$ref": "#/components/schemas/shipping-address-invalid3"
          },
          {
            "$ref": "#/components/schemas/payment-source-not-supported"
          },
          {
            "$ref": "#/components/schemas/order-completion-in-progress"
          },
          {
            "$ref": "#/components/schemas/billing-agreement-id-mismatch1"
          },
          {
            "$ref": "#/components/schemas/preferred-payment-source-mismatch1"
          },
          {
            "$ref": "#/components/schemas/incompatible-parameter-value3"
          },
          {
            "$ref": "#/components/schemas/invalid-previous-transaction-reference2"
          },
          {
            "$ref": "#/components/schemas/previous-transaction-reference-has-chargeback2"
          },
          {
            "$ref": "#/components/schemas/previous-transaction-reference-voided2"
          },
          {
            "$ref": "#/components/schemas/payment-source-mismatch2"
          },
          {
            "$ref": "#/components/schemas/merchant-initiated-with-security-code2"
          },
          {
            "$ref": "#/components/schemas/merchant-initiated-with-authentication-results2"
          },
          {
            "$ref": "#/components/schemas/merchant-initiated-with-multiple-purchase-units2"
          },
          {
            "$ref": "#/components/schemas/return-url-required2"
          },
          {
            "$ref": "#/components/schemas/cancel-url-required2"
          },
          {
            "$ref": "#/components/schemas/setup-error-for-bank1"
          },
          {
            "$ref": "#/components/schemas/bank-not-supported-for-verification1"
          },
          {
            "$ref": "#/components/schemas/payer-action-required1"
          },
          {
            "$ref": "#/components/schemas/apple-pay-amount-mismatch3"
          },
          {
            "$ref": "#/components/schemas/currency-not-supported-for-bank1"
          },
          {
            "$ref": "#/components/schemas/only-one-bank-source-allowed1"
          },
          {
            "$ref": "#/components/schemas/invalid-iban1"
          },
          {
            "$ref": "#/components/schemas/iban-country-not-supported1"
          },
          {
            "$ref": "#/components/schemas/card-number-required2"
          },
          {
            "$ref": "#/components/schemas/card-expiry-required2"
          },
          {
            "$ref": "#/components/schemas/vault-instruction-required3"
          },
          {
            "$ref": "#/components/schemas/mismatched-vault-id-to-payment-source3"
          },
          {
            "$ref": "#/components/schemas/not-eligible-for-pnref-processing3"
          },
          {
            "$ref": "#/components/schemas/not-eligible-for-paypal-transaction-id-processing3"
          },
          {
            "$ref": "#/components/schemas/paypal-transaction-id-not-found3"
          },
          {
            "$ref": "#/components/schemas/pnref-not-found3"
          },
          {
            "$ref": "#/components/schemas/invalid-security-code-length3"
          },
          {
            "$ref": "#/components/schemas/platform-fee-payee-cannot-be-same-as-payer"
          },
          {
            "$ref": "#/components/schemas/required-parameter-for-customer-initiated-payment3"
          },
          {
            "$ref": "#/components/schemas/identifier-not-found"
          }
        ]
      },
      "agreement-already-cancelled2": {
        "title": "AGREEMENT_ALREADY_CANCELLED_RESULT",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/agreement-already-cancelled2-issue"
          },
          "description": {
            "$ref": "#/components/schemas/agreement-already-cancelled2-description"
          }
        }
      },
      "billing-agreement-not-found2": {
        "title": "BILLING_AGREEMENT_NOT_FOUND_RESULT",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/billing-agreement-not-found2-issue"
          },
          "description": {
            "$ref": "#/components/schemas/billing-agreement-not-found2-description"
          }
        }
      },
      "declined-due-to-related-txn1": {
        "title": "DECLINED_DUE_TO_RELATED_TXN_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/declined-due-to-related-txn1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/declined-due-to-related-txn1-description"
          }
        }
      },
      "missing-previous-reference3": {
        "title": "MISSING_PREVIOUS_REFERENCE_ERROR_RESPONSE",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/missing-previous-reference3-issue"
          },
          "description": {
            "$ref": "#/components/schemas/missing-previous-reference3-description"
          }
        }
      },
      "missing-cryptogram3": {
        "title": "MISSING_CRYPTOGRAM_ERROR_RESPONSE",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/missing-cryptogram3-issue"
          },
          "description": {
            "$ref": "#/components/schemas/missing-cryptogram3-description"
          }
        }
      },
      "card-brand-not-supported1": {
        "title": "CARD_BRAND_NOT_SUPPORTED_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/card-brand-not-supported1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/card-brand-not-supported1-description"
          }
        }
      },
      "compliance-violation1": {
        "title": "COMPLIANCE_VIOLATION_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/compliance-violation1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/compliance-violation1-description"
          }
        }
      },
      "domestic-transaction-required2": {
        "title": "DOMESTIC_TRANSACTION_REQUIRED_ERROR_RESPONSE",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/domestic-transaction-required2-issue"
          },
          "description": {
            "$ref": "#/components/schemas/domestic-transaction-required2-description"
          }
        }
      },
      "duplicate-invoice-id2": {
        "title": "DUPLICATE_INVOICE_ID_ERROR_RESPONSE",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/duplicate-invoice-id2-issue"
          },
          "description": {
            "$ref": "#/components/schemas/duplicate-invoice-id2-description"
          }
        }
      },
      "instrument-declined1": {
        "title": "INSTRUMENT_DECLINED_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/instrument-declined1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/instrument-declined1-description"
          }
        }
      },
      "order-not-approved1": {
        "title": "ORDER_NOT_APPROVED_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/order-not-approved1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/order-not-approved1-description"
          }
        }
      },
      "max-number-of-payment-attempts-exceeded2": {
        "title": "MAX_PAYMENT_ATTEMPTS_EXCEEDED_ERROR_RESPONSE",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/max-number-of-payment-attempts-exceeded2-issue"
          },
          "description": {
            "$ref": "#/components/schemas/exceeded-max-payment-attempts-desc"
          }
        }
      },
      "payee-blocked-transaction2": {
        "title": "PAYEE_BLOCKED_TRANSACTION_ERROR_RESPONSE",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/payee-blocked-transaction2-issue"
          },
          "description": {
            "$ref": "#/components/schemas/payee-blocked-transaction2-description"
          }
        }
      },
      "payee-fx-rate-id-expired3": {
        "title": "PAYEE_FX_RATE_ID_EXPIRED_ERROR_RESPONSE",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/payee-fx-rate-id-expired3-issue"
          },
          "description": {
            "$ref": "#/components/schemas/payee-fx-rate-id-expired3-description"
          }
        }
      },
      "payer-account-locked-or-closed2": {
        "title": "PAYER_ACCOUNT_LOCKED_OR_CLOSED_ERROR_RESPONSE",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/payer-account-locked-or-closed2-issue"
          },
          "description": {
            "$ref": "#/components/schemas/payer-account-locked-or-closed2-description"
          }
        }
      },
      "payer-account-restricted2": {
        "title": "PAYER_ACCOUNT_RESTRICTED_ERROR_RESPONSE",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/payer-account-restricted2-issue"
          },
          "description": {
            "$ref": "#/components/schemas/payer-account-restricted2-description"
          }
        }
      },
      "payer-cannot-pay2": {
        "title": "PAYER_CANNOT_PAY_ERROR_RESPONSE",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/payer-cannot-pay2-issue"
          },
          "description": {
            "$ref": "#/components/schemas/payer-cannot-pay2-description"
          }
        }
      },
      "paypal-transaction-id-expired1": {
        "title": "PAYPAL_TRANSACTION_ID_EXPIRED_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/paypal-transaction-id-expired1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/paypal-transaction-id-expired1-description"
          }
        }
      },
      "pnref-expired1": {
        "title": "PNREF_EXPIRED_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/pnref-expired1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/pnref-expired1-description"
          }
        }
      },
      "referenced-card-expired1": {
        "title": "REFERENCED_CARD_EXPIRED_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/referenced-card-expired1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/referenced-card-expired1-description"
          }
        }
      },
      "token-id-not-found1": {
        "title": "TOKEN_ID_NOT_FOUND_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/token-id-not-found1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/token-id-not-found1-description"
          }
        }
      },
      "transaction-limit-exceeded2": {
        "title": "TRANSACTION_LIMIT_EXCEEDED_ERROR_RESPONSE",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/transaction-limit-exceeded2-issue"
          },
          "description": {
            "$ref": "#/components/schemas/transaction-limit-exceeded2-description"
          }
        }
      },
      "transaction-receiving-limit-exceeded2": {
        "title": "TRANSACTION_RECEIVE_LIMIT_EXCEEDED_ERROR_RESPONSE",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/transaction-receiving-limit-exceeded2-issue"
          },
          "description": {
            "$ref": "#/components/schemas/transaction-receiving-limit-exceeded2-description"
          }
        }
      },
      "transaction-refused2": {
        "title": "TRANSACTION_REFUSED_ERROR_RESPONSE",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/transaction-refused2-issue"
          },
          "description": {
            "$ref": "#/components/schemas/transaction-refused2-description"
          }
        }
      },
      "redirect-payer-for-alternate-funding": {
        "title": "REDIRECT_PAYER_FOR_ALTERNATE_FUNDING",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/redirect-payer-for-alternate-funding-issue"
          },
          "description": {
            "$ref": "#/components/schemas/redirect-payer-for-alternate-funding-description"
          }
        }
      },
      "order-already-captured1": {
        "title": "ORDER_ALREADY_CAPTURED_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/order-already-captured1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/order-already-captured1-description"
          }
        }
      },
      "transaction-blocked-by-payee1": {
        "title": "TRANSACTION_BLOCKED_BY_PAYEE_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/transaction-blocked-by-payee1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/transaction-blocked-by-payee1-description"
          }
        }
      },
      "auth-capture-not-enabled2": {
        "title": "AUTH_CAPTURE_NOT_ENABLED_ERROR_RESPONSE",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/auth-capture-not-enabled2-issue"
          },
          "description": {
            "$ref": "#/components/schemas/auth-capture-not-enabled2-description"
          }
        }
      },
      "not-enabled-for-bank-processing": {
        "title": "NOT_ENABLED_FOR_BANK_PROCESSING",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/not-enabled-for-bank-processing-issue"
          },
          "description": {
            "$ref": "#/components/schemas/not-enabled-for-bank-processing-description"
          }
        }
      },
      "payee-not-enabled-for-bank-processing": {
        "title": "PAYEE_NOT_ENABLED_FOR_BANK_PROCESSING",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/payee-not-enabled-for-bank-processing-issue"
          },
          "description": {
            "$ref": "#/components/schemas/payee-not-enabled-for-bank-processing-description"
          }
        }
      },
      "payee-not-enabled-for-card-processing": {
        "title": "PAYEE_NOT_ENABLED_FOR_CARD_PROCESSING",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/payee-not-enabled-for-card-processing-issue"
          },
          "description": {
            "$ref": "#/components/schemas/payee-not-enabled-for-card-processing-description"
          }
        }
      },
      "invalid-pickup-address1": {
        "title": "INVALID_PICKUP_ADDRESS_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/invalid-pickup-address1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/invalid-pickup-address1-description"
          }
        }
      },
      "shipping-address-invalid3": {
        "title": "SHIPPING_ADDRESS_INVALID_ERROR_RESPONSE",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/shipping-address-invalid3-issue"
          },
          "description": {
            "$ref": "#/components/schemas/shipping-address-invalid3-description"
          }
        }
      },
      "payment-source-not-supported": {
        "title": "PAYMENT_SOURCE_NOT_SUPPORTED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/payment-source-not-supported-issue"
          },
          "description": {
            "$ref": "#/components/schemas/payment-source-not-supported-description"
          }
        }
      },
      "order-completion-in-progress": {
        "title": "ORDER_COMPLETION_IN_PROGRESS",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/order-completion-in-progress-issue"
          },
          "description": {
            "$ref": "#/components/schemas/order-completion-in-progress-description"
          }
        }
      },
      "billing-agreement-id-mismatch1": {
        "title": "BILLING_AGREEMENT_ID_MISMATCH_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/billing-agreement-id-mismatch1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/billing-agreement-id-mismatch1-description"
          }
        }
      },
      "preferred-payment-source-mismatch1": {
        "title": "PREFERRED_PAYMENT_SOURCE_MISMATCH_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/preferred-payment-source-mismatch1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/preferred-payment-source-mismatch1-description"
          }
        }
      },
      "incompatible-parameter-value3": {
        "title": "INCOMPATIBLE_PARAMETER_VALUE_ERROR_RESPONSE",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/incompatible-parameter-value3-issue"
          },
          "description": {
            "$ref": "#/components/schemas/incompatible-parameter-value3-description"
          }
        }
      },
      "invalid-previous-transaction-reference2": {
        "title": "INVALID_PREV_TRANS_REF_ERROR_RESPONSE",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/invalid-previous-transaction-reference2-issue"
          },
          "description": {
            "$ref": "#/components/schemas/invalid-previous-tx-reference"
          }
        }
      },
      "previous-transaction-reference-has-chargeback2": {
        "title": "CHARGEBACK_ON_PREVIOUS_TRANS_REF_ERROR_RESPONSE",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/prev-tx-ref-has-chargeback"
          },
          "description": {
            "$ref": "#/components/schemas/capture-with-chargeback-not-usable-error"
          }
        }
      },
      "previous-transaction-reference-voided2": {
        "title": "VOIDED_PREV_TRANS_REF_ERROR_RESPONSE",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/previous-transaction-reference-voided2-issue"
          },
          "description": {
            "$ref": "#/components/schemas/previous-transaction-reference-voided2-description"
          }
        }
      },
      "payment-source-mismatch2": {
        "title": "PAYMENT_SOURCE_MISMATCH_ERROR_RESPONSE",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/payment-source-mismatch2-issue"
          },
          "description": {
            "$ref": "#/components/schemas/payment-source-mismatch2-description"
          }
        }
      },
      "merchant-initiated-with-security-code2": {
        "title": "MERCHANT_INITIATED_SECURITY_CODE_ERROR_RESPONSE",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/merchant-initiated-with-security-code2-issue"
          },
          "description": {
            "$ref": "#/components/schemas/merchant-initiated-with-security-code2-description"
          }
        }
      },
      "merchant-initiated-with-authentication-results2": {
        "title": "MERCHANT_INITIATED_AUTH_RESULTS_ERROR_RESPONSE",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/merchant-initiated-with-auth-results"
          },
          "description": {
            "$ref": "#/components/schemas/err-merch-init-auth-results-3ds-invalid-desc"
          }
        }
      },
      "merchant-initiated-with-multiple-purchase-units2": {
        "title": "MERCHANT_INITIATED_MULTI_PURCHASE_UNITS_ERROR_RESP",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/merch-init-multi-purchase-units"
          },
          "description": {
            "$ref": "#/components/schemas/err-merch-init-multi-units-not-supported-desc"
          }
        }
      },
      "return-url-required2": {
        "title": "RETURN_URL_REQUIRED_ERROR_RESPONSE",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/return-url-required2-issue"
          },
          "description": {
            "$ref": "#/components/schemas/return-url-required2-description"
          }
        }
      },
      "cancel-url-required2": {
        "title": "CANCEL_URL_REQUIRED_ERROR_RESPONSE",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/cancel-url-required2-issue"
          },
          "description": {
            "$ref": "#/components/schemas/cancel-url-required2-description"
          }
        }
      },
      "setup-error-for-bank1": {
        "title": "SETUP_ERROR_FOR_BANK_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/setup-error-for-bank1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/setup-error-for-bank1-description"
          }
        }
      },
      "bank-not-supported-for-verification1": {
        "title": "BANK_NOT_SUPPORTED_FOR_VERIFICATION_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/bank-not-supported-for-verification1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/bank-not-supported-for-verification1-description"
          }
        }
      },
      "payer-action-required1": {
        "title": "PAYER_ACTION_REQUIRED_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/payer-action-required1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/payer-action-required1-description"
          }
        }
      },
      "apple-pay-amount-mismatch3": {
        "title": "APPLE_PAY_AMOUNT_MISMATCH_ERROR_RESPONSE",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/apple-pay-amount-mismatch3-issue"
          },
          "description": {
            "$ref": "#/components/schemas/apple-pay-amount-mismatch3-description"
          }
        }
      },
      "currency-not-supported-for-bank1": {
        "title": "CURRENCY_NOT_SUPPORTED_FOR_BANK_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/currency-not-supported-for-bank1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/currency-not-supported-for-bank1-description"
          }
        }
      },
      "only-one-bank-source-allowed1": {
        "title": "ONLY_ONE_BANK_SOURCE_ALLOWED_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/only-one-bank-source-allowed1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/only-one-bank-source-allowed1-description"
          }
        }
      },
      "invalid-iban1": {
        "title": "INVALID_IBAN_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/invalid-iban1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/invalid-iban1-description"
          }
        }
      },
      "iban-country-not-supported1": {
        "title": "IBAN_COUNTRY_NOT_SUPPORTED_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/iban-country-not-supported1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/iban-country-not-supported1-description"
          }
        }
      },
      "card-number-required2": {
        "title": "CARD_NUMBER_REQUIRED_ERROR_RESPONSE",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/card-number-required2-issue"
          },
          "description": {
            "$ref": "#/components/schemas/card-number-required2-description"
          }
        }
      },
      "card-expiry-required2": {
        "title": "CARD_EXPIRY_REQUIRED_ERROR_RESPONSE",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/card-expiry-required2-issue"
          },
          "description": {
            "$ref": "#/components/schemas/card-expiry-required2-description"
          }
        }
      },
      "vault-instruction-required3": {
        "title": "VAULT_INSTRUCTION_REQUIRED_ERROR_RESPONSE",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/vault-instruction-required3-issue"
          },
          "description": {
            "$ref": "#/components/schemas/vault-instruction-required3-description"
          }
        }
      },
      "mismatched-vault-id-to-payment-source3": {
        "title": "VAULT_ID_PAYMENT_SOURCE_MISMATCH_ERROR_RESPONSE",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/mismatched-vault-id-to-payment-source3-issue"
          },
          "description": {
            "$ref": "#/components/schemas/mismatched-vault-id-to-payment-source3-description"
          }
        }
      },
      "not-eligible-for-pnref-processing3": {
        "title": "NOT_ELIGIBLE_FOR_PNREF_PROCESSING_ERROR_RESPONSE",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/not-eligible-for-pnref-processing3-issue"
          },
          "description": {
            "$ref": "#/components/schemas/not-eligible-for-pnref-processing3-description"
          }
        }
      },
      "not-eligible-for-paypal-transaction-id-processing3": {
        "title": "PAYPAL_ID_PROCESSING_INELIGIBILITY_ERROR_RESPONSE",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/not-eligible-paypal-tx-id-processing-issue"
          },
          "description": {
            "$ref": "#/components/schemas/paypal-tx-id-processing-permission-needed-desc"
          }
        }
      },
      "paypal-transaction-id-not-found3": {
        "title": "PAYPAL_TRANSACTION_ID_NOT_FOUND_ERROR_RESPONSE",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/paypal-transaction-id-not-found3-issue"
          },
          "description": {
            "$ref": "#/components/schemas/paypal-transaction-id-not-found3-description"
          }
        }
      },
      "pnref-not-found3": {
        "title": "PNREF_NOT_FOUND_ERROR_RESPONSE",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/pnref-not-found3-issue"
          },
          "description": {
            "$ref": "#/components/schemas/pnref-not-found3-description"
          }
        }
      },
      "invalid-security-code-length3": {
        "title": "INVALID_SECURITY_CODE_LENGTH_ERROR_RESPONSE",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/invalid-security-code-length3-issue"
          },
          "description": {
            "$ref": "#/components/schemas/invalid-security-code-length3-description"
          }
        }
      },
      "platform-fee-payee-cannot-be-same-as-payer": {
        "title": "PLATFORM_FEE_PAYEE_CANNOT_BE_SAME_AS_PAYER",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/platform-fee-payee-cannot-be-same-as-payer-issue"
          },
          "description": {
            "$ref": "#/components/schemas/payer-cannot-pay-themselves-error"
          }
        }
      },
      "required-parameter-for-customer-initiated-payment3": {
        "title": "MISSING_PARAM_CIP_ERROR_RESP",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/required-param-for-cust-initiated-payment-issue"
          },
          "description": {
            "$ref": "#/components/schemas/ReqParamCustInitPayDesc"
          }
        }
      },
      "identifier-not-found": {
        "title": "IDENTIFIER_NOT_FOUND",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/identifier-not-found-issue"
          },
          "description": {
            "$ref": "#/components/schemas/identifier-not-found-description"
          }
        }
      },
      "shipment-tracker-tracking-number-type": {
        "description": "The type of tracking number.",
        "allOf": [
          {
            "$ref": "#/components/schemas/shipment_tracking_number_type"
          }
        ]
      },
      "shipment-tracker-shipment-date": {
        "description": "The date when the shipment occurred, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).",
        "allOf": [
          {
            "$ref": "#/components/schemas/DateNoTime"
          }
        ]
      },
      "shipment-tracker-last-updated-time": {
        "description": "The date and time when the tracking information was last updated, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).",
        "allOf": [
          {
            "$ref": "#/components/schemas/DateTimeFormat"
          }
        ]
      },
      "order-tracker-request-allof1": {
        "properties": {
          "capture_id": {
            "type": "string",
            "description": "The PayPal capture ID.",
            "minLength": 1,
            "maxLength": 50,
            "pattern": "^[a-zA-Z0-9]*$"
          },
          "notify_payer": {
            "type": "boolean",
            "description": "If true, sends an email notification to the payer of the PayPal transaction. The email contains the tracking information that was uploaded through the API.",
            "default": false
          },
          "items": {
            "$ref": "#/components/schemas/order-tracker-request-allof1-items"
          }
        },
        "required": [
          "capture_id"
        ]
      },
      "order-tracker-request-allof1-items": {
        "type": "array",
        "description": "An array of details of items in the shipment.",
        "items": {
          "$ref": "#/components/schemas/order-tracker-request-allof1-items-items"
        }
      },
      "order-tracker-request-allof1-items-items": {
        "description": "Items in a shipment.",
        "allOf": [
          {
            "$ref": "#/components/schemas/TrackerItem"
          }
        ]
      },
      "orders-track-create403-issues": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/orders-track-create403-issues-items"
        }
      },
      "orders-track-create403-issues-items": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/permission-denied3"
          }
        ]
      },
      "permission-denied3": {
        "title": "PERMISSION_DENIED_ERROR_RESPONSE",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/permission-denied3-issue"
          },
          "description": {
            "$ref": "#/components/schemas/permission-denied3-description"
          }
        }
      },
      "orders-track-create422-issues": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/orders-track-create422-issues-items"
        }
      },
      "orders-track-create422-issues-items": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/capture-status-not-valid"
          },
          {
            "$ref": "#/components/schemas/item-sku-mismatch"
          },
          {
            "$ref": "#/components/schemas/capture-id-not-found"
          },
          {
            "$ref": "#/components/schemas/msp-not-supported"
          }
        ]
      },
      "capture-status-not-valid": {
        "title": "CAPTURE_STATUS_NOT_VALID",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/capture-status-not-valid-issue"
          },
          "description": {
            "$ref": "#/components/schemas/capture-status-not-valid-description"
          }
        }
      },
      "item-sku-mismatch": {
        "title": "ITEM_SKU_MISMATCH",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/item-sku-mismatch-issue"
          },
          "description": {
            "$ref": "#/components/schemas/item-sku-mismatch-description"
          }
        }
      },
      "capture-id-not-found": {
        "title": "CAPTURE_ID_NOT_FOUND",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/capture-id-not-found-issue"
          },
          "description": {
            "$ref": "#/components/schemas/capture-id-not-found-description"
          }
        }
      },
      "msp-not-supported": {
        "title": "MSP_NOT_SUPPORTED",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/msp-not-supported-issue"
          },
          "description": {
            "$ref": "#/components/schemas/msp-not-supported-description"
          }
        }
      },
      "orders-trackers-patch403-issues": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/orders-trackers-patch403-issues-items"
        }
      },
      "orders-trackers-patch403-issues-items": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/permission-denied4"
          }
        ]
      },
      "permission-denied4": {
        "title": "PERMISSION_DENIED_ERROR_RESULT",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/permission-denied4-issue"
          },
          "description": {
            "$ref": "#/components/schemas/permission-denied4-description"
          }
        }
      },
      "orders-trackers-patch404-issues": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/orders-trackers-patch404-issues-items"
        }
      },
      "orders-trackers-patch404-issues-items": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/tracker-id-not-found"
          }
        ]
      },
      "tracker-id-not-found": {
        "title": "TRACKER_ID_NOT_FOUND",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/tracker-id-not-found-issue"
          },
          "description": {
            "$ref": "#/components/schemas/tracker-id-not-found-description"
          }
        }
      },
      "orders-trackers-patch422-issues": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/orders-trackers-patch422-issues-items"
        }
      },
      "orders-trackers-patch422-issues-items": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/invalid-json-pointer-format1"
          },
          {
            "$ref": "#/components/schemas/not-patchable1"
          },
          {
            "$ref": "#/components/schemas/patch-value-required1"
          },
          {
            "$ref": "#/components/schemas/patch-path-required1"
          },
          {
            "$ref": "#/components/schemas/item-sku-mismatch1"
          }
        ]
      },
      "invalid-json-pointer-format1": {
        "title": "INVALID_JSON_POINTER_FORMAT_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/invalid-json-pointer-format1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/invalid-json-pointer-format1-description"
          }
        }
      },
      "not-patchable1": {
        "title": "NOT_PATCHABLE_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/not-patchable1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/not-patchable1-description"
          }
        }
      },
      "patch-value-required1": {
        "title": "PATCH_VALUE_REQUIRED_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/patch-value-required1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/patch-value-required1-description"
          }
        }
      },
      "patch-path-required1": {
        "title": "PATCH_PATH_REQUIRED_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/patch-path-required1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/patch-path-required1-description"
          }
        }
      },
      "item-sku-mismatch1": {
        "title": "ITEM_SKU_MISMATCH_ERROR",
        "properties": {
          "issue": {
            "$ref": "#/components/schemas/item-sku-mismatch1-issue"
          },
          "description": {
            "$ref": "#/components/schemas/item-sku-mismatch1-description"
          }
        }
      },
      "InvalidArrayMaxItemsIssue": {
        "type": "string",
        "enum": [
          "INVALID_ARRAY_MAX_ITEMS"
        ]
      },
      "InvalidArrayMaxItemsDescription": {
        "type": "string",
        "enum": [
          "The number of items in an array parameter is too large."
        ]
      },
      "InvalidArrayMinItemsIssue": {
        "type": "string",
        "enum": [
          "INVALID_ARRAY_MIN_ITEMS"
        ]
      },
      "InvalidArrayMinItemsDescription": {
        "type": "string",
        "enum": [
          "The number of items in an array parameter is too small."
        ]
      },
      "InvalidCountryCodeIssue": {
        "type": "string",
        "enum": [
          "INVALID_COUNTRY_CODE"
        ]
      },
      "InvalidCountryCodeDescription": {
        "type": "string",
        "enum": [
          "Country code is invalid. Please refer to https://developer.paypal.com/api/rest/reference/country-codes/ for a list of supported country codes."
        ]
      },
      "InvalidParameterSyntaxIssue": {
        "type": "string",
        "enum": [
          "INVALID_PARAMETER_SYNTAX"
        ]
      },
      "InvalidParameterSyntaxDescription": {
        "type": "string",
        "enum": [
          "The value of a field does not conform to the expected format."
        ]
      },
      "InvalidStringLengthIssue": {
        "type": "string",
        "enum": [
          "INVALID_STRING_LENGTH"
        ]
      },
      "InvalidStringLengthDescription": {
        "type": "string",
        "enum": [
          "The value of a field is either too short or too long"
        ]
      },
      "InvalidParameterValueIssue": {
        "type": "string",
        "enum": [
          "INVALID_PARAMETER_VALUE"
        ]
      },
      "InvalidParameterValueDescription": {
        "type": "string",
        "enum": [
          "A parameter value is not valid."
        ]
      },
      "MissingRequiredParameterIssue": {
        "type": "string",
        "enum": [
          "MISSING_REQUIRED_PARAMETER"
        ]
      },
      "MissingRequiredParameterDescription": {
        "type": "string",
        "enum": [
          "A required parameter is missing."
        ]
      },
      "NotSupportedIssue": {
        "type": "string",
        "enum": [
          "NOT_SUPPORTED"
        ]
      },
      "NotSupportedDescription": {
        "type": "string",
        "enum": [
          "This field is not currently supported."
        ]
      },
      "PaypalRequestIdRequiredIssue": {
        "type": "string",
        "enum": [
          "PAYPAL_REQUEST_ID_REQUIRED"
        ]
      },
      "PaypalRequestIdRequiredDescription": {
        "type": "string",
        "enum": [
          "A PayPal-Request-Id is required if you are trying to process payment for an Order. Please specify a PayPal-Request-Id or Create the Order without a 'payment_source' specified."
        ]
      },
      "MalformedRequestJsonIssue": {
        "type": "string",
        "enum": [
          "MALFORMED_REQUEST_JSON"
        ]
      },
      "MalformedRequestJsonDescription": {
        "type": "string",
        "enum": [
          "The request JSON is not well formed."
        ]
      },
      "InvalidAccountStatusIssue": {
        "type": "string",
        "enum": [
          "INVALID_ACCOUNT_STATUS"
        ]
      },
      "InvalidAccountStatusDescription": {
        "type": "string",
        "enum": [
          "Account validations failed for the user."
        ]
      },
      "PermissionDeniedIssue": {
        "type": "string",
        "enum": [
          "PERMISSION_DENIED"
        ]
      },
      "PermissionDeniedDescription": {
        "type": "string",
        "enum": [
          "You do not have permission to access or perform operations on this resource."
        ]
      },
      "PayeeAccountNotVerifiedIssue": {
        "type": "string",
        "enum": [
          "PAYEE_ACCOUNT_NOT_VERIFIED"
        ]
      },
      "PayeeAccountNotVerifiedDescription": {
        "type": "string",
        "enum": [
          "Payee has not verified their account with PayPal. The selected payment method requires the recipient to have a verified PayPal account before transactions can be processed on their behalf."
        ]
      },
      "invalid-resource-id-issue": {
        "type": "string",
        "enum": [
          "INVALID_RESOURCE_ID"
        ]
      },
      "invalid-resource-id-description": {
        "type": "string",
        "enum": [
          "Specified resource ID does not exist. Please check the resource ID and try again."
        ]
      },
      "AmountMismatchIssue": {
        "type": "string",
        "enum": [
          "AMOUNT_MISMATCH"
        ]
      },
      "AmountMismatchDescription": {
        "type": "string",
        "enum": [
          "Should equal item_total + tax_total + shipping + handling + insurance - shipping_discount - discount."
        ]
      },
      "CannotBeNegativeIssue": {
        "type": "string",
        "enum": [
          "CANNOT_BE_NEGATIVE"
        ]
      },
      "CannotBeNegativeDescription": {
        "type": "string",
        "enum": [
          "Must be greater than or equal to 0. If the currency supports decimals, only two decimal place precision is supported."
        ]
      },
      "CannotBeZeroOrNegativeIssue": {
        "type": "string",
        "enum": [
          "CANNOT_BE_ZERO_OR_NEGATIVE"
        ]
      },
      "CannotBeZeroOrNegativeDescription": {
        "type": "string",
        "enum": [
          "Must be greater than zero. If the currency supports decimals, only two decimal place precision is supported."
        ]
      },
      "CardExpiredIssue": {
        "type": "string",
        "enum": [
          "CARD_EXPIRED"
        ]
      },
      "CardExpiredDescription": {
        "type": "string",
        "enum": [
          "The card is expired"
        ]
      },
      "MissingPreviousReferenceIssue": {
        "type": "string",
        "enum": [
          "MISSING_PREVIOUS_REFERENCE"
        ]
      },
      "MissingPreviousReferenceDescription": {
        "type": "string",
        "enum": [
          "For Merchant initiated network token transactions, either the payment_source.card.stored_credential.previous_network_transaction_reference or payment_source.card.stored_credential.previous_transaction_reference must be included in the request."
        ]
      },
      "MissingCryptogramIssue": {
        "type": "string",
        "enum": [
          "MISSING_CRYPTOGRAM"
        ]
      },
      "MissingCryptogramDescription": {
        "type": "string",
        "enum": [
          "Cryptogram is mandatory for any customer initiated network token transactions."
        ]
      },
      "CityRequiredIssue": {
        "type": "string",
        "enum": [
          "CITY_REQUIRED"
        ]
      },
      "CityRequiredDescription": {
        "type": "string",
        "enum": [
          "The specified country requires a city (address.admin_area_2)."
        ]
      },
      "DecimalPrecisionIssue": {
        "type": "string",
        "enum": [
          "DECIMAL_PRECISION"
        ]
      },
      "DecimalPrecisionDescription": {
        "type": "string",
        "enum": [
          "If the currency supports decimals, only two decimal place precision is supported."
        ]
      },
      "DonationItemsNotSupportedIssue": {
        "type": "string",
        "enum": [
          "DONATION_ITEMS_NOT_SUPPORTED"
        ]
      },
      "DonationItemsNotSupportedDescription": {
        "type": "string",
        "enum": [
          "If 'purchase_unit' has \"DONATION\" as the 'items.category' then the Order can at most have one purchase_unit. Multiple purchase_units are not supported if either of them have at least one items with category as \"DONATION\"."
        ]
      },
      "DuplicateReferenceIdIssue": {
        "type": "string",
        "enum": [
          "DUPLICATE_REFERENCE_ID"
        ]
      },
      "DuplicateReferenceIdDescription": {
        "type": "string",
        "enum": [
          "`reference_id` must be unique if multiple `purchase_unit` are provided."
        ]
      },
      "InvalidCurrencyCodeIssue": {
        "type": "string",
        "enum": [
          "INVALID_CURRENCY_CODE"
        ]
      },
      "InvalidCurrencyCodeDescription": {
        "type": "string",
        "enum": [
          "Currency code is invalid or is not currently supported. Please refer https://developer.paypal.com/api/rest/reference/currency-codes/ for list of supported currency codes."
        ]
      },
      "InvalidPayerIdIssue": {
        "type": "string",
        "enum": [
          "INVALID_PAYER_ID"
        ]
      },
      "InvalidPayerIdDescription": {
        "type": "string",
        "enum": [
          "The payer ID is not valid."
        ]
      },
      "ItemTotalMismatchIssue": {
        "type": "string",
        "enum": [
          "ITEM_TOTAL_MISMATCH"
        ]
      },
      "ItemTotalMismatchDescription": {
        "type": "string",
        "enum": [
          "Should equal sum of (unit_amount * quantity) across all items for a given purchase_unit."
        ]
      },
      "ItemTotalRequiredIssue": {
        "type": "string",
        "enum": [
          "ITEM_TOTAL_REQUIRED"
        ]
      },
      "ItemTotalRequiredDescription": {
        "type": "string",
        "enum": [
          "If item details are specified (items.unit_amount and items.quantity) corresponding amount.breakdown.item_total is required."
        ]
      },
      "MaxValueExceededIssue": {
        "type": "string",
        "enum": [
          "MAX_VALUE_EXCEEDED"
        ]
      },
      "MaxValueExceededDescription": {
        "type": "string",
        "enum": [
          "Should be less than or equal to 999999999999999.99."
        ]
      },
      "MissingPickupAddressIssue": {
        "type": "string",
        "enum": [
          "MISSING_PICKUP_ADDRESS"
        ]
      },
      "MissingPickupAddressDescription": {
        "type": "string",
        "enum": [
          "A pickup address(`shipping.address`) is required for the provided `shipping.type`."
        ]
      },
      "MultiCurrencyOrderIssue": {
        "type": "string",
        "enum": [
          "MULTI_CURRENCY_ORDER"
        ]
      },
      "MultiCurrencyOrderDescription": {
        "type": "string",
        "enum": [
          "Multiple differing values of currency_code are not supported. Entire Order request must have the same currency_code."
        ]
      },
      "MultipleItemCategoriesIssue": {
        "type": "string",
        "enum": [
          "MULTIPLE_ITEM_CATEGORIES"
        ]
      },
      "MultipleItemCategoriesDescription": {
        "type": "string",
        "enum": [
          "For a given 'purchase_unit' the 'items.category' could be either \"PHYSICAL_GOODS\" and/or \"DIGITAL_GOODS\" or just \"DONATION\".  'items.category' as \"DONATION\" cannot be combined with items with either \"PHYSICAL_GOODS\" or \"DIGITAL_GOODS\"."
        ]
      },
      "MultipleShippingAddressNotSupportedIssue": {
        "type": "string",
        "enum": [
          "MULTIPLE_SHIPPING_ADDRESS_NOT_SUPPORTED"
        ]
      },
      "MultipleShippingAddressNotSupportedDescription": {
        "type": "string",
        "enum": [
          "Multiple shipping addresses are not supported."
        ]
      },
      "MultipleShippingTypeNotSupportedIssue": {
        "type": "string",
        "enum": [
          "MULTIPLE_SHIPPING_TYPE_NOT_SUPPORTED"
        ]
      },
      "MultipleShippingTypeNotSupportedDescription": {
        "type": "string",
        "enum": [
          "Different `shipping.type` are not supported across purchase units."
        ]
      },
      "PayeeAccountInvalidIssue": {
        "type": "string",
        "enum": [
          "PAYEE_ACCOUNT_INVALID"
        ]
      },
      "PayeeAccountInvalidDescription": {
        "type": "string",
        "enum": [
          "Payee account specified is invalid. Please check the `payee.email_address` or `payee.merchant_id` specified and try again. Ensure that either  `payee.merchant_id` or `payee.email_address` is specified."
        ]
      },
      "PayeeAccountLockedOrClosedIssue": {
        "type": "string",
        "enum": [
          "PAYEE_ACCOUNT_LOCKED_OR_CLOSED"
        ]
      },
      "PayeeAccountLockedOrClosedDescription": {
        "type": "string",
        "enum": [
          "The merchant account is locked or closed."
        ]
      },
      "PayeeAccountRestrictedIssue": {
        "type": "string",
        "enum": [
          "PAYEE_ACCOUNT_RESTRICTED"
        ]
      },
      "PayeeAccountRestrictedDescription": {
        "type": "string",
        "enum": [
          "The merchant account is restricted."
        ]
      },
      "PayeePricingTierIdNotEnabledIssue": {
        "type": "string",
        "enum": [
          "PAYEE_PRICING_TIER_ID_NOT_ENABLED"
        ]
      },
      "PayeePricingTierIdNotEnabledDescription": {
        "type": "string",
        "enum": [
          "The API Caller is not enabled to process transactions by specifying a 'payee_pricing_tier_id'. Please work with your Account Manager to enable this option for your account."
        ]
      },
      "InvalidPayeePricingTierIdIssue": {
        "type": "string",
        "enum": [
          "INVALID_PAYEE_PRICING_TIER_ID"
        ]
      },
      "InvalidPayeePricingTierIdDescription": {
        "type": "string",
        "enum": [
          "Please check the value specified or confirm with your Account Manager that the 'payee_pricing_tier_id' specified has been setup for the account."
        ]
      },
      "PayeeFXRateIdExpiredIssue": {
        "type": "string",
        "enum": [
          "PAYEE_FX_RATE_ID_EXPIRED"
        ]
      },
      "PayeeFXRateIdExpiredDescription": {
        "type": "string",
        "enum": [
          "The specified FX Rate ID has expired. Please specify a different FX Rate Id and try the request again. Alternately, remove the FX Rate ID to process the request using the default exchange rate."
        ]
      },
      "PayeeFXRateIdCurrencyMismatchIssue": {
        "type": "string",
        "enum": [
          "PAYEE_FX_RATE_ID_CURRENCY_MISMATCH"
        ]
      },
      "PayeeFXRateIdCurrencyMismatchDescription": {
        "type": "string",
        "enum": [
          "The specified FX Rate ID is for a currency that does not match with the currency of this request. Please specify a different FX Rate ID and try the request again. Alternately, remove the FX Rate ID to process the request using the default exchange rate."
        ]
      },
      "InvalidFXRateIdIssue": {
        "type": "string",
        "enum": [
          "INVALID_FX_RATE_ID"
        ]
      },
      "InvalidFXRateIdDescription": {
        "type": "string",
        "enum": [
          "The specific FX Rate ID is not valid. This could be either because we are not able to look up the FX Rate based on this ID or it could be because the ID belongs to another API Caller."
        ]
      },
      "PlatformFeesNotSupportedIssue": {
        "type": "string",
        "enum": [
          "PLATFORM_FEES_NOT_SUPPORTED"
        ]
      },
      "PlatformFeesNotSupportedDescription": {
        "type": "string",
        "enum": [
          "The API Caller is not enabled to process transactions by specifying 'platform_fees'. Please work with your PayPal Account Manager to enable this option for your account."
        ]
      },
      "InvalidPlatformFeesAccountIssue": {
        "type": "string",
        "enum": [
          "INVALID_PLATFORM_FEES_ACCOUNT"
        ]
      },
      "InvalidPlatformFeesAccountDescription": {
        "type": "string",
        "enum": [
          "The specified platform_fees payee account is either invalid or account setup is incomplete.Please work with your PayPal Account Manager to enable this option for your account."
        ]
      },
      "InvalidPlatformFeesAmountIssue": {
        "type": "string",
        "enum": [
          "INVALID_PLATFORM_FEES_AMOUNT"
        ]
      },
      "InvalidPlatformFeesAmountDescription": {
        "type": "string",
        "enum": [
          "The platform_fees amount cannot be greater than order amount."
        ]
      },
      "PostalCodeRequiredIssue": {
        "type": "string",
        "enum": [
          "POSTAL_CODE_REQUIRED"
        ]
      },
      "PostalCodeRequiredDescription": {
        "type": "string",
        "enum": [
          "The specified country requires a postal code."
        ]
      },
      "ReferenceIdRequiredIssue": {
        "type": "string",
        "enum": [
          "REFERENCE_ID_REQUIRED"
        ]
      },
      "ReferenceIdRequiredDescription": {
        "type": "string",
        "enum": [
          "'reference_id' is required for each 'purchase_unit' if multiple 'purchase_unit' are provided."
        ]
      },
      "TaxTotalMismatchIssue": {
        "type": "string",
        "enum": [
          "TAX_TOTAL_MISMATCH"
        ]
      },
      "TaxTotalMismatchDescription": {
        "type": "string",
        "enum": [
          "Should equal sum of (tax * quantity) across all items for a given purchase_unit."
        ]
      },
      "TaxTotalRequiredIssue": {
        "type": "string",
        "enum": [
          "TAX_TOTAL_REQUIRED"
        ]
      },
      "TaxTotalRequiredDescription": {
        "type": "string",
        "enum": [
          "If item details are specified (items.tax_total and items.quantity) corresponding amount.breakdown.tax_total is required."
        ]
      },
      "UnsupportedIntentIssue": {
        "type": "string",
        "enum": [
          "UNSUPPORTED_INTENT"
        ]
      },
      "UnsupportedIntentDescription": {
        "type": "string",
        "enum": [
          "`intent=AUTHORIZE` is not supported for multiple purchase units. Only `intent=CAPTURE` is supported."
        ]
      },
      "UnsupportedPaymentInstructionIssue": {
        "type": "string",
        "enum": [
          "UNSUPPORTED_PAYMENT_INSTRUCTION"
        ]
      },
      "UnsupportedPaymentInstructionDescription": {
        "type": "string",
        "enum": [
          "You must provide the payment instruction when you capture an authorized payment for `intent=AUTHORIZE`. For details, see <a href=\"/docs/api/payments/v2/#authorizations_capture\">Capture authorization</a>. For `intent=CAPTURE`, send the payment instruction when you create the order."
        ]
      },
      "ShippingTypeNotSupportedForClientIssue": {
        "type": "string",
        "enum": [
          "SHIPPING_TYPE_NOT_SUPPORTED_FOR_CLIENT"
        ]
      },
      "ShippingTypeNotSupportedForClientDescription": {
        "type": "string",
        "enum": [
          "The API Caller account is not setup to be able to support a `shipping.type`=`PICKUP_IN_PERSON`. This feature is only supported for <a href=\"https://www.paypal.com/us/business/platforms-and-marketplaces\">PayPal Commerce Platform for Platforms and Marketplaces</a>."
        ]
      },
      "UnsupportedShippingTypeIssue": {
        "type": "string",
        "enum": [
          "UNSUPPORTED_SHIPPING_TYPE"
        ]
      },
      "UnsupportedShippingTypeDescription": {
        "type": "string",
        "enum": [
          "The provided `shipping.type` is only supported for `application_context.shipping_preference`=`SET_PROVIDED_ADDRESS` or `NO_SHIPPING`."
        ]
      },
      "ShippingOptionNotSelectedIssue": {
        "type": "string",
        "enum": [
          "SHIPPING_OPTION_NOT_SELECTED"
        ]
      },
      "ShippingOptionNotSelectedDescription": {
        "type": "string",
        "enum": [
          "At least one of the shipping.option should be set to 'selected = true'."
        ]
      },
      "MultipleShippingOptionSelectedIssue": {
        "type": "string",
        "enum": [
          "MULTIPLE_SHIPPING_OPTION_SELECTED"
        ]
      },
      "MultipleShippingOptionSelectedDescription": {
        "type": "string",
        "enum": [
          "Only one shipping.option can be set to 'selected = true'."
        ]
      },
      "PreferredShippingOptionAmountMismatchIssue": {
        "type": "string",
        "enum": [
          "PREFERRED_SHIPPING_OPTION_AMOUNT_MISMATCH"
        ]
      },
      "PreferredShippingOptionAmountMismatchDescription": {
        "type": "string",
        "enum": [
          "The amount provided in the preferred shipping option should match the amount provided in amount breakdown"
        ]
      },
      "AgreementAlreadyCancelledIssue": {
        "type": "string",
        "enum": [
          "AGREEMENT_ALREADY_CANCELLED"
        ]
      },
      "AgreementAlreadyCancelledDescription": {
        "type": "string",
        "enum": [
          "The requested agreement is already canceled."
        ]
      },
      "BillingAgreementNotFoundIssue": {
        "type": "string",
        "enum": [
          "BILLING_AGREEMENT_NOT_FOUND"
        ]
      },
      "BillingAgreementNotFoundDescription": {
        "type": "string",
        "enum": [
          "The requested Billing Agreement token was not found."
        ]
      },
      "ComplianceViolationIssue": {
        "type": "string",
        "enum": [
          "COMPLIANCE_VIOLATION"
        ]
      },
      "ComplianceViolationDescription": {
        "type": "string",
        "enum": [
          "Transaction is declined due to compliance violation."
        ]
      },
      "DomesticTransactionRequiredIssue": {
        "type": "string",
        "enum": [
          "DOMESTIC_TRANSACTION_REQUIRED"
        ]
      },
      "DomesticTransactionRequiredDescription": {
        "type": "string",
        "enum": [
          "This transaction requires the payee and payer to be resident in the same country, a domestic transaction is required to create this payment."
        ]
      },
      "DuplicateInvoiceIdIssue": {
        "type": "string",
        "enum": [
          "DUPLICATE_INVOICE_ID"
        ]
      },
      "DuplicateInvoiceIdDescription": {
        "type": "string",
        "enum": [
          "Duplicate Invoice ID detected. To avoid a potential duplicate transaction your account setting requires that Invoice Id be unique for each transaction."
        ]
      },
      "InstrumentDeclinedIssue": {
        "type": "string",
        "enum": [
          "INSTRUMENT_DECLINED"
        ]
      },
      "InstrumentDeclinedDescription": {
        "type": "string",
        "enum": [
          "The instrument presented  was either declined by the processor or bank, or it can't be used for this payment."
        ]
      },
      "MaxNumberOfPaymentAttemptsExceededIssue": {
        "type": "string",
        "enum": [
          "MAX_NUMBER_OF_PAYMENT_ATTEMPTS_EXCEEDED"
        ]
      },
      "ExceededMaxPaymentAttempts": {
        "type": "string",
        "enum": [
          "You have exceeded the maximum number of payment attempts."
        ]
      },
      "PayeeBlockedTransactionIssue": {
        "type": "string",
        "enum": [
          "PAYEE_BLOCKED_TRANSACTION"
        ]
      },
      "PayeeBlockedTransactionDescription": {
        "type": "string",
        "enum": [
          "The Fraud settings for this seller are such that this payment cannot be executed."
        ]
      },
      "PayerAccountLockedOrClosedIssue": {
        "type": "string",
        "enum": [
          "PAYER_ACCOUNT_LOCKED_OR_CLOSED"
        ]
      },
      "PayerAccountLockedOrClosedDescription": {
        "type": "string",
        "enum": [
          "The payer account cannot be used for this transaction."
        ]
      },
      "PayerAccountRestrictedIssue": {
        "type": "string",
        "enum": [
          "PAYER_ACCOUNT_RESTRICTED"
        ]
      },
      "PayerAccountRestrictedDescription": {
        "type": "string",
        "enum": [
          "PAYER_ACCOUNT_RESTRICTED"
        ]
      },
      "PayerCannotPayIssue": {
        "type": "string",
        "enum": [
          "PAYER_CANNOT_PAY"
        ]
      },
      "PayerCannotPayDescription": {
        "type": "string",
        "enum": [
          "Combination of payer and payee settings mean that this buyer cannot pay this seller."
        ]
      },
      "TransactionBlockedByPayeeIssue": {
        "type": "string",
        "enum": [
          "TRANSACTION_BLOCKED_BY_PAYEE"
        ]
      },
      "TransactionBlockedByPayeeDescription": {
        "type": "string",
        "enum": [
          "Transaction blocked by Payee’s Fraud Protection settings."
        ]
      },
      "TransactionLimitExceededIssue": {
        "type": "string",
        "enum": [
          "TRANSACTION_LIMIT_EXCEEDED"
        ]
      },
      "TransactionLimitExceededDescription": {
        "type": "string",
        "enum": [
          "Total payment amount exceeded transaction limit."
        ]
      },
      "TransactionReceivingLimitExceededIssue": {
        "type": "string",
        "enum": [
          "TRANSACTION_RECEIVING_LIMIT_EXCEEDED"
        ]
      },
      "TransactionReceivingLimitExceededDescription": {
        "type": "string",
        "enum": [
          "The transaction exceeds the receiver's receiving limit."
        ]
      },
      "TransactionRefusedIssue": {
        "type": "string",
        "enum": [
          "TRANSACTION_REFUSED"
        ]
      },
      "TransactionRefusedDescription": {
        "type": "string",
        "enum": [
          "The request was refused."
        ]
      },
      "AuthCaptureNotEnabledIssue": {
        "type": "string",
        "enum": [
          "AUTH_CAPTURE_NOT_ENABLED"
        ]
      },
      "AuthCaptureNotEnabledDescription": {
        "type": "string",
        "enum": [
          "Authorization and Capture feature is not enabled for the merchant. Make sure that the recipient of the funds is a verified business account."
        ]
      },
      "UnsupportedProcessingInstructionIssue": {
        "type": "string",
        "enum": [
          "UNSUPPORTED_PROCESSING_INSTRUCTION"
        ]
      },
      "UnsupportedProcessingInstructionDescription": {
        "type": "string",
        "enum": [
          "The specified processing_instruction is not supported for the given payment_source. Please refer to https://developer.paypal.com/api/orders/v2/#definition-processing_instruction for the list of payment_source that can be specified with this value."
        ]
      },
      "OrderCompleteOnPaymentApprovalIssue": {
        "type": "string",
        "enum": [
          "ORDER_COMPLETE_ON_PAYMENT_APPROVAL"
        ]
      },
      "OrderCompleteOnPaymentApprovalDescription": {
        "type": "string",
        "enum": [
          "A processing_instruction of `ORDER_COMPLETE_ON_PAYMENT_APPROVAL` is required for the specified payment_source. Please refer to the integration guide https://developer.paypal.com/docs/limited-release/alternative-payment-methods-with-orders/ for more details"
        ]
      },
      "InvalidExpiryDateIssue": {
        "type": "string",
        "enum": [
          "INVALID_EXPIRY_DATE"
        ]
      },
      "InvalidExpiryDateDescription": {
        "type": "string",
        "enum": [
          "Expiry date is invalid. Expiry date should be a date in future and within the threshold for the payment source."
        ]
      },
      "IncompatibleParameterValueIssue": {
        "type": "string",
        "enum": [
          "INCOMPATIBLE_PARAMETER_VALUE"
        ]
      },
      "IncompatibleParameterValueDescription": {
        "type": "string",
        "enum": [
          "The value of the field is incompatible/redundant with other fields in the order."
        ]
      },
      "InvalidPreviousTransactionReferenceIssue": {
        "type": "string",
        "enum": [
          "INVALID_PREVIOUS_TRANSACTION_REFERENCE"
        ]
      },
      "InvalidPreviousTransactionReferenceDescription": {
        "type": "string",
        "enum": [
          "The authorization or capture referenced by `previous_transaction_reference` is not valid. This could be either because the previous_transaction_reference is not found or doesn't belong to the payee. Please use a valid `previous_transaction_reference`."
        ]
      },
      "PreviousTransactionReferenceChargebackIssue": {
        "type": "string",
        "enum": [
          "PREVIOUS_TRANSACTION_REFERENCE_HAS_CHARGEBACK"
        ]
      },
      "PrevTransRefChargebackDesc": {
        "type": "string",
        "enum": [
          "The capture referenced by `previous_transaction_reference` has a chargeback and hence cannot be used for this order. Please use a `previous_transaction_reference` which does not have a chargeback."
        ]
      },
      "PreviousTransactionReferenceVoidedIssue": {
        "type": "string",
        "enum": [
          "PREVIOUS_TRANSACTION_REFERENCE_VOIDED"
        ]
      },
      "PreviousTransactionReferenceVoidedDescription": {
        "type": "string",
        "enum": [
          "The status of authorization referenced by `previous_transaction_reference` is `VOIDED` and hence cannot be used for this order. Please use a `previous_transaction_reference` whose status is not `VOIDED`."
        ]
      },
      "PaymentSourceMismatchIssue": {
        "type": "string",
        "enum": [
          "PAYMENT_SOURCE_MISMATCH"
        ]
      },
      "PaymentSourceMismatchDescription": {
        "type": "string",
        "enum": [
          "The `payment_source` in the request must match the `payment_source` used for the authorization or capture referenced by `previous_transaction_reference`. Please use `previous_transaction_reference` whose `payment_source` matches with the `payment_source` specified in the order."
        ]
      },
      "MerchantInitiatedWithSecurityCodeIssue": {
        "type": "string",
        "enum": [
          "MERCHANT_INITIATED_WITH_SECURITY_CODE"
        ]
      },
      "MerchantInitiatedWithSecurityCodeDescription": {
        "type": "string",
        "enum": [
          "`stored_payment_source.payment_initiator` = `MERCHANT` is not supported if `payment_source.card.security_code` is present in the order. `security_code` can be present in the order only when customer is the payment initiator. It is semantically incorrect to perform a merchant initiated payment with `security_code` is the order."
        ]
      },
      "MerchantInitiatedAuthenticationResults": {
        "type": "string",
        "enum": [
          "MERCHANT_INITIATED_WITH_AUTHENTICATION_RESULTS"
        ]
      },
      "MerchInitAuthResultsDesc": {
        "type": "string",
        "enum": [
          "`stored_payment_source.payment_initiator` = `MERCHANT` is not supported if 3D-Secure authentication results are present in the order. 3D-Secure authentication results can be present in the order only when customer is the payment initiator. It is semantically incorrect to perform a merchant initiated payment with 3D-Secure authentication results is the order."
        ]
      },
      "MerchantInitiatedMultiplePurchaseUnits": {
        "type": "string",
        "enum": [
          "MERCHANT_INITIATED_WITH_MULTIPLE_PURCHASE_UNITS"
        ]
      },
      "MerchInitMultPurchUnitsDesc": {
        "type": "string",
        "enum": [
          "`stored_payment_source.payment_initiator` = `MERCHANT` is not supported if more than one purchase_unit is present in the Order. Merchant initiated payments are not supported from orders with more than one purchase_unit. Please retry the request with multiple Order requests (one for each purchase_unit)."
        ]
      },
      "PaymentSourceInfoCannotBeVerifiedIssue": {
        "type": "string",
        "enum": [
          "PAYMENT_SOURCE_INFO_CANNOT_BE_VERIFIED"
        ]
      },
      "PaymentSourceInfoCannotBeVerifiedDescription": {
        "type": "string",
        "enum": [
          "The combination of the payment_source name, billing address, shipping name and shipping address could not be verified. Please correct this information and try again by creating a new order."
        ]
      },
      "PaymentSourceDeclinedByProcessorIssue": {
        "type": "string",
        "enum": [
          "PAYMENT_SOURCE_DECLINED_BY_PROCESSOR"
        ]
      },
      "PaymentSourceDeclinedByProcessorDescription": {
        "type": "string",
        "enum": [
          "The provided payment source is declined by the processor. Please try again with a different payment source by creating a new order."
        ]
      },
      "PaymentSourceCannotBeUsedIssue": {
        "type": "string",
        "enum": [
          "PAYMENT_SOURCE_CANNOT_BE_USED"
        ]
      },
      "PaymentSourceCannotBeUsedDescription": {
        "type": "string",
        "enum": [
          "The provided payment source cannot be used to pay for the order. Please try again with a different payment source by creating a new order."
        ]
      },
      "NotEnabledForApplePayIssue": {
        "type": "string",
        "enum": [
          "NOT_ENABLED_FOR_APPLE_PAY"
        ]
      },
      "NotEnabledForApplePayDescription": {
        "type": "string",
        "enum": [
          "The 'API caller' and/or 'payee' is not setup to be able to process apple pay. Please contact your Account Manager."
        ]
      },
      "NotEnabledForGooglePayIssue": {
        "type": "string",
        "enum": [
          "NOT_ENABLED_FOR_GOOGLE_PAY"
        ]
      },
      "NotEnabledForGooglePayDescription": {
        "type": "string",
        "enum": [
          "The 'API caller' and/or 'payee' is not setup to be able to process google pay. Please contact your Account Manager."
        ]
      },
      "ApplePayAmountMismatchIssue": {
        "type": "string",
        "enum": [
          "APPLE_PAY_AMOUNT_MISMATCH"
        ]
      },
      "ApplePayAmountMismatchDescription": {
        "type": "string",
        "enum": [
          "The 'amount' specified in the Order should match the amount that was viewed and authorized by the payer/buyer on Apple Pay. If the amount has changed, please redirect the buyer to authorize the order again via Apple Pay."
        ]
      },
      "BillingAddressInvalidIssue": {
        "type": "string",
        "enum": [
          "BILLING_ADDRESS_INVALID"
        ]
      },
      "BillingAddressInvalidDescription": {
        "type": "string",
        "enum": [
          "Provided billing address is invalid."
        ]
      },
      "ShippingAddressInvalidIssue": {
        "type": "string",
        "enum": [
          "SHIPPING_ADDRESS_INVALID"
        ]
      },
      "ShippingAddressInvalidDescription": {
        "type": "string",
        "enum": [
          "Provided shipping address is invalid."
        ]
      },
      "VaultInstructionDuplicatedIssue": {
        "type": "string",
        "enum": [
          "VAULT_INSTRUCTION_DUPLICATED"
        ]
      },
      "VaultInstructionDuplicatedDescription": {
        "type": "string",
        "enum": [
          "Only one vault instruction is allowed. Please use `vault.store_in_vault` to provide vault instruction."
        ]
      },
      "VaultInstructionRequiredIssue": {
        "type": "string",
        "enum": [
          "VAULT_INSTRUCTION_REQUIRED"
        ]
      },
      "VaultInstructionRequiredDescription": {
        "type": "string",
        "enum": [
          "Vault instruction is required. Please use `vault.store_in_vault` to provide vault instruction."
        ]
      },
      "MismatchedVaultIdToPaymentSourceIssue": {
        "type": "string",
        "enum": [
          "MISMATCHED_VAULT_ID_TO_PAYMENT_SOURCE"
        ]
      },
      "MismatchedVaultIdToPaymentSourceDescription": {
        "type": "string",
        "enum": [
          "The vault_id does not match the payment_source provided. Please verify that the vault_id token used refers to the matching payment_source and try again. For example, a PayPal token cannot be passed in the vault_id field in the payment_source.card object."
        ]
      },
      "CryptogramRequiredIssue": {
        "type": "string",
        "enum": [
          "CRYPTOGRAM_REQUIRED"
        ]
      },
      "CryptogramRequiredDescription": {
        "type": "string",
        "enum": [
          "Cryptogram is required if authentication method is CRYPTOGRAM 3DS."
        ]
      },
      "EMVDataRequiredIssue": {
        "type": "string",
        "enum": [
          "EMV_DATA_REQUIRED"
        ]
      },
      "EMVDataRequiredDescription": {
        "type": "string",
        "enum": [
          "EMV Data is required if authentication method is EMV."
        ]
      },
      "NotEligibleForPnrefProcessingIssue": {
        "type": "string",
        "enum": [
          "NOT_ELIGIBLE_FOR_PNREF_PROCESSING"
        ]
      },
      "NotEligibleForPnrefProcessingDescription": {
        "type": "string",
        "enum": [
          "API caller is not enabled to process payments with the `pnref`. Please contact customer support to request permissions to process transactions with PNREF."
        ]
      },
      "NotEligibleForPaypalTransactionIdProcessingIssue": {
        "type": "string",
        "enum": [
          "NOT_ELIGIBLE_FOR_PAYPAL_TRANSACTION_ID_PROCESSING"
        ]
      },
      "NotEligiblePaypalTransIdProcessingDesc": {
        "type": "string",
        "enum": [
          "API caller is not enable to process payments using `paypal_transaction_id`. Please contact customer support to request permissions to process transactions with PayPal transaction ID."
        ]
      },
      "PaypalTransactionIdNotFoundIssue": {
        "type": "string",
        "enum": [
          "PAYPAL_TRANSACTION_ID_NOT_FOUND"
        ]
      },
      "PaypalTransactionIdNotFoundDescription": {
        "type": "string",
        "enum": [
          "Specified `paypal_transaction_id` was not found. Verify the value and try the request again."
        ]
      },
      "PnrefNotFoundIssue": {
        "type": "string",
        "enum": [
          "PNREF_NOT_FOUND"
        ]
      },
      "PnrefNotFoundDescription": {
        "type": "string",
        "enum": [
          "Specified `pnref` was not found. Verify the value and try the request again."
        ]
      },
      "InvalidSecurityCodeLengthIssue": {
        "type": "string",
        "enum": [
          "INVALID_SECURITY_CODE_LENGTH"
        ]
      },
      "InvalidSecurityCodeLengthDescription": {
        "type": "string",
        "enum": [
          "The security_code length is invalid for the specified card brand."
        ]
      },
      "NotEnabledToVaultPaymentSourceIssue": {
        "type": "string",
        "enum": [
          "NOT_ENABLED_TO_VAULT_PAYMENT_SOURCE"
        ]
      },
      "NotEnabledToVaultPaymentSourceDescription": {
        "type": "string",
        "enum": [
          "The API caller or the merchant on whose behalf the API call is initiated is not allowed to vault the given source. Please contact PayPal customer support for assistance."
        ]
      },
      "RequiredParameterForCustomerInitiatedPaymentIssue": {
        "type": "string",
        "enum": [
          "REQUIRED_PARAMETER_FOR_CUSTOMER_INITIATED_PAYMENT"
        ]
      },
      "ReqParamCustInitPayDesc": {
        "type": "string",
        "enum": [
          "This parameter is required when the customer is present. If the customer is not present, indicate so by sending payment_initiator=`MERCHANT`. For details, see <a href=\"https://developer.paypal.com/docs/api/orders/v2/#definition-card_stored_credential\">Stored Credential</a>."
        ]
      },
      "TokenExpiredIssue": {
        "type": "string",
        "enum": [
          "TOKEN_EXPIRED"
        ]
      },
      "TokenExpiredDescription": {
        "type": "string",
        "enum": [
          "The token is expired and cannot be used for payment."
        ]
      },
      "InvalidGooglePayTokenIssue": {
        "type": "string",
        "enum": [
          "INVALID_GOOGLE_PAY_TOKEN"
        ]
      },
      "InvalidGooglePayTokenDescription": {
        "type": "string",
        "enum": [
          "The google pay token is invalid. PayPal was not able to decrypt the googlepay token or PayPal was not able to find the necessary data in the token after decryption."
        ]
      },
      "GooglePayGatewayMerchantIdMismatchIssue": {
        "type": "string",
        "enum": [
          "GOOGLE_PAY_GATEWAY_MERCHANT_ID_MISMATCH"
        ]
      },
      "invalid-google-pay-merchant-id": {
        "type": "string",
        "enum": [
          "The gateway merchant ID in Google Pay token is not valid. This could be because the gateway merchant Id that was authorized by payer/buyer on Google Pay does not match with the API caller of the order."
        ]
      },
      "one-of-parameters-required-issue": {
        "type": "string",
        "enum": [
          "ONE_OF_PARAMETERS_REQUIRED"
        ]
      },
      "one-of-parameters-required-description": {
        "type": "string",
        "enum": [
          "One or more field is required to continue with this request."
        ]
      },
      "alias-declined-by-processor-issue": {
        "type": "string",
        "enum": [
          "ALIAS_DECLINED_BY_PROCESSOR"
        ]
      },
      "alias-declined-by-processor-description": {
        "type": "string",
        "enum": [
          "The provided alias was declined by the processor. Please create a new order with a different alias_key and/or alias_label and try again."
        ]
      },
      "blik-one-click-missing-required-parameter-issue": {
        "type": "string",
        "enum": [
          "BLIK_ONE_CLICK_MISSING_REQUIRED_PARAMETER"
        ]
      },
      "one-click-first-transaction-params": {
        "type": "string",
        "enum": [
          "Blik's one_click flow requires one_click.auth_code and one_click.alias_label parameters for the buyer's first transaction. For all subsequent transactions,only the one_click.alias_key parameter is required."
        ]
      },
      "BadRequestName": {
        "type": "string",
        "enum": [
          "INVALID_REQUEST"
        ]
      },
      "BadRequestMessage": {
        "type": "string",
        "enum": [
          "Request is not well-formed, syntactically incorrect, or violates schema."
        ]
      },
      "UnauthorizedRequestName": {
        "type": "string",
        "enum": [
          "AUTHENTICATION_FAILURE"
        ]
      },
      "UnauthorizedRequestMessage": {
        "type": "string",
        "enum": [
          "Authentication failed due to missing authorization header, or invalid authentication credentials."
        ]
      },
      "ForbiddenRequestName": {
        "type": "string",
        "enum": [
          "NOT_AUTHORIZED"
        ]
      },
      "ForbiddenRequestMessage": {
        "type": "string",
        "enum": [
          "Authorization failed due to insufficient permissions."
        ]
      },
      "ResourceNotFoundName": {
        "type": "string",
        "enum": [
          "RESOURCE_NOT_FOUND"
        ]
      },
      "ResourceNotFoundMessage": {
        "type": "string",
        "enum": [
          "The specified resource does not exist."
        ]
      },
      "error409-name": {
        "type": "string",
        "enum": [
          "RESOURCE_CONFLICT"
        ]
      },
      "error409-message": {
        "type": "string",
        "enum": [
          "The server has detected a conflict while processing this request."
        ]
      },
      "error415-name": {
        "type": "string",
        "enum": [
          "UNSUPPORTED_MEDIA_TYPE"
        ]
      },
      "error415-message": {
        "type": "string",
        "enum": [
          "The server does not support the request payload's media type."
        ]
      },
      "UnprocessableRequestName": {
        "type": "string",
        "enum": [
          "UNPROCESSABLE_ENTITY"
        ]
      },
      "UnprocessableRequestmessage": {
        "type": "string",
        "enum": [
          "The requested action could not be performed, semantically incorrect, or failed business validation."
        ]
      },
      "InternalServerErrorName": {
        "type": "string",
        "enum": [
          "INTERNAL_SERVER_ERROR"
        ]
      },
      "InternalServerErrorMessage": {
        "type": "string",
        "enum": [
          "An internal server error occurred."
        ]
      },
      "InternalServerErrorInformationLink": {
        "type": "string",
        "description": "The information link, or URI, that shows detailed information about this error for the developer.",
        "enum": [
          "https://developer.paypal.com/api/orders/v2/#error-INTERNAL_SERVER_ERROR"
        ],
        "readOnly": true
      },
      "error503-name": {
        "type": "string",
        "enum": [
          "SERVICE_UNAVAILABLE"
        ]
      },
      "error503-message": {
        "type": "string",
        "enum": [
          "Service Unavailable."
        ]
      },
      "NotEnabledForCardProcessingIssue": {
        "type": "string",
        "enum": [
          "NOT_ENABLED_FOR_CARD_PROCESSING"
        ]
      },
      "ShippingOptionNotSupportedIssue": {
        "type": "string",
        "enum": [
          "SHIPPING_OPTIONS_NOT_SUPPORTED"
        ]
      },
      "ShippingOptionNotSupportedDescription": {
        "type": "string",
        "enum": [
          "Shipping options are not supported when `shipping.type` is specified or when 'application_context.shipping_preference' is set as 'NO_SHIPPING' or 'SET_PROVIDED_ADDRESS'."
        ]
      },
      "TaxIdType": {
        "type": "string",
        "description": "The customer's tax ID type.",
        "minLength": 1,
        "maxLength": 14,
        "pattern": "^[A-Z0-9_]+$",
        "enum": [
          "BR_CPF",
          "BR_CNPJ"
        ]
      },
      "ItemCategory": {
        "type": "string",
        "description": "The item category type.",
        "minLength": 1,
        "maxLength": 20,
        "enum": [
          "DIGITAL_GOODS",
          "PHYSICAL_GOODS",
          "DONATION"
        ]
      },
      "ShippingType": {
        "description": "The method by which the payer wants to get their items from the payee e.g shipping, in-person pickup. Either type or options but not both may be present.",
        "type": "string",
        "minLength": 1,
        "maxLength": 255,
        "pattern": "^[0-9A-Z_]+$",
        "enum": [
          "SHIPPING",
          "PICKUP_IN_PERSON"
        ]
      },
      "TokenType": {
        "type": "string",
        "description": "The tokenization method that generated the ID.",
        "minLength": 1,
        "maxLength": 255,
        "pattern": "^[0-9A-Z_-]+$",
        "enum": [
          "BILLING_AGREEMENT"
        ]
      },
      "BillingAgreementPattern": {
        "type": "string",
        "description": "Expected business/pricing model for the billing agreement.",
        "minLength": 1,
        "maxLength": 30,
        "enum": [
          "IMMEDIATE",
          "DEFERRED",
          "RECURRING_PREPAID",
          "RECURRING_POSTPAID",
          "THRESHOLD_PREPAID",
          "THRESHOLD_POSTPAID"
        ]
      },
      "UsageType": {
        "type": "string",
        "description": "The usage type associated with the PayPal payment token.",
        "minLength": 1,
        "maxLength": 255,
        "pattern": "^[0-9A-Z_]+$",
        "enum": [
          "MERCHANT",
          "PLATFORM"
        ]
      },
      "CustomerType": {
        "type": "string",
        "description": "The customer type associated with the PayPal payment token. This is to indicate whether the customer acting on the merchant / platform is either a business or a consumer.",
        "minLength": 1,
        "maxLength": 255,
        "pattern": "^[0-9A-Z_]+$",
        "default": "CONSUMER",
        "enum": [
          "CONSUMER",
          "BUSINESS"
        ]
      },
      "ShippingPreference": {
        "type": "string",
        "description": "The location from which the shipping address is derived.",
        "minLength": 1,
        "maxLength": 24,
        "pattern": "^[A-Z_]+$",
        "default": "GET_FROM_FILE",
        "example": "SET_PROVIDED_ADDRESS",
        "enum": [
          "GET_FROM_FILE",
          "NO_SHIPPING",
          "SET_PROVIDED_ADDRESS"
        ]
      },
      "LandingPageType": {
        "type": "string",
        "description": "The type of landing page to show on the PayPal site for customer checkout.",
        "default": "NO_PREFERENCE",
        "minLength": 1,
        "maxLength": 13,
        "pattern": "^[0-9A-Z_]+$",
        "example": "LOGIN",
        "enum": [
          "LOGIN",
          "GUEST_CHECKOUT",
          "NO_PREFERENCE"
        ]
      },
      "UserAction": {
        "type": "string",
        "description": "Configures a <strong>Continue</strong> or <strong>Pay Now</strong> checkout flow.",
        "default": "CONTINUE",
        "minLength": 1,
        "maxLength": 8,
        "pattern": "^[0-9A-Z_]+$",
        "example": "PAY_NOW",
        "enum": [
          "CONTINUE",
          "PAY_NOW"
        ]
      },
      "MerchantPreferredPaymentMethods": {
        "type": "string",
        "description": "The merchant-preferred payment methods.",
        "minLength": 1,
        "maxLength": 255,
        "pattern": "^[0-9A-Z_]+$",
        "default": "UNRESTRICTED",
        "example": "IMMEDIATE_PAYMENT_REQUIRED",
        "enum": [
          "UNRESTRICTED",
          "IMMEDIATE_PAYMENT_REQUIRED"
        ]
      },
      "experience-context-base-shipping-preference": {
        "type": "string",
        "description": "The location from which the shipping address is derived.",
        "minLength": 1,
        "maxLength": 24,
        "pattern": "^[A-Z_]+$",
        "default": "GET_FROM_FILE",
        "enum": [
          "GET_FROM_FILE",
          "NO_SHIPPING",
          "SET_PROVIDED_ADDRESS"
        ]
      },
      "ApplePayPaymentType": {
        "description": "Indicates the type of payment data passed, in case of Non China the payment data is 3DSECURE and for China it is EMV.",
        "type": "string",
        "minLength": 1,
        "maxLength": 16,
        "pattern": "^[0-9A-Z_]+$",
        "enum": [
          "3DSECURE",
          "EMV"
        ]
      },
      "VenmoUsageType": {
        "type": "string",
        "description": "The usage type associated with the Venmo payment token.",
        "minLength": 1,
        "maxLength": 255,
        "pattern": "^[0-9A-Z_]+$",
        "enum": [
          "MERCHANT",
          "PLATFORM"
        ]
      },
      "VenmoCustomerType": {
        "type": "string",
        "description": "The customer type associated with the Venmo payment token. This is to indicate whether the customer acting on the merchant / platform is either a business or a consumer.",
        "minLength": 1,
        "maxLength": 255,
        "pattern": "^[0-9A-Z_]+$",
        "default": "CONSUMER",
        "enum": [
          "CONSUMER",
          "BUSINESS"
        ]
      },
      "StandardEntryClassCode": {
        "type": "string",
        "description": "NACHA (the regulatory body governing the ACH network) requires that API callers (merchants, partners) obtain the consumer’s explicit authorization before initiating a transaction. To stay compliant, you’ll need to make sure that you retain a compliant authorization for each transaction that you originate to the ACH Network using this API. ACH transactions are categorized (using SEC codes) by how you capture authorization from the Receiver (the person whose bank account is being debited or credited). PayPal supports the following SEC codes.",
        "default": "WEB",
        "minLength": 3,
        "maxLength": 255,
        "enum": [
          "TEL",
          "WEB",
          "CCD",
          "PPD"
        ]
      },
      "ApplicationContextLandingPage": {
        "type": "string",
        "description": "DEPRECATED. DEPRECATED. The type of landing page to show on the PayPal site for customer checkout.  The fields in `application_context` are now available in the `experience_context` object under the `payment_source` which supports them (eg. `payment_source.paypal.experience_context.landing_page`). Please specify this field in the `experience_context` object instead of the `application_context` object.",
        "deprecated": true,
        "default": "NO_PREFERENCE",
        "minLength": 1,
        "maxLength": 13,
        "pattern": "^[0-9A-Z_]+$",
        "enum": [
          "LOGIN",
          "BILLING",
          "NO_PREFERENCE"
        ]
      },
      "ApplicationContextShippingPreference": {
        "type": "string",
        "description": "DEPRECATED. DEPRECATED. The shipping preference: Displays the shipping address to the customer. Enables the customer to choose an address on the PayPal site. Restricts the customer from changing the address during the payment-approval process.  The fields in `application_context` are now available in the `experience_context` object under the `payment_source` which supports them (eg. `payment_source.paypal.experience_context.shipping_preference`). Please specify this field in the `experience_context` object instead of the `application_context` object.",
        "deprecated": true,
        "default": "GET_FROM_FILE",
        "minLength": 1,
        "maxLength": 20,
        "pattern": "^[0-9A-Z_]+$",
        "enum": [
          "GET_FROM_FILE",
          "NO_SHIPPING",
          "SET_PROVIDED_ADDRESS"
        ]
      },
      "ApplicationContextUserAction": {
        "type": "string",
        "description": "DEPRECATED. Configures a <strong>Continue</strong> or <strong>Pay Now</strong> checkout flow.  The fields in `application_context` are now available in the `experience_context` object under the `payment_source` which supports them (eg. `payment_source.paypal.experience_context.user_action`). Please specify this field in the `experience_context` object instead of the `application_context` object.",
        "default": "CONTINUE",
        "minLength": 1,
        "maxLength": 8,
        "pattern": "^[0-9A-Z_]+$",
        "enum": [
          "CONTINUE",
          "PAY_NOW"
        ]
      },
      "HttpMethod": {
        "type": "string",
        "description": "The HTTP method required to make the related call.",
        "example": "GET",
        "enum": [
          "GET",
          "POST",
          "PUT",
          "DELETE",
          "HEAD",
          "CONNECT",
          "OPTIONS",
          "PATCH"
        ]
      },
      "VaultStatus": {
        "type": "string",
        "description": "The vault status.",
        "minLength": 1,
        "maxLength": 255,
        "pattern": "^[0-9A-Z_]+$",
        "deprecated": true,
        "enum": [
          "VAULTED",
          "CREATED",
          "APPROVED"
        ]
      },
      "PaymentCardType": {
        "type": "string",
        "description": "The payment card type.",
        "readOnly": true,
        "enum": [
          "CREDIT",
          "DEBIT",
          "PREPAID",
          "UNKNOWN"
        ]
      },
      "AuthorizationStatusReason": {
        "description": "The reason why the authorized status is `PENDING`.",
        "type": "string",
        "minLength": 1,
        "maxLength": 24,
        "pattern": "^[A-Z_]+$",
        "enum": [
          "PENDING_REVIEW"
        ]
      },
      "AuthorizedPaymentStatus": {
        "description": "The status for the authorized payment.",
        "type": "string",
        "readOnly": true,
        "enum": [
          "CREATED",
          "CAPTURED",
          "DENIED",
          "PARTIALLY_CAPTURED",
          "VOIDED",
          "PENDING"
        ]
      },
      "SellerProtectionStatus": {
        "type": "string",
        "description": "Indicates whether the transaction is eligible for seller protection. For information, see [PayPal Seller Protection for Merchants](https://www.paypal.com/us/webapps/mpp/security/seller-protection).",
        "readOnly": true,
        "example": "ELIGIBLE",
        "enum": [
          "ELIGIBLE",
          "PARTIALLY_ELIGIBLE",
          "NOT_ELIGIBLE"
        ]
      },
      "DisputeCategory": {
        "type": "string",
        "description": "The condition that is covered for the transaction.",
        "example": "ITEM_NOT_RECEIVED",
        "enum": [
          "ITEM_NOT_RECEIVED",
          "UNAUTHORIZED_TRANSACTION"
        ]
      },
      "AVSCode": {
        "description": "The address verification code for Visa, Discover, Mastercard, or American Express transactions.",
        "type": "string",
        "readOnly": true,
        "enum": [
          "A",
          "B",
          "C",
          "D",
          "E",
          "F",
          "G",
          "I",
          "M",
          "N",
          "P",
          "R",
          "S",
          "U",
          "W",
          "X",
          "Y",
          "Z",
          "Null",
          "0",
          "1",
          "2",
          "3",
          "4"
        ]
      },
      "CVVCode": {
        "description": "The card verification value code for for Visa, Discover, Mastercard, or American Express.",
        "type": "string",
        "readOnly": true,
        "enum": [
          "E",
          "I",
          "M",
          "N",
          "P",
          "S",
          "U",
          "X",
          "All others",
          "0",
          "1",
          "2",
          "3",
          "4"
        ]
      },
      "ResponseCode": {
        "description": "Processor response code for the non-PayPal payment processor errors.",
        "type": "string",
        "readOnly": true,
        "enum": [
          "0000",
          "00N7",
          "0100",
          "0390",
          "0500",
          "0580",
          "0800",
          "0880",
          "0890",
          "0960",
          "0R00",
          "1000",
          "10BR",
          "1300",
          "1310",
          "1312",
          "1317",
          "1320",
          "1330",
          "1335",
          "1340",
          "1350",
          "1352",
          "1360",
          "1370",
          "1380",
          "1382",
          "1384",
          "1390",
          "1393",
          "5100",
          "5110",
          "5120",
          "5130",
          "5135",
          "5140",
          "5150",
          "5160",
          "5170",
          "5180",
          "5190",
          "5200",
          "5210",
          "5400",
          "5500",
          "5650",
          "5700",
          "5710",
          "5800",
          "5900",
          "5910",
          "5920",
          "5930",
          "5950",
          "6300",
          "7600",
          "7700",
          "7710",
          "7800",
          "7900",
          "8000",
          "8010",
          "8020",
          "8030",
          "8100",
          "8110",
          "8220",
          "9100",
          "9500",
          "9510",
          "9520",
          "9530",
          "9540",
          "9600",
          "PCNR",
          "PCVV",
          "PP06",
          "PPRN",
          "PPAD",
          "PPAB",
          "PPAE",
          "PPAG",
          "PPAI",
          "PPAR",
          "PPAU",
          "PPAV",
          "PPAX",
          "PPBG",
          "PPC2",
          "PPCE",
          "PPCO",
          "PPCR",
          "PPCT",
          "PPCU",
          "PPD3",
          "PPDC",
          "PPDI",
          "PPDV",
          "PPDT",
          "PPEF",
          "PPEL",
          "PPER",
          "PPEX",
          "PPFE",
          "PPFI",
          "PPFR",
          "PPFV",
          "PPGR",
          "PPH1",
          "PPIF",
          "PPII",
          "PPIM",
          "PPIT",
          "PPLR",
          "PPLS",
          "PPMB",
          "PPMC",
          "PPMD",
          "PPNC",
          "PPNL",
          "PPNM",
          "PPNT",
          "PPPH",
          "PPPI",
          "PPPM",
          "PPQC",
          "PPRE",
          "PPRF",
          "PPRR",
          "PPS0",
          "PPS1",
          "PPS2",
          "PPS3",
          "PPS4",
          "PPS5",
          "PPS6",
          "PPSC",
          "PPSD",
          "PPSE",
          "PPTE",
          "PPTF",
          "PPTI",
          "PPTR",
          "PPTT",
          "PPTV",
          "PPUA",
          "PPUC",
          "PPUE",
          "PPUI",
          "PPUP",
          "PPUR",
          "PPVC",
          "PPVE",
          "PPVT"
        ]
      },
      "PaymentAdviceCode": {
        "description": "The declined payment transactions might have payment advice codes. The card networks, like Visa and Mastercard, return payment advice codes.",
        "type": "string",
        "readOnly": true,
        "enum": [
          "01",
          "02",
          "03",
          "21"
        ]
      },
      "CaptureStatusReason": {
        "description": "The reason why the captured payment status is `PENDING` or `DENIED`.",
        "type": "string",
        "minLength": 1,
        "maxLength": 64,
        "pattern": "^[A-Z_]+$",
        "enum": [
          "BUYER_COMPLAINT",
          "CHARGEBACK",
          "ECHECK",
          "INTERNATIONAL_WITHDRAWAL",
          "OTHER",
          "PENDING_REVIEW",
          "RECEIVING_PREFERENCE_MANDATES_MANUAL_ACTION",
          "REFUNDED",
          "TRANSACTION_APPROVED_AWAITING_FUNDING",
          "UNILATERAL",
          "VERIFICATION_REQUIRED"
        ]
      },
      "CaptureStatus": {
        "description": "The status of the captured payment.",
        "type": "string",
        "readOnly": true,
        "example": "COMPLETED",
        "enum": [
          "COMPLETED",
          "DECLINED",
          "PARTIALLY_REFUNDED",
          "PENDING",
          "REFUNDED",
          "FAILED"
        ]
      },
      "RefundReason": {
        "description": "The reason why the refund has the `PENDING` or `FAILED` status.",
        "type": "string",
        "enum": [
          "ECHECK"
        ]
      },
      "RefundStatus": {
        "description": "The status of the refund.",
        "type": "string",
        "readOnly": true,
        "enum": [
          "CANCELLED",
          "FAILED",
          "PENDING",
          "COMPLETED"
        ]
      },
      "patch-op": {
        "type": "string",
        "description": "The operation.",
        "enum": [
          "add",
          "remove",
          "replace",
          "move",
          "copy",
          "test"
        ]
      },
      "amount-mismatch1-issue": {
        "type": "string",
        "enum": [
          "AMOUNT_MISMATCH"
        ]
      },
      "amount-mismatch1-description": {
        "type": "string",
        "enum": [
          "Should equal item_total + tax_total + shipping + handling + insurance - shipping_discount - discount."
        ]
      },
      "cannot-be-negative1-issue": {
        "type": "string",
        "enum": [
          "CANNOT_BE_NEGATIVE"
        ]
      },
      "cannot-be-negative1-description": {
        "type": "string",
        "enum": [
          "Must be greater than or equal to 0. If the currency supports decimals, only two decimal place precision is supported."
        ]
      },
      "cannot-be-zero-or-negative1-issue": {
        "type": "string",
        "enum": [
          "CANNOT_BE_ZERO_OR_NEGATIVE"
        ]
      },
      "cannot-be-zero-or-negative1-description": {
        "type": "string",
        "enum": [
          "Must be greater than zero. If the currency supports decimals, only two decimal place precision is supported."
        ]
      },
      "city-required1-issue": {
        "type": "string",
        "enum": [
          "CITY_REQUIRED"
        ]
      },
      "city-required1-description": {
        "type": "string",
        "enum": [
          "The specified country requires a city (address.admin_area_2)."
        ]
      },
      "decimal-precision1-issue": {
        "type": "string",
        "enum": [
          "DECIMAL_PRECISION"
        ]
      },
      "decimal-precision1-description": {
        "type": "string",
        "enum": [
          "If the currency supports decimals, only two decimal place precision is supported."
        ]
      },
      "donation-items-not-supported1-issue": {
        "type": "string",
        "enum": [
          "DONATION_ITEMS_NOT_SUPPORTED"
        ]
      },
      "donation-items-not-supported1-description": {
        "type": "string",
        "enum": [
          "If 'purchase_unit' has \"DONATION\" as the 'items.category' then the Order can at most have one purchase_unit. Multiple purchase_units are not supported if either of them have at least one items with category as \"DONATION\"."
        ]
      },
      "duplicate-reference-id1-issue": {
        "type": "string",
        "enum": [
          "DUPLICATE_REFERENCE_ID"
        ]
      },
      "duplicate-reference-id1-description": {
        "type": "string",
        "enum": [
          "`reference_id` must be unique if multiple `purchase_unit` are provided."
        ]
      },
      "invalid-currency-code1-issue": {
        "type": "string",
        "enum": [
          "INVALID_CURRENCY_CODE"
        ]
      },
      "invalid-currency-code1-description": {
        "type": "string",
        "enum": [
          "Currency code is invalid or is not currently supported. Please refer https://developer.paypal.com/api/rest/reference/currency-codes/ for list of supported currency codes."
        ]
      },
      "item-total-mismatch1-issue": {
        "type": "string",
        "enum": [
          "ITEM_TOTAL_MISMATCH"
        ]
      },
      "item-total-mismatch1-description": {
        "type": "string",
        "enum": [
          "Should equal sum of (unit_amount * quantity) across all items for a given purchase_unit."
        ]
      },
      "item-total-required1-issue": {
        "type": "string",
        "enum": [
          "ITEM_TOTAL_REQUIRED"
        ]
      },
      "item-total-required1-description": {
        "type": "string",
        "enum": [
          "If item details are specified (items.unit_amount and items.quantity) corresponding amount.breakdown.item_total is required."
        ]
      },
      "max-value-exceeded1-issue": {
        "type": "string",
        "enum": [
          "MAX_VALUE_EXCEEDED"
        ]
      },
      "max-value-exceeded1-description": {
        "type": "string",
        "enum": [
          "Should be less than or equal to 999999999999999.99."
        ]
      },
      "invalid-json-pointer-format-issue": {
        "type": "string",
        "enum": [
          "INVALID_JSON_POINTER_FORMAT"
        ]
      },
      "invalid-json-pointer-format-description": {
        "type": "string",
        "enum": [
          "Path should be a valid JSON Pointer https://tools.ietf.org/html/rfc6901 that references a location within the request where the operation is performed."
        ]
      },
      "invalid-parameter-issue": {
        "type": "string",
        "enum": [
          "INVALID_PARAMETER"
        ]
      },
      "invalid-parameter-description": {
        "type": "string",
        "enum": [
          "Cannot be specified as part of the request."
        ]
      },
      "not-patchable-issue": {
        "type": "string",
        "enum": [
          "NOT_PATCHABLE"
        ]
      },
      "not-patchable-description": {
        "type": "string",
        "enum": [
          "Cannot be patched."
        ]
      },
      "tax-total-mismatch1-issue": {
        "type": "string",
        "enum": [
          "TAX_TOTAL_MISMATCH"
        ]
      },
      "tax-total-mismatch1-description": {
        "type": "string",
        "enum": [
          "Should equal sum of (tax * quantity) across all items for a given purchase_unit."
        ]
      },
      "tax-total-required1-issue": {
        "type": "string",
        "enum": [
          "TAX_TOTAL_REQUIRED"
        ]
      },
      "tax-total-required1-description": {
        "type": "string",
        "enum": [
          "If item details are specified (items.tax_total and items.quantity) corresponding amount.breakdown.tax_total is required."
        ]
      },
      "unsupported-intent1-issue": {
        "type": "string",
        "enum": [
          "UNSUPPORTED_INTENT"
        ]
      },
      "unsupported-intent1-description": {
        "type": "string",
        "enum": [
          "`intent=AUTHORIZE` is not supported for multiple purchase units. Only `intent=CAPTURE` is supported."
        ]
      },
      "unsupported-patch-parameter-value-issue": {
        "type": "string",
        "enum": [
          "UNSUPPORTED_PATCH_PARAMETER_VALUE"
        ]
      },
      "unsupported-patch-parameter-value-description": {
        "type": "string",
        "enum": [
          "The value specified for this field is not currently supported."
        ]
      },
      "patch-value-required-issue": {
        "type": "string",
        "enum": [
          "PATCH_VALUE_REQUIRED"
        ]
      },
      "patch-value-required-description": {
        "type": "string",
        "enum": [
          "Please specify a 'value' to for the field that is being patched."
        ]
      },
      "patch-path-required-issue": {
        "type": "string",
        "enum": [
          "PATCH_PATH_REQUIRED"
        ]
      },
      "patch-path-required-description": {
        "type": "string",
        "enum": [
          "Please specify a 'path' for the field for which the operation needs to be performed."
        ]
      },
      "payee-account-locked-or-closed1-issue": {
        "type": "string",
        "enum": [
          "PAYEE_ACCOUNT_LOCKED_OR_CLOSED"
        ]
      },
      "payee-account-locked-or-closed1-description": {
        "type": "string",
        "enum": [
          "The merchant account is locked or closed."
        ]
      },
      "payee-account-restricted1-issue": {
        "type": "string",
        "enum": [
          "PAYEE_ACCOUNT_RESTRICTED"
        ]
      },
      "payee-account-restricted1-description": {
        "type": "string",
        "enum": [
          "The merchant account is restricted."
        ]
      },
      "payee-fx-rate-id-expired1-issue": {
        "type": "string",
        "enum": [
          "PAYEE_FX_RATE_ID_EXPIRED"
        ]
      },
      "payee-fx-rate-id-expired1-description": {
        "type": "string",
        "enum": [
          "The specified FX Rate ID has expired. Please specify a different FX Rate Id and try the request again. Alternately, remove the FX Rate ID to process the request using the default exchange rate."
        ]
      },
      "payee-fx-rate-id-currency-mismatch1-issue": {
        "type": "string",
        "enum": [
          "PAYEE_FX_RATE_ID_CURRENCY_MISMATCH"
        ]
      },
      "payee-fx-rate-id-currency-mismatch1-description": {
        "type": "string",
        "enum": [
          "The specified FX Rate ID is for a currency that does not match with the currency of this request. Please specify a different FX Rate ID and try the request again. Alternately, remove the FX Rate ID to process the request using the default exchange rate."
        ]
      },
      "invalid-fx-rate-id1-issue": {
        "type": "string",
        "enum": [
          "INVALID_FX_RATE_ID"
        ]
      },
      "invalid-fx-rate-id1-description": {
        "type": "string",
        "enum": [
          "The specific FX Rate ID is not valid. This could be either because we are not able to look up the FX Rate based on this ID or it could be because the ID belongs to another API Caller."
        ]
      },
      "platform-fees-not-supported1-issue": {
        "type": "string",
        "enum": [
          "PLATFORM_FEES_NOT_SUPPORTED"
        ]
      },
      "platform-fees-not-supported1-description": {
        "type": "string",
        "enum": [
          "The API Caller is not enabled to process transactions by specifying 'platform_fees'. Please work with your PayPal Account Manager to enable this option for your account."
        ]
      },
      "invalid-platform-fees-account1-issue": {
        "type": "string",
        "enum": [
          "INVALID_PLATFORM_FEES_ACCOUNT"
        ]
      },
      "invalid-platform-fees-account1-description": {
        "type": "string",
        "enum": [
          "The specified platform_fees payee account is either invalid or account setup is incomplete.Please work with your PayPal Account Manager to enable this option for your account."
        ]
      },
      "invalid-platform-fees-amount1-issue": {
        "type": "string",
        "enum": [
          "INVALID_PLATFORM_FEES_AMOUNT"
        ]
      },
      "invalid-platform-fees-amount1-description": {
        "type": "string",
        "enum": [
          "The platform_fees amount cannot be greater than order amount."
        ]
      },
      "postal-code-required1-issue": {
        "type": "string",
        "enum": [
          "POSTAL_CODE_REQUIRED"
        ]
      },
      "postal-code-required1-description": {
        "type": "string",
        "enum": [
          "The specified country requires a postal code."
        ]
      },
      "reference-id-not-found-issue": {
        "type": "string",
        "enum": [
          "REFERENCE_ID_NOT_FOUND"
        ]
      },
      "reference-id-not-found-description": {
        "type": "string",
        "enum": [
          "Filter expression value is incorrect. Please check the value of the reference_id and try again."
        ]
      },
      "reference-id-required1-issue": {
        "type": "string",
        "enum": [
          "REFERENCE_ID_REQUIRED"
        ]
      },
      "reference-id-required1-description": {
        "type": "string",
        "enum": [
          "'reference_id' is required for each 'purchase_unit' if multiple 'purchase_unit' are provided."
        ]
      },
      "multi-currency-order1-issue": {
        "type": "string",
        "enum": [
          "MULTI_CURRENCY_ORDER"
        ]
      },
      "multi-currency-order1-description": {
        "type": "string",
        "enum": [
          "Multiple differing values of currency_code are not supported. Entire Order request must have the same currency_code."
        ]
      },
      "shipping-option-not-selected1-issue": {
        "type": "string",
        "enum": [
          "SHIPPING_OPTION_NOT_SELECTED"
        ]
      },
      "shipping-option-not-selected1-description": {
        "type": "string",
        "enum": [
          "At least one of the shipping.option should be set to 'selected = true'."
        ]
      },
      "multiple-shipping-option-selected1-issue": {
        "type": "string",
        "enum": [
          "MULTIPLE_SHIPPING_OPTION_SELECTED"
        ]
      },
      "multiple-shipping-option-selected1-description": {
        "type": "string",
        "enum": [
          "Only one shipping.option can be set to 'selected = true'."
        ]
      },
      "order-already-completed-issue": {
        "type": "string",
        "enum": [
          "ORDER_ALREADY_COMPLETED"
        ]
      },
      "order-already-completed-description": {
        "type": "string",
        "enum": [
          "The order cannot be patched after it is completed."
        ]
      },
      "preferred-shipping-option-amount-mismatch1-issue": {
        "type": "string",
        "enum": [
          "PREFERRED_SHIPPING_OPTION_AMOUNT_MISMATCH"
        ]
      },
      "shipping-option-amount-match-breakdown": {
        "type": "string",
        "enum": [
          "The amount provided in the preferred shipping option should match the amount provided in amount breakdown"
        ]
      },
      "amount-change-not-allowed-issue": {
        "type": "string",
        "enum": [
          "AMOUNT_CHANGE_NOT_ALLOWED"
        ]
      },
      "amount-change-not-allowed-description": {
        "type": "string",
        "enum": [
          "The amount specified is different from the amount authorized by payer."
        ]
      },
      "order-already-captured-issue": {
        "type": "string",
        "enum": [
          "ORDER_ALREADY_CAPTURED"
        ]
      },
      "order-already-captured-description": {
        "type": "string",
        "enum": [
          "Order already captured. If 'intent=CAPTURE' only one capture per order is allowed."
        ]
      },
      "order-already-authorized-issue": {
        "type": "string",
        "enum": [
          "ORDER_ALREADY_AUTHORIZED"
        ]
      },
      "order-already-authorized-description": {
        "type": "string",
        "enum": [
          "Order already captured. If 'intent=CAPTURE' only one capture per order is allowed."
        ]
      },
      "order-cannot-be-confirmed-issue": {
        "type": "string",
        "enum": [
          "ORDER_CANNOT_BE_CONFIRMED"
        ]
      },
      "order-cannot-be-confirmed-description": {
        "type": "string",
        "enum": [
          "An order with status = 'COMPLETED' cannot be confirmed again."
        ]
      },
      "missing-previous-reference1-issue": {
        "type": "string",
        "enum": [
          "MISSING_PREVIOUS_REFERENCE"
        ]
      },
      "missing-previous-reference1-description": {
        "type": "string",
        "enum": [
          "For Merchant initiated network token transactions, either the payment_source.card.stored_credential.previous_network_transaction_reference or payment_source.card.stored_credential.previous_transaction_reference must be included in the request."
        ]
      },
      "missing-cryptogram1-issue": {
        "type": "string",
        "enum": [
          "MISSING_CRYPTOGRAM"
        ]
      },
      "missing-cryptogram1-description": {
        "type": "string",
        "enum": [
          "Cryptogram is mandatory for any customer initiated network token transactions."
        ]
      },
      "currency-not-supported-for-country-issue": {
        "type": "string",
        "enum": [
          "CURRENCY_NOT_SUPPORTED_FOR_COUNTRY"
        ]
      },
      "currency-not-supported-for-country-description": {
        "type": "string",
        "enum": [
          " For the payment_source specified, the currency of the Order is restricted by the country in which the payee account is based. Please refer https://developer.paypal.com/api/rest/reference/currency-codes/ for list of supported currency codes."
        ]
      },
      "card-expired1-issue": {
        "type": "string",
        "enum": [
          "CARD_EXPIRED"
        ]
      },
      "card-expired1-description": {
        "type": "string",
        "enum": [
          "The card is expired"
        ]
      },
      "card-type-not-supported-issue": {
        "type": "string",
        "enum": [
          "CARD_TYPE_NOT_SUPPORTED"
        ]
      },
      "card-type-not-supported-description": {
        "type": "string",
        "enum": [
          "Processing of this card type is not supported. Use another card type."
        ]
      },
      "currency-not-supported-for-card-type-issue": {
        "type": "string",
        "enum": [
          "CURRENCY_NOT_SUPPORTED_FOR_CARD_TYPE"
        ]
      },
      "currency-not-supported-for-card-type-description": {
        "type": "string",
        "enum": [
          "The issued currency code of this card is not supported for direct card payments. Please refer https://developer.paypal.com/api/rest/reference/currency-codes/ for list of supported currency codes."
        ]
      },
      "only-one-payment-source-allowed-issue": {
        "type": "string",
        "enum": [
          "ONLY_ONE_PAYMENT_SOURCE_ALLOWED"
        ]
      },
      "only-one-payment-source-allowed-description": {
        "type": "string",
        "enum": [
          "More than one payment method within the payment source is not supported."
        ]
      },
      "no-payment-source-provided-issue": {
        "type": "string",
        "enum": [
          "NO_PAYMENT_SOURCE_PROVIDED"
        ]
      },
      "no-payment-source-provided-description": {
        "type": "string",
        "enum": [
          "At least one payment method is required within the payment source."
        ]
      },
      "payment-already-approved-issue": {
        "type": "string",
        "enum": [
          "PAYMENT_ALREADY_APPROVED"
        ]
      },
      "payment-already-approved-description": {
        "type": "string",
        "enum": [
          "The payment has already been approved.  Please capture the order, or create and confirm a new order with this payment source."
        ]
      },
      "unsupported-processing-instruction1-issue": {
        "type": "string",
        "enum": [
          "UNSUPPORTED_PROCESSING_INSTRUCTION"
        ]
      },
      "unsupported-processing-instruction1-description": {
        "type": "string",
        "enum": [
          "The specified processing_instruction is not supported for the given payment_source. Please refer to https://developer.paypal.com/api/orders/v2/#definition-processing_instruction for the list of payment_source that can be specified with this value."
        ]
      },
      "order-complete-on-payment-approval1-issue": {
        "type": "string",
        "enum": [
          "ORDER_COMPLETE_ON_PAYMENT_APPROVAL"
        ]
      },
      "order-complete-on-payment-approval1-description": {
        "type": "string",
        "enum": [
          "A processing_instruction of `ORDER_COMPLETE_ON_PAYMENT_APPROVAL` is required for the specified payment_source."
        ]
      },
      "invalid-expiry-date1-issue": {
        "type": "string",
        "enum": [
          "INVALID_EXPIRY_DATE"
        ]
      },
      "invalid-expiry-date1-description": {
        "type": "string",
        "enum": [
          "Expiry date is invalid. Expiry date should be a date in future and within the threshold for the payment source."
        ]
      },
      "token-expired1-issue": {
        "type": "string",
        "enum": [
          "TOKEN_EXPIRED"
        ]
      },
      "token-expired1-description": {
        "type": "string",
        "enum": [
          "The token is expired and cannot be used for payment."
        ]
      },
      "invalid-google-pay-token1-issue": {
        "type": "string",
        "enum": [
          "INVALID_GOOGLE_PAY_TOKEN"
        ]
      },
      "invalid-google-pay-token1-description": {
        "type": "string",
        "enum": [
          "The google pay token is invalid. PayPal was not able to decrypt the googlepay token or PayPal was not able to find the necessary data in the token after decryption."
        ]
      },
      "google-pay-gateway-merchant-id-mismatch1-issue": {
        "type": "string",
        "enum": [
          "GOOGLE_PAY_GATEWAY_MERCHANT_ID_MISMATCH"
        ]
      },
      "invalid-google-pay-merchant-id-mismatch": {
        "type": "string",
        "enum": [
          "The gateway merchant ID in Google Pay token is not valid. This could be because the gateway merchant Id that was authorized by payer/buyer on Google Pay does not match with the API caller of the order."
        ]
      },
      "cryptogram-required2-issue": {
        "type": "string",
        "enum": [
          "CRYPTOGRAM_REQUIRED"
        ]
      },
      "cryptogram-required2-description": {
        "type": "string",
        "enum": [
          "Cryptogram is required if authentication method is CRYPTOGRAM 3DS."
        ]
      },
      "one-of-parameters-required1-issue": {
        "type": "string",
        "enum": [
          "ONE_OF_PARAMETERS_REQUIRED"
        ]
      },
      "one-of-parameters-required1-description": {
        "type": "string",
        "enum": [
          "One or more field is required to continue with this request."
        ]
      },
      "return-url-required-issue": {
        "type": "string",
        "enum": [
          "RETURN_URL_REQUIRED"
        ]
      },
      "return-url-required-description": {
        "type": "string",
        "enum": [
          "The return url is required when attempting to vault this source."
        ]
      },
      "cancel-url-required-issue": {
        "type": "string",
        "enum": [
          "CANCEL_URL_REQUIRED"
        ]
      },
      "cancel-url-required-description": {
        "type": "string",
        "enum": [
          "The cancel url is required when attempting to vault this source."
        ]
      },
      "country-not-supported-by-payment-source-issue": {
        "type": "string",
        "enum": [
          "COUNTRY_NOT_SUPPORTED_BY_PAYMENT_SOURCE"
        ]
      },
      "unsupported-country-code-payment-source": {
        "type": "string",
        "enum": [
          "Country code provided is not supported by the provided payment source."
        ]
      },
      "required-parameter-for-payment-source-issue": {
        "type": "string",
        "enum": [
          "REQUIRED_PARAMETER_FOR_PAYMENT_SOURCE"
        ]
      },
      "required-parameter-for-payment-source-description": {
        "type": "string",
        "enum": [
          "The parameter is required for provided payment source."
        ]
      },
      "customer-initiated-payment-required-param": {
        "type": "string",
        "enum": [
          "REQUIRED_PARAMETER_FOR_CUSTOMER_INITIATED_PAYMENT"
        ]
      },
      "req-param-cust-present-initiator": {
        "type": "string",
        "enum": [
          "This parameter is required when the customer is present. If the customer is not present, indicate so by sending payment_initiator=`MERCHANT`. For details, see <a href=\"https://developer.paypal.com/docs/api/orders/v2/#definition-card_stored_credential\">Stored Credential</a>."
        ]
      },
      "item-category-not-supported-payment-source": {
        "type": "string",
        "enum": [
          "ITEM_CATEGORY_NOT_SUPPORTED_BY_PAYMENT_SOURCE"
        ]
      },
      "payment-source-does-not-support-item-category": {
        "type": "string",
        "enum": [
          "The provided payment source does not support provided item category."
        ]
      },
      "payment-source-info-cannot-be-verified1-issue": {
        "type": "string",
        "enum": [
          "PAYMENT_SOURCE_INFO_CANNOT_BE_VERIFIED"
        ]
      },
      "unverified-payment-source-and-address-combination": {
        "type": "string",
        "enum": [
          "The combination of the payment_source name, billing address, shipping name and shipping address could not be verified. Please correct this information and try again by creating a new order."
        ]
      },
      "payment-source-declined-by-processor1-issue": {
        "type": "string",
        "enum": [
          "PAYMENT_SOURCE_DECLINED_BY_PROCESSOR"
        ]
      },
      "payment-source-declined-by-processor1-description": {
        "type": "string",
        "enum": [
          "The provided payment source is declined by the processor. Please try again with a different payment source by creating a new order."
        ]
      },
      "payment-source-cannot-be-used1-issue": {
        "type": "string",
        "enum": [
          "PAYMENT_SOURCE_CANNOT_BE_USED"
        ]
      },
      "payment-source-cannot-be-used1-description": {
        "type": "string",
        "enum": [
          "The provided payment source cannot be used to pay for the order. Please try again with a different payment source by creating a new order."
        ]
      },
      "setup-error-for-bank-issue": {
        "type": "string",
        "enum": [
          "SETUP_ERROR_FOR_BANK"
        ]
      },
      "setup-error-for-bank-description": {
        "type": "string",
        "enum": [
          "The API Caller account setup, for bank payments, is incomplete or incorrect. Please contact your PayPal account manager."
        ]
      },
      "bank-not-supported-for-verification-issue": {
        "type": "string",
        "enum": [
          "BANK_NOT_SUPPORTED_FOR_VERIFICATION"
        ]
      },
      "bank-not-supported-for-verification-description": {
        "type": "string",
        "enum": [
          "Verification for this bank account is not supported."
        ]
      },
      "apple-pay-amount-mismatch1-issue": {
        "type": "string",
        "enum": [
          "APPLE_PAY_AMOUNT_MISMATCH"
        ]
      },
      "apple-pay-amount-mismatch1-description": {
        "type": "string",
        "enum": [
          "The 'amount' specified in the Order should match the amount that was viewed and authorized by the payer/buyer on Apple Pay. If the amount has changed, please redirect the buyer to authorize the order again via Apple Pay."
        ]
      },
      "one-of-the-parameters-required-issue": {
        "type": "string",
        "enum": [
          "ONE_OF_THE_PARAMETERS_REQUIRED"
        ]
      },
      "one-of-the-parameters-required-description": {
        "type": "string",
        "enum": [
          "One or more field is required to continue with this request."
        ]
      },
      "billing-address-invalid1-issue": {
        "type": "string",
        "enum": [
          "BILLING_ADDRESS_INVALID"
        ]
      },
      "billing-address-invalid1-description": {
        "type": "string",
        "enum": [
          "Provided billing address is invalid."
        ]
      },
      "shipping-address-invalid1-issue": {
        "type": "string",
        "enum": [
          "SHIPPING_ADDRESS_INVALID"
        ]
      },
      "shipping-address-invalid1-description": {
        "type": "string",
        "enum": [
          "Provided shipping address is invalid."
        ]
      },
      "order-is-pending-approval-issue": {
        "type": "string",
        "enum": [
          "ORDER_IS_PENDING_APPROVAL"
        ]
      },
      "order-is-pending-approval-description": {
        "type": "string",
        "enum": [
          "The order was confirmed and payer action completed but order approval processing from PayPal is pending. No action is needed from Payee or Payer. Please wait until order status changes to 'APPROVED'."
        ]
      },
      "device-data-not-available-issue": {
        "type": "string",
        "enum": [
          "DEVICE_DATA_NOT_AVAILABLE"
        ]
      },
      "device-data-not-available-description": {
        "type": "string",
        "enum": [
          "Device Data is not available for processing this order. The PayPal-Client-Metadata-Id header value sent during `Create Order` api call is either missing or incorrect or there was an error in collecting required data. Please verify if appropriate value for PayPal-Client-Metadata-Id header is being sent during 'Create Order' api call. Please note this error only applies to payment_source.pay_upon_invoice at the moment."
        ]
      },
      "currency-not-supported-for-bank-issue": {
        "type": "string",
        "enum": [
          "CURRENCY_NOT_SUPPORTED_FOR_BANK"
        ]
      },
      "currency-not-supported-for-bank-description": {
        "type": "string",
        "enum": [
          "The payment_source does not support the currency of the Order. For ACH debit, only USD is supported and for SEPA debit, only EUR is supported."
        ]
      },
      "only-one-bank-source-allowed-issue": {
        "type": "string",
        "enum": [
          "ONLY_ONE_BANK_SOURCE_ALLOWED"
        ]
      },
      "only-one-bank-source-allowed-description": {
        "type": "string",
        "enum": [
          "More than one payment method within the bank payment object is not supported."
        ]
      },
      "invalid-iban-issue": {
        "type": "string",
        "enum": [
          "INVALID_IBAN"
        ]
      },
      "invalid-iban-description": {
        "type": "string",
        "enum": [
          "IBAN provided is not a valid bank account number."
        ]
      },
      "iban-country-not-supported-issue": {
        "type": "string",
        "enum": [
          "IBAN_COUNTRY_NOT_SUPPORTED"
        ]
      },
      "iban-country-not-supported-description": {
        "type": "string",
        "enum": [
          "Country code of issuer bank for the provided IBAN is not supported for SEPA debit payments."
        ]
      },
      "payee-country-not-supported-payment-source": {
        "type": "string",
        "enum": [
          "PAYEE_COUNTRY_NOT_SUPPORTED_FOR_PAYMENT_SOURCE"
        ]
      },
      "payee-country-code-not-supported-payment-source": {
        "type": "string",
        "enum": [
          "Payee country code is not supported by the provided payment source."
        ]
      },
      "card-number-required-issue": {
        "type": "string",
        "enum": [
          "CARD_NUMBER_REQUIRED"
        ]
      },
      "card-number-required-description": {
        "type": "string",
        "enum": [
          "The card number is required when attempting to process payment with card."
        ]
      },
      "card-expiry-required-issue": {
        "type": "string",
        "enum": [
          "CARD_EXPIRY_REQUIRED"
        ]
      },
      "card-expiry-required-description": {
        "type": "string",
        "enum": [
          "The card expiry is required when attempting to process payment with card."
        ]
      },
      "incompatible-parameter-value1-issue": {
        "type": "string",
        "enum": [
          "INCOMPATIBLE_PARAMETER_VALUE"
        ]
      },
      "incompatible-parameter-value1-description": {
        "type": "string",
        "enum": [
          "The value of the field is incompatible/redundant with other fields in the order."
        ]
      },
      "vault-instruction-duplicated1-issue": {
        "type": "string",
        "enum": [
          "VAULT_INSTRUCTION_DUPLICATED"
        ]
      },
      "vault-instruction-duplicated1-description": {
        "type": "string",
        "enum": [
          "Only one vault instruction is allowed. Please use `vault.store_in_vault` to provide vault instruction."
        ]
      },
      "vault-instruction-required1-issue": {
        "type": "string",
        "enum": [
          "VAULT_INSTRUCTION_REQUIRED"
        ]
      },
      "vault-instruction-required1-description": {
        "type": "string",
        "enum": [
          "Vault instruction is required. Please use `vault.store_in_vault` to provide vault instruction."
        ]
      },
      "mismatched-vault-id-to-payment-source1-issue": {
        "type": "string",
        "enum": [
          "MISMATCHED_VAULT_ID_TO_PAYMENT_SOURCE"
        ]
      },
      "mismatched-vault-id-to-payment-source1-description": {
        "type": "string",
        "enum": [
          "The vault_id does not match the payment_source provided. Please verify that the vault_id token used refers to the matching payment_source and try again. For example, a PayPal token cannot be passed in the vault_id field in the payment_source.card object."
        ]
      },
      "not-eligible-for-pnref-processing1-issue": {
        "type": "string",
        "enum": [
          "NOT_ELIGIBLE_FOR_PNREF_PROCESSING"
        ]
      },
      "not-eligible-for-pnref-processing1-description": {
        "type": "string",
        "enum": [
          "API caller is not enabled to process payments with the `pnref`. Please contact customer support to request permissions to process transactions with PNREF."
        ]
      },
      "not-eligible-paypal-transaction-id-processing": {
        "type": "string",
        "enum": [
          "NOT_ELIGIBLE_FOR_PAYPAL_TRANSACTION_ID_PROCESSING"
        ]
      },
      "paypal-transaction-id-processing-permission-error": {
        "type": "string",
        "enum": [
          "API caller is not enable to process payments using `paypal_transaction_id`. Please contact customer support to request permissions to process transactions with PayPal transaction ID."
        ]
      },
      "paypal-transaction-id-not-found1-issue": {
        "type": "string",
        "enum": [
          "PAYPAL_TRANSACTION_ID_NOT_FOUND"
        ]
      },
      "paypal-transaction-id-not-found1-description": {
        "type": "string",
        "enum": [
          "Specified `paypal_transaction_id` was not found. Verify the value and try the request again."
        ]
      },
      "pnref-not-found1-issue": {
        "type": "string",
        "enum": [
          "PNREF_NOT_FOUND"
        ]
      },
      "pnref-not-found1-description": {
        "type": "string",
        "enum": [
          "Specified `pnref` was not found. Verify the value and try the request again."
        ]
      },
      "invalid-security-code-length1-issue": {
        "type": "string",
        "enum": [
          "INVALID_SECURITY_CODE_LENGTH"
        ]
      },
      "invalid-security-code-length1-description": {
        "type": "string",
        "enum": [
          "The security_code length is invalid for the specified card brand."
        ]
      },
      "not-enabled-to-vault-payment-source1-issue": {
        "type": "string",
        "enum": [
          "NOT_ENABLED_TO_VAULT_PAYMENT_SOURCE"
        ]
      },
      "not-enabled-to-vault-payment-source1-description": {
        "type": "string",
        "enum": [
          "The API caller or the merchant on whose behalf the API call is initiated is not allowed to vault the given source. Please contact PayPal customer support for assistance."
        ]
      },
      "cryptogram-required3-issue": {
        "type": "string",
        "enum": [
          "CRYPTOGRAM_REQUIRED"
        ]
      },
      "cryptogram-required3-description": {
        "type": "string",
        "enum": [
          "Cryptogram is required if authentication method is CRYPTOGRAM 3DS."
        ]
      },
      "emv-data-required1-issue": {
        "type": "string",
        "enum": [
          "EMV_DATA_REQUIRED"
        ]
      },
      "emv-data-required1-description": {
        "type": "string",
        "enum": [
          "EMV Data is required if authentication method is EMV."
        ]
      },
      "alias-declined-by-processor1-issue": {
        "type": "string",
        "enum": [
          "ALIAS_DECLINED_BY_PROCESSOR"
        ]
      },
      "alias-declined-by-processor1-description": {
        "type": "string",
        "enum": [
          "The provided alias was declined by the processor. Please create a new order with a different alias_key and/or alias_label and try again."
        ]
      },
      "blik-one-click-missing-required-parameter1-issue": {
        "type": "string",
        "enum": [
          "BLIK_ONE_CLICK_MISSING_REQUIRED_PARAMETER"
        ]
      },
      "blik-one-click-first-transaction-params": {
        "type": "string",
        "enum": [
          "Blik's one_click flow requires one_click.auth_code and one_click.alias_label parameters for the buyer's first transaction. For all subsequent transactions,only the one_click.alias_key parameter is required."
        ]
      },
      "not-eligible-for-token-processing-issue": {
        "type": "string",
        "enum": [
          "NOT_ELIGIBLE_FOR_TOKEN_PROCESSING"
        ]
      },
      "not-eligible-for-token-processing-description": {
        "type": "string",
        "enum": [
          "API caller is not enabled to process payments with the specified type of token. Please contact customer support to request permissions to process transactions with this type of token."
        ]
      },
      "permission-denied1-issue": {
        "type": "string",
        "enum": [
          "PERMISSION_DENIED"
        ]
      },
      "permission-denied1-description": {
        "type": "string",
        "enum": [
          "You do not have permission to access or perform operations on this resource."
        ]
      },
      "permission-denied-for-donation-items-issue": {
        "type": "string",
        "enum": [
          "PERMISSION_DENIED_FOR_DONATION_ITEMS"
        ]
      },
      "permission-denied-for-donation-items-description": {
        "type": "string",
        "enum": [
          "The API Caller or Payee have not been granted appropriate permissions to send 'items.category' as 'DONATION'. Please speak to your account manager if you want to process these type of items."
        ]
      },
      "action-does-not-match-intent-issue": {
        "type": "string",
        "enum": [
          "ACTION_DOES_NOT_MATCH_INTENT"
        ]
      },
      "action-does-not-match-intent-description": {
        "type": "string",
        "enum": [
          "Order was created with an intent to 'CAPTURE'. Please use v2/checkout/orders/order_id/capture to complete the transaction or alternately Create an order with an intent of 'AUTHORIZE'."
        ]
      },
      "agreement-already-cancelled1-issue": {
        "type": "string",
        "enum": [
          "AGREEMENT_ALREADY_CANCELLED"
        ]
      },
      "agreement-already-cancelled1-description": {
        "type": "string",
        "enum": [
          "The requested agreement is already canceled."
        ]
      },
      "billing-agreement-not-found1-issue": {
        "type": "string",
        "enum": [
          "BILLING_AGREEMENT_NOT_FOUND"
        ]
      },
      "billing-agreement-not-found1-description": {
        "type": "string",
        "enum": [
          "The requested Billing Agreement token was not found."
        ]
      },
      "missing-previous-reference2-issue": {
        "type": "string",
        "enum": [
          "MISSING_PREVIOUS_REFERENCE"
        ]
      },
      "missing-previous-reference2-description": {
        "type": "string",
        "enum": [
          "For Merchant initiated network token transactions, either the payment_source.card.stored_credential.previous_network_transaction_reference or payment_source.card.stored_credential.previous_transaction_reference must be included in the request."
        ]
      },
      "missing-cryptogram2-issue": {
        "type": "string",
        "enum": [
          "MISSING_CRYPTOGRAM"
        ]
      },
      "missing-cryptogram2-description": {
        "type": "string",
        "enum": [
          "Cryptogram is mandatory for any customer initiated network token transactions."
        ]
      },
      "card-brand-not-supported-issue": {
        "type": "string",
        "enum": [
          "CARD_BRAND_NOT_SUPPORTED"
        ]
      },
      "card-brand-not-supported-description": {
        "type": "string",
        "enum": [
          "Processing of this card brand is not supported. Please use another card to continue with this transaction."
        ]
      },
      "declined-due-to-related-txn-issue": {
        "type": "string",
        "enum": [
          "DECLINED_DUE_TO_RELATED_TXN"
        ]
      },
      "declined-due-to-related-txn-description": {
        "type": "string",
        "enum": [
          "One or more transactions in this Order did not succeed. Since this Order is being processed as an All or None Order, if one or more transactions in this Order do not succeed, then all purchase units are marked declined and will not be processed."
        ]
      },
      "domestic-transaction-required1-issue": {
        "type": "string",
        "enum": [
          "DOMESTIC_TRANSACTION_REQUIRED"
        ]
      },
      "domestic-transaction-required1-description": {
        "type": "string",
        "enum": [
          "This transaction requires the payee and payer to be resident in the same country, a domestic transaction is required to create this payment."
        ]
      },
      "duplicate-invoice-id1-issue": {
        "type": "string",
        "enum": [
          "DUPLICATE_INVOICE_ID"
        ]
      },
      "duplicate-invoice-id1-description": {
        "type": "string",
        "enum": [
          "Duplicate Invoice ID detected. To avoid a potential duplicate transaction your account setting requires that Invoice Id be unique for each transaction."
        ]
      },
      "order-not-approved-issue": {
        "type": "string",
        "enum": [
          "ORDER_NOT_APPROVED"
        ]
      },
      "order-not-approved-description": {
        "type": "string",
        "enum": [
          "Payer has not yet approved the Order for payment. Please redirect the payer to the 'rel':'approve' url returned as part of the HATEOAS links within the Create Order call."
        ]
      },
      "max-number-of-payment-attempts-exceeded1-issue": {
        "type": "string",
        "enum": [
          "MAX_NUMBER_OF_PAYMENT_ATTEMPTS_EXCEEDED"
        ]
      },
      "exceeded-max-payment-attempts-error": {
        "type": "string",
        "enum": [
          "You have exceeded the maximum number of payment attempts."
        ]
      },
      "payee-blocked-transaction1-issue": {
        "type": "string",
        "enum": [
          "PAYEE_BLOCKED_TRANSACTION"
        ]
      },
      "payee-blocked-transaction1-description": {
        "type": "string",
        "enum": [
          "The Fraud settings for this seller are such that this payment cannot be executed."
        ]
      },
      "payee-fx-rate-id-expired2-issue": {
        "type": "string",
        "enum": [
          "PAYEE_FX_RATE_ID_EXPIRED"
        ]
      },
      "payee-fx-rate-id-expired2-description": {
        "type": "string",
        "enum": [
          "The specified FX Rate ID has expired. Please specify a different FX Rate Id and try the request again. Alternately, remove the FX Rate ID to process the request using the default exchange rate."
        ]
      },
      "unsupported-intent-for-payment-source-issue": {
        "type": "string",
        "enum": [
          "UNSUPPORTED_INTENT_FOR_PAYMENT_SOURCE"
        ]
      },
      "unsupported-intent-for-payment-source-description": {
        "type": "string",
        "enum": [
          "`intent=AUTHORIZE` is not supported for the specified payment_source. Only `intent=CAPTURE` is supported."
        ]
      },
      "payer-account-locked-or-closed1-issue": {
        "type": "string",
        "enum": [
          "PAYER_ACCOUNT_LOCKED_OR_CLOSED"
        ]
      },
      "payer-account-locked-or-closed1-description": {
        "type": "string",
        "enum": [
          "The payer account cannot be used for this transaction."
        ]
      },
      "payer-account-restricted1-issue": {
        "type": "string",
        "enum": [
          "PAYER_ACCOUNT_RESTRICTED"
        ]
      },
      "payer-account-restricted1-description": {
        "type": "string",
        "enum": [
          "PAYER_ACCOUNT_RESTRICTED"
        ]
      },
      "payer-cannot-pay1-issue": {
        "type": "string",
        "enum": [
          "PAYER_CANNOT_PAY"
        ]
      },
      "payer-cannot-pay1-description": {
        "type": "string",
        "enum": [
          "Payer cannot pay for this transaction. Please contact the payer to find other ways to pay for this transaction."
        ]
      },
      "paypal-transaction-id-expired-issue": {
        "type": "string",
        "enum": [
          "PAYPAL_TRANSACTION_ID_EXPIRED"
        ]
      },
      "paypal-transaction-id-expired-description": {
        "type": "string",
        "enum": [
          "Specified `paypal_transaction_id` has expired. PayPal transaction ID expires 4 years after the date of the initial transaction."
        ]
      },
      "pnref-expired-issue": {
        "type": "string",
        "enum": [
          "PNREF_EXPIRED"
        ]
      },
      "pnref-expired-description": {
        "type": "string",
        "enum": [
          "Specified `pnref` has expired. PNREF expires 15 months after the date of the initial transaction."
        ]
      },
      "referenced-card-expired-issue": {
        "type": "string",
        "enum": [
          "REFERENCED_CARD_EXPIRED"
        ]
      },
      "referenced-card-expired-description": {
        "type": "string",
        "enum": [
          "The card underlying the token has expired and hence cannot be used to process a payment."
        ]
      },
      "token-expired2-issue": {
        "type": "string",
        "enum": [
          "TOKEN_EXPIRED"
        ]
      },
      "token-expired2-description": {
        "type": "string",
        "enum": [
          "The token is expired and cannot be used for payment."
        ]
      },
      "token-id-not-found-issue": {
        "type": "string",
        "enum": [
          "TOKEN_ID_NOT_FOUND"
        ]
      },
      "token-id-not-found-description": {
        "type": "string",
        "enum": [
          "Specified token was not found. Verify the token and try the request again."
        ]
      },
      "transaction-limit-exceeded1-issue": {
        "type": "string",
        "enum": [
          "TRANSACTION_LIMIT_EXCEEDED"
        ]
      },
      "transaction-limit-exceeded1-description": {
        "type": "string",
        "enum": [
          "Total payment amount exceeded transaction limit."
        ]
      },
      "transaction-receiving-limit-exceeded1-issue": {
        "type": "string",
        "enum": [
          "TRANSACTION_RECEIVING_LIMIT_EXCEEDED"
        ]
      },
      "transaction-receiving-limit-exceeded1-description": {
        "type": "string",
        "enum": [
          "The transaction exceeds the receiver's receiving limit."
        ]
      },
      "transaction-refused1-issue": {
        "type": "string",
        "enum": [
          "TRANSACTION_REFUSED"
        ]
      },
      "transaction-refused1-description": {
        "type": "string",
        "enum": [
          "The request was refused."
        ]
      },
      "order-already-authorized1-issue": {
        "type": "string",
        "enum": [
          "ORDER_ALREADY_AUTHORIZED"
        ]
      },
      "order-already-authorized1-description": {
        "type": "string",
        "enum": [
          "Order already authorized.If 'intent=AUTHORIZE' only one authorization per order is allowed."
        ]
      },
      "auth-capture-not-enabled1-issue": {
        "type": "string",
        "enum": [
          "AUTH_CAPTURE_NOT_ENABLED"
        ]
      },
      "auth-capture-not-enabled1-description": {
        "type": "string",
        "enum": [
          "Authorization and Capture feature is not enabled for the merchant. Make sure that the recipient of the funds is a verified business account."
        ]
      },
      "amount-cannot-be-specified-issue": {
        "type": "string",
        "enum": [
          "AMOUNT_CANNOT_BE_SPECIFIED"
        ]
      },
      "amount-cannot-be-specified-description": {
        "type": "string",
        "enum": [
          "An authorization amount can only be specified if an Order has been saved by calling /v2/checkout/orders/{order_id}/save.  Please save the order and try again."
        ]
      },
      "authorization-amount-exceeded-issue": {
        "type": "string",
        "enum": [
          "AUTHORIZATION_AMOUNT_EXCEEDED"
        ]
      },
      "authorization-amount-exceeded-description": {
        "type": "string",
        "enum": [
          "Authorization amount specified exceeded allowable limit. Specify a different amount and try the request again. Alternately, contact Customer Support to increase your limits. Local regulations (e.g. in PSD2 countries) prohibit overages above the amount authorized by the payer."
        ]
      },
      "authorization-currency-mismatch-issue": {
        "type": "string",
        "enum": [
          "AUTHORIZATION_CURRENCY_MISMATCH"
        ]
      },
      "authorization-currency-mismatch-description": {
        "type": "string",
        "enum": [
          "The currency of the authorization should be same as that in which the Order was created and approved by the Payer. Please check the 'currency_code' and try again."
        ]
      },
      "max-authorization-count-exceeded-issue": {
        "type": "string",
        "enum": [
          "MAX_AUTHORIZATION_COUNT_EXCEEDED"
        ]
      },
      "max-authorization-count-exceeded-description": {
        "type": "string",
        "enum": [
          "Maximum number of authorization allowed for the order is reached. Please contact Customer Support if you need to increase your limit."
        ]
      },
      "order-completed-or-voided-issue": {
        "type": "string",
        "enum": [
          "ORDER_COMPLETED_OR_VOIDED"
        ]
      },
      "order-completed-or-voided-description": {
        "type": "string",
        "enum": [
          "Order is voided or completed and hence cannot be authorized."
        ]
      },
      "order-expired-issue": {
        "type": "string",
        "enum": [
          "ORDER_EXPIRED"
        ]
      },
      "order-expired-description": {
        "type": "string",
        "enum": [
          "Order is expired and hence cannot be authorized. Please contact Customer Support if you need to increase your order validity period."
        ]
      },
      "invalid-pickup-address-issue": {
        "type": "string",
        "enum": [
          "INVALID_PICKUP_ADDRESS"
        ]
      },
      "invalid-pickup-address-description": {
        "type": "string",
        "enum": [
          "If the 'shipping_option.type' is set as 'PICKUP' then the 'shipping_detail.name.full_name' should start with 'S2S' meaning Ship To Store. Example: 'S2S My Store'."
        ]
      },
      "shipping-address-invalid2-issue": {
        "type": "string",
        "enum": [
          "SHIPPING_ADDRESS_INVALID"
        ]
      },
      "shipping-address-invalid2-description": {
        "type": "string",
        "enum": [
          "Provided shipping address is invalid."
        ]
      },
      "payment-type-not-supported-for-intent-issue": {
        "type": "string",
        "enum": [
          "PAYMENT_TYPE_NOT_SUPPORTED_FOR_INTENT"
        ]
      },
      "payment-type-not-supported-for-intent-description": {
        "type": "string",
        "enum": [
          "Provided payment type not supported for order intent. Payment authorizations are supported only for order with `intent=AUTHORIZE` and payment captures are supported only for order with `intent=CAPTURE`."
        ]
      },
      "billing-agreement-id-mismatch-issue": {
        "type": "string",
        "enum": [
          "BILLING_AGREEMENT_ID_MISMATCH"
        ]
      },
      "billing-agreement-id-mismatch-description": {
        "type": "string",
        "enum": [
          "Billing Agreement ID must exactly match the Billing Agreement ID that was provided during order creation."
        ]
      },
      "preferred-payment-source-mismatch-issue": {
        "type": "string",
        "enum": [
          "PREFERRED_PAYMENT_SOURCE_MISMATCH"
        ]
      },
      "preferred-payment-source-mismatch-description": {
        "type": "string",
        "enum": [
          "Payment Source must exactly match the Preferred Payment Source that was provided during order creation."
        ]
      },
      "incompatible-parameter-value2-issue": {
        "type": "string",
        "enum": [
          "INCOMPATIBLE_PARAMETER_VALUE"
        ]
      },
      "incompatible-parameter-value2-description": {
        "type": "string",
        "enum": [
          "The value of the field is incompatible/redundant with other fields in the order."
        ]
      },
      "invalid-previous-transaction-reference1-issue": {
        "type": "string",
        "enum": [
          "INVALID_PREVIOUS_TRANSACTION_REFERENCE"
        ]
      },
      "invalid-previous-transaction-reference-error": {
        "type": "string",
        "enum": [
          "The authorization or capture referenced by `previous_transaction_reference` is not valid. This could be either because the previous_transaction_reference is not found or doesn't belong to the payee. Please use a valid `previous_transaction_reference`."
        ]
      },
      "previous-transaction-reference-chargeback-issue": {
        "type": "string",
        "enum": [
          "PREVIOUS_TRANSACTION_REFERENCE_HAS_CHARGEBACK"
        ]
      },
      "capture-with-chargeback-not-usable-desc": {
        "type": "string",
        "enum": [
          "The capture referenced by `previous_transaction_reference` has a chargeback and hence cannot be used for this order. Please use a `previous_transaction_reference` which does not have a chargeback."
        ]
      },
      "previous-transaction-reference-voided1-issue": {
        "type": "string",
        "enum": [
          "PREVIOUS_TRANSACTION_REFERENCE_VOIDED"
        ]
      },
      "previous-transaction-reference-voided1-description": {
        "type": "string",
        "enum": [
          "The status of authorization referenced by `previous_transaction_reference` is `VOIDED` and hence cannot be used for this order. Please use a `previous_transaction_reference` whose status is not `VOIDED`."
        ]
      },
      "payment-source-mismatch1-issue": {
        "type": "string",
        "enum": [
          "PAYMENT_SOURCE_MISMATCH"
        ]
      },
      "payment-source-mismatch1-description": {
        "type": "string",
        "enum": [
          "The `payment_source` in the request must match the `payment_source` used for the authorization or capture referenced by `previous_transaction_reference`. Please use `previous_transaction_reference` whose `payment_source` matches with the `payment_source` specified in the order."
        ]
      },
      "merchant-initiated-with-security-code1-issue": {
        "type": "string",
        "enum": [
          "MERCHANT_INITIATED_WITH_SECURITY_CODE"
        ]
      },
      "merchant-initiated-with-security-code1-description": {
        "type": "string",
        "enum": [
          "`stored_payment_source.payment_initiator` = `MERCHANT` is not supported if `payment_source.card.security_code` is present in the order. `security_code` can be present in the order only when customer is the payment initiator. It is semantically incorrect to perform a merchant initiated payment with `security_code` is the order."
        ]
      },
      "merchant-initiated-auth-with-results": {
        "type": "string",
        "enum": [
          "MERCHANT_INITIATED_WITH_AUTHENTICATION_RESULTS"
        ]
      },
      "err-merch-init-auth-results-3ds-invalid": {
        "type": "string",
        "enum": [
          "`stored_payment_source.payment_initiator` = `MERCHANT` is not supported if 3D-Secure authentication results are present in the order. 3D-Secure authentication results can be present in the order only when customer is the payment initiator. It is semantically incorrect to perform a merchant initiated payment with 3D-Secure authentication results is the order."
        ]
      },
      "merchant-initiated-multiple-purchase-units-issue": {
        "type": "string",
        "enum": [
          "MERCHANT_INITIATED_WITH_MULTIPLE_PURCHASE_UNITS"
        ]
      },
      "err-merch-init-multi-units-not-supported": {
        "type": "string",
        "enum": [
          "`stored_payment_source.payment_initiator` = `MERCHANT` is not supported if more than one purchase_unit is present in the Order. Merchant initiated payments are not supported from orders with more than one purchase_unit. Please retry the request with multiple Order requests (one for each purchase_unit)."
        ]
      },
      "return-url-required1-issue": {
        "type": "string",
        "enum": [
          "RETURN_URL_REQUIRED"
        ]
      },
      "return-url-required1-description": {
        "type": "string",
        "enum": [
          "The return url is required when attempting to vault this source."
        ]
      },
      "cancel-url-required1-issue": {
        "type": "string",
        "enum": [
          "CANCEL_URL_REQUIRED"
        ]
      },
      "cancel-url-required1-description": {
        "type": "string",
        "enum": [
          "The cancel url is required when attempting to vault this source."
        ]
      },
      "payer-action-required-issue": {
        "type": "string",
        "enum": [
          "PAYER_ACTION_REQUIRED"
        ]
      },
      "payer-action-required-description": {
        "type": "string",
        "enum": [
          "Transaction cannot complete successfully, instruct the buyer to return to PayPal."
        ]
      },
      "apple-pay-amount-mismatch2-issue": {
        "type": "string",
        "enum": [
          "APPLE_PAY_AMOUNT_MISMATCH"
        ]
      },
      "apple-pay-amount-mismatch2-description": {
        "type": "string",
        "enum": [
          "The 'amount' specified in the Order should match the amount that was viewed and authorized by the payer/buyer on Apple Pay. If the amount has changed, please redirect the buyer to authorize the order again via Apple Pay."
        ]
      },
      "card-number-required1-issue": {
        "type": "string",
        "enum": [
          "CARD_NUMBER_REQUIRED"
        ]
      },
      "card-number-required1-description": {
        "type": "string",
        "enum": [
          "The card number is required when attempting to process payment with card."
        ]
      },
      "card-expiry-required1-issue": {
        "type": "string",
        "enum": [
          "CARD_EXPIRY_REQUIRED"
        ]
      },
      "card-expiry-required1-description": {
        "type": "string",
        "enum": [
          "The card expiry is required when attempting to process payment with card."
        ]
      },
      "vault-instruction-required2-issue": {
        "type": "string",
        "enum": [
          "VAULT_INSTRUCTION_REQUIRED"
        ]
      },
      "vault-instruction-required2-description": {
        "type": "string",
        "enum": [
          "Vault instruction is required. Please use `vault.store_in_vault` to provide vault instruction."
        ]
      },
      "mismatched-vault-id-to-payment-source2-issue": {
        "type": "string",
        "enum": [
          "MISMATCHED_VAULT_ID_TO_PAYMENT_SOURCE"
        ]
      },
      "mismatched-vault-id-to-payment-source2-description": {
        "type": "string",
        "enum": [
          "The vault_id does not match the payment_source provided. Please verify that the vault_id token used refers to the matching payment_source and try again. For example, a PayPal token cannot be passed in the vault_id field in the payment_source.card object."
        ]
      },
      "order-cannot-be-saved-issue": {
        "type": "string",
        "enum": [
          "ORDER_CANNOT_BE_SAVED"
        ]
      },
      "order-cannot-be-saved-description": {
        "type": "string",
        "enum": [
          "The option to save an order is only available if the `intent` is AUTHORIZE and `processing_instruction` uses one of the `ORDER_SAVED` options. For example, `intent`=AUTHORIZE, `processing_instruction`=ORDER_SAVED_EXPLICITLY. Please change the intent and/or processing_instruction` and try again."
        ]
      },
      "save-order-not-supported-issue": {
        "type": "string",
        "enum": [
          "SAVE_ORDER_NOT_SUPPORTED"
        ]
      },
      "save-order-not-supported-description": {
        "type": "string",
        "enum": [
          "The API caller account is setup in a way that does not allow it to be used for saving the order. This functionality is not available for PayPal Commerce Platform for Platforms & Marketplaces."
        ]
      },
      "not-eligible-for-pnref-processing2-issue": {
        "type": "string",
        "enum": [
          "NOT_ELIGIBLE_FOR_PNREF_PROCESSING"
        ]
      },
      "not-eligible-for-pnref-processing2-description": {
        "type": "string",
        "enum": [
          "API caller is not enabled to process payments with the `pnref`. Please contact customer support to request permissions to process transactions with PNREF."
        ]
      },
      "not-eligible-paypal-tx-id-processing": {
        "type": "string",
        "enum": [
          "NOT_ELIGIBLE_FOR_PAYPAL_TRANSACTION_ID_PROCESSING"
        ]
      },
      "paypal-tx-id-processing-permission-needed": {
        "type": "string",
        "enum": [
          "API caller is not enable to process payments using `paypal_transaction_id`. Please contact customer support to request permissions to process transactions with PayPal transaction ID."
        ]
      },
      "paypal-transaction-id-not-found2-issue": {
        "type": "string",
        "enum": [
          "PAYPAL_TRANSACTION_ID_NOT_FOUND"
        ]
      },
      "paypal-transaction-id-not-found2-description": {
        "type": "string",
        "enum": [
          "Specified `paypal_transaction_id` was not found. Verify the value and try the request again."
        ]
      },
      "pnref-not-found2-issue": {
        "type": "string",
        "enum": [
          "PNREF_NOT_FOUND"
        ]
      },
      "pnref-not-found2-description": {
        "type": "string",
        "enum": [
          "Specified `pnref` was not found. Verify the value and try the request again."
        ]
      },
      "invalid-security-code-length2-issue": {
        "type": "string",
        "enum": [
          "INVALID_SECURITY_CODE_LENGTH"
        ]
      },
      "invalid-security-code-length2-description": {
        "type": "string",
        "enum": [
          "The security_code length is invalid for the specified card brand."
        ]
      },
      "required-param-for-cust-initiated-payment": {
        "type": "string",
        "enum": [
          "REQUIRED_PARAMETER_FOR_CUSTOMER_INITIATED_PAYMENT"
        ]
      },
      "consent-needed-issue": {
        "type": "string",
        "enum": [
          "CONSENT_NEEDED"
        ]
      },
      "consent-needed-description": {
        "type": "string",
        "enum": [
          "CONSENT_NEEDED"
        ]
      },
      "not-eligible-for-token-processing1-issue": {
        "type": "string",
        "enum": [
          "NOT_ELIGIBLE_FOR_TOKEN_PROCESSING"
        ]
      },
      "not-eligible-for-token-processing1-description": {
        "type": "string",
        "enum": [
          "API caller is not enabled to process payments with the specified type of token. Please contact customer support to request permissions to process transactions with this type of token."
        ]
      },
      "permission-denied2-issue": {
        "type": "string",
        "enum": [
          "PERMISSION_DENIED"
        ]
      },
      "permission-denied2-description": {
        "type": "string",
        "enum": [
          "You do not have permission to access or perform operations on this resource."
        ]
      },
      "permission-denied-for-donation-items1-issue": {
        "type": "string",
        "enum": [
          "PERMISSION_DENIED_FOR_DONATION_ITEMS"
        ]
      },
      "permission-denied-for-donation-items1-description": {
        "type": "string",
        "enum": [
          "The API Caller or Payee have not been granted appropriate permissions to send 'items.category' as 'DONATION'. Please speak to your account manager if you want to process these type of items."
        ]
      },
      "agreement-already-cancelled2-issue": {
        "type": "string",
        "enum": [
          "AGREEMENT_ALREADY_CANCELLED"
        ]
      },
      "agreement-already-cancelled2-description": {
        "type": "string",
        "enum": [
          "The requested agreement is already canceled."
        ]
      },
      "billing-agreement-not-found2-issue": {
        "type": "string",
        "enum": [
          "BILLING_AGREEMENT_NOT_FOUND"
        ]
      },
      "billing-agreement-not-found2-description": {
        "type": "string",
        "enum": [
          "The requested Billing Agreement token was not found."
        ]
      },
      "declined-due-to-related-txn1-issue": {
        "type": "string",
        "enum": [
          "DECLINED_DUE_TO_RELATED_TXN"
        ]
      },
      "declined-due-to-related-txn1-description": {
        "type": "string",
        "enum": [
          "One or more transactions in this Order did not succeed. Since this Order is being processed as an All or None Order, if one or more transactions in this Order do not succeed, then all purchase units are marked declined and will not be processed."
        ]
      },
      "missing-previous-reference3-issue": {
        "type": "string",
        "enum": [
          "MISSING_PREVIOUS_REFERENCE"
        ]
      },
      "missing-previous-reference3-description": {
        "type": "string",
        "enum": [
          "For Merchant initiated network token transactions, either the payment_source.card.stored_credential.previous_network_transaction_reference or payment_source.card.stored_credential.previous_transaction_reference must be included in the request."
        ]
      },
      "missing-cryptogram3-issue": {
        "type": "string",
        "enum": [
          "MISSING_CRYPTOGRAM"
        ]
      },
      "missing-cryptogram3-description": {
        "type": "string",
        "enum": [
          "Cryptogram is mandatory for any customer initiated network token transactions."
        ]
      },
      "card-brand-not-supported1-issue": {
        "type": "string",
        "enum": [
          "CARD_BRAND_NOT_SUPPORTED"
        ]
      },
      "card-brand-not-supported1-description": {
        "type": "string",
        "enum": [
          "Processing of this card brand is not supported. Please use another card to continue with this transaction."
        ]
      },
      "compliance-violation1-issue": {
        "type": "string",
        "enum": [
          "COMPLIANCE_VIOLATION"
        ]
      },
      "compliance-violation1-description": {
        "type": "string",
        "enum": [
          "Transaction is declined due to compliance violation."
        ]
      },
      "domestic-transaction-required2-issue": {
        "type": "string",
        "enum": [
          "DOMESTIC_TRANSACTION_REQUIRED"
        ]
      },
      "domestic-transaction-required2-description": {
        "type": "string",
        "enum": [
          "This transaction requires the payee and payer to be resident in the same country, a domestic transaction is required to create this payment."
        ]
      },
      "duplicate-invoice-id2-issue": {
        "type": "string",
        "enum": [
          "DUPLICATE_INVOICE_ID"
        ]
      },
      "duplicate-invoice-id2-description": {
        "type": "string",
        "enum": [
          "Duplicate Invoice ID detected. To avoid a potential duplicate transaction your account setting requires that Invoice Id be unique for each transaction."
        ]
      },
      "instrument-declined1-issue": {
        "type": "string",
        "enum": [
          "INSTRUMENT_DECLINED"
        ]
      },
      "instrument-declined1-description": {
        "type": "string",
        "enum": [
          "The instrument presented  was either declined by the processor or bank, or it can't be used for this payment."
        ]
      },
      "order-not-approved1-issue": {
        "type": "string",
        "enum": [
          "ORDER_NOT_APPROVED"
        ]
      },
      "order-not-approved1-description": {
        "type": "string",
        "enum": [
          "Payer has not yet approved the Order for payment. Please redirect the payer to the 'rel':'approve' url returned as part of the HATEOAS links within the Create Order call or provide a valid `payment_source` in the request."
        ]
      },
      "max-number-of-payment-attempts-exceeded2-issue": {
        "type": "string",
        "enum": [
          "MAX_NUMBER_OF_PAYMENT_ATTEMPTS_EXCEEDED"
        ]
      },
      "exceeded-max-payment-attempts-desc": {
        "type": "string",
        "enum": [
          "You have exceeded the maximum number of payment attempts."
        ]
      },
      "payee-blocked-transaction2-issue": {
        "type": "string",
        "enum": [
          "PAYEE_BLOCKED_TRANSACTION"
        ]
      },
      "payee-blocked-transaction2-description": {
        "type": "string",
        "enum": [
          "The Fraud settings for this seller are such that this payment cannot be executed."
        ]
      },
      "payee-fx-rate-id-expired3-issue": {
        "type": "string",
        "enum": [
          "PAYEE_FX_RATE_ID_EXPIRED"
        ]
      },
      "payee-fx-rate-id-expired3-description": {
        "type": "string",
        "enum": [
          "The specified FX Rate ID has expired. Please specify a different FX Rate Id and try the request again. Alternately, remove the FX Rate ID to process the request using the default exchange rate."
        ]
      },
      "payer-account-locked-or-closed2-issue": {
        "type": "string",
        "enum": [
          "PAYER_ACCOUNT_LOCKED_OR_CLOSED"
        ]
      },
      "payer-account-locked-or-closed2-description": {
        "type": "string",
        "enum": [
          "The payer account cannot be used for this transaction."
        ]
      },
      "payer-account-restricted2-issue": {
        "type": "string",
        "enum": [
          "PAYER_ACCOUNT_RESTRICTED"
        ]
      },
      "payer-account-restricted2-description": {
        "type": "string",
        "enum": [
          "PAYER_ACCOUNT_RESTRICTED"
        ]
      },
      "payer-cannot-pay2-issue": {
        "type": "string",
        "enum": [
          "PAYER_CANNOT_PAY"
        ]
      },
      "payer-cannot-pay2-description": {
        "type": "string",
        "enum": [
          "Payer cannot pay for this transaction. Please contact the payer to find other ways to pay for this transaction."
        ]
      },
      "paypal-transaction-id-expired1-issue": {
        "type": "string",
        "enum": [
          "PAYPAL_TRANSACTION_ID_EXPIRED"
        ]
      },
      "paypal-transaction-id-expired1-description": {
        "type": "string",
        "enum": [
          "Specified `paypal_transaction_id` has expired. PayPal transaction ID expires 4 years after the date of the initial transaction."
        ]
      },
      "pnref-expired1-issue": {
        "type": "string",
        "enum": [
          "PNREF_EXPIRED"
        ]
      },
      "pnref-expired1-description": {
        "type": "string",
        "enum": [
          "Specified `pnref` has expired. PNREF expires 15 months after the date of the initial transaction."
        ]
      },
      "referenced-card-expired1-issue": {
        "type": "string",
        "enum": [
          "REFERENCED_CARD_EXPIRED"
        ]
      },
      "referenced-card-expired1-description": {
        "type": "string",
        "enum": [
          "The card underlying the token has expired and hence cannot be used to process a payment."
        ]
      },
      "token-id-not-found1-issue": {
        "type": "string",
        "enum": [
          "TOKEN_ID_NOT_FOUND"
        ]
      },
      "token-id-not-found1-description": {
        "type": "string",
        "enum": [
          "Specified token was not found. Verify the token and try the request again."
        ]
      },
      "transaction-limit-exceeded2-issue": {
        "type": "string",
        "enum": [
          "TRANSACTION_LIMIT_EXCEEDED"
        ]
      },
      "transaction-limit-exceeded2-description": {
        "type": "string",
        "enum": [
          "Total payment amount exceeded transaction limit."
        ]
      },
      "transaction-receiving-limit-exceeded2-issue": {
        "type": "string",
        "enum": [
          "TRANSACTION_RECEIVING_LIMIT_EXCEEDED"
        ]
      },
      "transaction-receiving-limit-exceeded2-description": {
        "type": "string",
        "enum": [
          "The transaction exceeds the receiver's receiving limit."
        ]
      },
      "transaction-refused2-issue": {
        "type": "string",
        "enum": [
          "TRANSACTION_REFUSED"
        ]
      },
      "transaction-refused2-description": {
        "type": "string",
        "enum": [
          "The request was refused."
        ]
      },
      "redirect-payer-for-alternate-funding-issue": {
        "type": "string",
        "enum": [
          "REDIRECT_PAYER_FOR_ALTERNATE_FUNDING"
        ]
      },
      "redirect-payer-for-alternate-funding-description": {
        "type": "string",
        "enum": [
          "Transaction failed. Redirect the payer to select another funding source."
        ]
      },
      "order-already-captured1-issue": {
        "type": "string",
        "enum": [
          "ORDER_ALREADY_CAPTURED"
        ]
      },
      "order-already-captured1-description": {
        "type": "string",
        "enum": [
          "Order already captured.If 'intent=CAPTURE' only one capture per order is allowed."
        ]
      },
      "transaction-blocked-by-payee1-issue": {
        "type": "string",
        "enum": [
          "TRANSACTION_BLOCKED_BY_PAYEE"
        ]
      },
      "transaction-blocked-by-payee1-description": {
        "type": "string",
        "enum": [
          "Transaction blocked by Payee’s Fraud Protection settings."
        ]
      },
      "auth-capture-not-enabled2-issue": {
        "type": "string",
        "enum": [
          "AUTH_CAPTURE_NOT_ENABLED"
        ]
      },
      "auth-capture-not-enabled2-description": {
        "type": "string",
        "enum": [
          "Authorization and Capture feature is not enabled for the merchant. Make sure that the recipient of the funds is a verified business account."
        ]
      },
      "not-enabled-for-bank-processing-issue": {
        "type": "string",
        "enum": [
          "NOT_ENABLED_FOR_BANK_PROCESSING"
        ]
      },
      "not-enabled-for-bank-processing-description": {
        "type": "string",
        "enum": [
          "The API Caller account is not setup to be able to process bank payments. Please contact your PayPal account manager."
        ]
      },
      "payee-not-enabled-for-bank-processing-issue": {
        "type": "string",
        "enum": [
          "PAYEE_NOT_ENABLED_FOR_BANK_PROCESSING"
        ]
      },
      "payee-not-enabled-for-bank-processing-description": {
        "type": "string",
        "enum": [
          "Payee account is not setup to be able to process bank payments. Please contact your PayPal account manager."
        ]
      },
      "payee-not-enabled-for-card-processing-issue": {
        "type": "string",
        "enum": [
          "PAYEE_NOT_ENABLED_FOR_CARD_PROCESSING"
        ]
      },
      "payee-not-enabled-for-card-processing-description": {
        "type": "string",
        "enum": [
          "Payee account is not setup to be able to process card payments. Please contact PayPal customer support."
        ]
      },
      "invalid-pickup-address1-issue": {
        "type": "string",
        "enum": [
          "INVALID_PICKUP_ADDRESS"
        ]
      },
      "invalid-pickup-address1-description": {
        "type": "string",
        "enum": [
          "If the 'shipping_option.type' is set as 'PICKUP' then the 'shipping_detail.name.full_name' should start with 'S2S' meaning Ship To Store. Example: 'S2S My Store'."
        ]
      },
      "shipping-address-invalid3-issue": {
        "type": "string",
        "enum": [
          "SHIPPING_ADDRESS_INVALID"
        ]
      },
      "shipping-address-invalid3-description": {
        "type": "string",
        "enum": [
          "Provided shipping address is invalid."
        ]
      },
      "payment-source-not-supported-issue": {
        "type": "string",
        "enum": [
          "PAYMENT_SOURCE_NOT_SUPPORTED"
        ]
      },
      "payment-source-not-supported-description": {
        "type": "string",
        "enum": [
          "The payer selected method of payment is not supported when multiple purchase units are specified for an Order."
        ]
      },
      "order-completion-in-progress-issue": {
        "type": "string",
        "enum": [
          "ORDER_COMPLETION_IN_PROGRESS"
        ]
      },
      "order-completion-in-progress-description": {
        "type": "string",
        "enum": [
          "The order was created with processing_instruction of ORDER_COMPLETE_ON_PAYMENT_APPROVAL. The customer has approved the payment and PayPal is still in the process of capturing the order on your behalf as instructed. Please try your request again."
        ]
      },
      "billing-agreement-id-mismatch1-issue": {
        "type": "string",
        "enum": [
          "BILLING_AGREEMENT_ID_MISMATCH"
        ]
      },
      "billing-agreement-id-mismatch1-description": {
        "type": "string",
        "enum": [
          "Billing Agreement ID must exactly match the Billing Agreement ID that was provided during order creation."
        ]
      },
      "preferred-payment-source-mismatch1-issue": {
        "type": "string",
        "enum": [
          "PREFERRED_PAYMENT_SOURCE_MISMATCH"
        ]
      },
      "preferred-payment-source-mismatch1-description": {
        "type": "string",
        "enum": [
          "Payment Source must exactly match the Preferred Payment Source that was provided during order creation."
        ]
      },
      "incompatible-parameter-value3-issue": {
        "type": "string",
        "enum": [
          "INCOMPATIBLE_PARAMETER_VALUE"
        ]
      },
      "incompatible-parameter-value3-description": {
        "type": "string",
        "enum": [
          "The value of the field is incompatible/redundant with other fields in the order."
        ]
      },
      "invalid-previous-transaction-reference2-issue": {
        "type": "string",
        "enum": [
          "INVALID_PREVIOUS_TRANSACTION_REFERENCE"
        ]
      },
      "invalid-previous-tx-reference": {
        "type": "string",
        "enum": [
          "The authorization or capture referenced by `previous_transaction_reference` is not valid. This could be either because the previous_transaction_reference is not found or doesn't belong to the payee. Please use a valid `previous_transaction_reference`."
        ]
      },
      "prev-tx-ref-has-chargeback": {
        "type": "string",
        "enum": [
          "PREVIOUS_TRANSACTION_REFERENCE_HAS_CHARGEBACK"
        ]
      },
      "capture-with-chargeback-not-usable-error": {
        "type": "string",
        "enum": [
          "The capture referenced by `previous_transaction_reference` has a chargeback and hence cannot be used for this order. Please use a `previous_transaction_reference` which does not have a chargeback."
        ]
      },
      "previous-transaction-reference-voided2-issue": {
        "type": "string",
        "enum": [
          "PREVIOUS_TRANSACTION_REFERENCE_VOIDED"
        ]
      },
      "previous-transaction-reference-voided2-description": {
        "type": "string",
        "enum": [
          "The status of authorization referenced by `previous_transaction_reference` is `VOIDED` and hence cannot be used for this order. Please use a `previous_transaction_reference` whose status is not `VOIDED`."
        ]
      },
      "payment-source-mismatch2-issue": {
        "type": "string",
        "enum": [
          "PAYMENT_SOURCE_MISMATCH"
        ]
      },
      "payment-source-mismatch2-description": {
        "type": "string",
        "enum": [
          "The `payment_source` in the request must match the `payment_source` used for the authorization or capture referenced by `previous_transaction_reference`. Please use `previous_transaction_reference` whose `payment_source` matches with the `payment_source` specified in the order."
        ]
      },
      "merchant-initiated-with-security-code2-issue": {
        "type": "string",
        "enum": [
          "MERCHANT_INITIATED_WITH_SECURITY_CODE"
        ]
      },
      "merchant-initiated-with-security-code2-description": {
        "type": "string",
        "enum": [
          "`stored_payment_source.payment_initiator` = `MERCHANT` is not supported if `payment_source.card.security_code` is present in the order. `security_code` can be present in the order only when customer is the payment initiator. It is semantically incorrect to perform a merchant initiated payment with `security_code` is the order."
        ]
      },
      "merchant-initiated-with-auth-results": {
        "type": "string",
        "enum": [
          "MERCHANT_INITIATED_WITH_AUTHENTICATION_RESULTS"
        ]
      },
      "err-merch-init-auth-results-3ds-invalid-desc": {
        "type": "string",
        "enum": [
          "`stored_payment_source.payment_initiator` = `MERCHANT` is not supported if 3D-Secure authentication results are present in the order. 3D-Secure authentication results can be present in the order only when customer is the payment initiator. It is semantically incorrect to perform a merchant initiated payment with 3D-Secure authentication results is the order."
        ]
      },
      "merch-init-multi-purchase-units": {
        "type": "string",
        "enum": [
          "MERCHANT_INITIATED_WITH_MULTIPLE_PURCHASE_UNITS"
        ]
      },
      "err-merch-init-multi-units-not-supported-desc": {
        "type": "string",
        "enum": [
          "`stored_payment_source.payment_initiator` = `MERCHANT` is not supported if more than one purchase_unit is present in the Order. Merchant initiated payments are not supported from orders with more than one purchase_unit. Please retry the request with multiple Order requests (one for each purchase_unit)."
        ]
      },
      "return-url-required2-issue": {
        "type": "string",
        "enum": [
          "RETURN_URL_REQUIRED"
        ]
      },
      "return-url-required2-description": {
        "type": "string",
        "enum": [
          "The return url is required when attempting to vault this source."
        ]
      },
      "cancel-url-required2-issue": {
        "type": "string",
        "enum": [
          "CANCEL_URL_REQUIRED"
        ]
      },
      "cancel-url-required2-description": {
        "type": "string",
        "enum": [
          "The cancel url is required when attempting to vault this source."
        ]
      },
      "setup-error-for-bank1-issue": {
        "type": "string",
        "enum": [
          "SETUP_ERROR_FOR_BANK"
        ]
      },
      "setup-error-for-bank1-description": {
        "type": "string",
        "enum": [
          "The API Caller account setup, for bank payments, is incomplete or incorrect. Please contact your PayPal account manager."
        ]
      },
      "bank-not-supported-for-verification1-issue": {
        "type": "string",
        "enum": [
          "BANK_NOT_SUPPORTED_FOR_VERIFICATION"
        ]
      },
      "bank-not-supported-for-verification1-description": {
        "type": "string",
        "enum": [
          "Verification for this bank account is not supported."
        ]
      },
      "payer-action-required1-issue": {
        "type": "string",
        "enum": [
          "PAYER_ACTION_REQUIRED"
        ]
      },
      "payer-action-required1-description": {
        "type": "string",
        "enum": [
          "Transaction cannot complete successfully, instruct the buyer to return to PayPal."
        ]
      },
      "apple-pay-amount-mismatch3-issue": {
        "type": "string",
        "enum": [
          "APPLE_PAY_AMOUNT_MISMATCH"
        ]
      },
      "apple-pay-amount-mismatch3-description": {
        "type": "string",
        "enum": [
          "The 'amount' specified in the Order should match the amount that was viewed and authorized by the payer/buyer on Apple Pay. If the amount has changed, please redirect the buyer to authorize the order again via Apple Pay."
        ]
      },
      "currency-not-supported-for-bank1-issue": {
        "type": "string",
        "enum": [
          "CURRENCY_NOT_SUPPORTED_FOR_BANK"
        ]
      },
      "currency-not-supported-for-bank1-description": {
        "type": "string",
        "enum": [
          "The payment_source does not support the currency of the Order. For ACH debit, only USD is supported and for SEPA debit, only EUR is supported."
        ]
      },
      "only-one-bank-source-allowed1-issue": {
        "type": "string",
        "enum": [
          "ONLY_ONE_BANK_SOURCE_ALLOWED"
        ]
      },
      "only-one-bank-source-allowed1-description": {
        "type": "string",
        "enum": [
          "More than one payment method within the bank payment object is not supported."
        ]
      },
      "invalid-iban1-issue": {
        "type": "string",
        "enum": [
          "INVALID_IBAN"
        ]
      },
      "invalid-iban1-description": {
        "type": "string",
        "enum": [
          "IBAN provided is not a valid bank account number."
        ]
      },
      "iban-country-not-supported1-issue": {
        "type": "string",
        "enum": [
          "IBAN_COUNTRY_NOT_SUPPORTED"
        ]
      },
      "iban-country-not-supported1-description": {
        "type": "string",
        "enum": [
          "Country code of issuer bank for the provided IBAN is not supported for SEPA debit payments."
        ]
      },
      "card-number-required2-issue": {
        "type": "string",
        "enum": [
          "CARD_NUMBER_REQUIRED"
        ]
      },
      "card-number-required2-description": {
        "type": "string",
        "enum": [
          "The card number is required when attempting to process payment with card."
        ]
      },
      "card-expiry-required2-issue": {
        "type": "string",
        "enum": [
          "CARD_EXPIRY_REQUIRED"
        ]
      },
      "card-expiry-required2-description": {
        "type": "string",
        "enum": [
          "The card expiry is required when attempting to process payment with card."
        ]
      },
      "vault-instruction-required3-issue": {
        "type": "string",
        "enum": [
          "VAULT_INSTRUCTION_REQUIRED"
        ]
      },
      "vault-instruction-required3-description": {
        "type": "string",
        "enum": [
          "Vault instruction is required. Please use `vault.store_in_vault` to provide vault instruction."
        ]
      },
      "mismatched-vault-id-to-payment-source3-issue": {
        "type": "string",
        "enum": [
          "MISMATCHED_VAULT_ID_TO_PAYMENT_SOURCE"
        ]
      },
      "mismatched-vault-id-to-payment-source3-description": {
        "type": "string",
        "enum": [
          "The vault_id does not match the payment_source provided. Please verify that the vault_id token used refers to the matching payment_source and try again. For example, a PayPal token cannot be passed in the vault_id field in the payment_source.card object."
        ]
      },
      "not-eligible-for-pnref-processing3-issue": {
        "type": "string",
        "enum": [
          "NOT_ELIGIBLE_FOR_PNREF_PROCESSING"
        ]
      },
      "not-eligible-for-pnref-processing3-description": {
        "type": "string",
        "enum": [
          "API caller is not enabled to process payments with the `pnref`. Please contact customer support to request permissions to process transactions with PNREF."
        ]
      },
      "not-eligible-paypal-tx-id-processing-issue": {
        "type": "string",
        "enum": [
          "NOT_ELIGIBLE_FOR_PAYPAL_TRANSACTION_ID_PROCESSING"
        ]
      },
      "paypal-tx-id-processing-permission-needed-desc": {
        "type": "string",
        "enum": [
          "API caller is not enable to process payments using `paypal_transaction_id`. Please contact customer support to request permissions to process transactions with PayPal transaction ID."
        ]
      },
      "paypal-transaction-id-not-found3-issue": {
        "type": "string",
        "enum": [
          "PAYPAL_TRANSACTION_ID_NOT_FOUND"
        ]
      },
      "paypal-transaction-id-not-found3-description": {
        "type": "string",
        "enum": [
          "Specified `paypal_transaction_id` was not found. Verify the value and try the request again."
        ]
      },
      "pnref-not-found3-issue": {
        "type": "string",
        "enum": [
          "PNREF_NOT_FOUND"
        ]
      },
      "pnref-not-found3-description": {
        "type": "string",
        "enum": [
          "Specified `pnref` was not found. Verify the value and try the request again."
        ]
      },
      "invalid-security-code-length3-issue": {
        "type": "string",
        "enum": [
          "INVALID_SECURITY_CODE_LENGTH"
        ]
      },
      "invalid-security-code-length3-description": {
        "type": "string",
        "enum": [
          "The security_code length is invalid for the specified card brand."
        ]
      },
      "platform-fee-payee-cannot-be-same-as-payer-issue": {
        "type": "string",
        "enum": [
          "PLATFORM_FEE_PAYEE_CANNOT_BE_SAME_AS_PAYER"
        ]
      },
      "payer-cannot-pay-themselves-error": {
        "type": "string",
        "enum": [
          "The payer cannot pay themselves. The recipient account of the platform fees must be different from the payer account."
        ]
      },
      "required-param-for-cust-initiated-payment-issue": {
        "type": "string",
        "enum": [
          "REQUIRED_PARAMETER_FOR_CUSTOMER_INITIATED_PAYMENT"
        ]
      },
      "identifier-not-found-issue": {
        "type": "string",
        "enum": [
          "IDENTIFIER_NOT_FOUND"
        ]
      },
      "identifier-not-found-description": {
        "type": "string",
        "enum": [
          "Specified identifier was not found. Please verify the correct identifier was used and try the request again."
        ]
      },
      "shipment-tracker-shipment-direction": {
        "type": "string",
        "description": "To denote whether the shipment is sent forward to the receiver or returned back.",
        "minLength": 1,
        "maxLength": 50,
        "pattern": "^[0-9A-Z_]+$",
        "enum": [
          "FORWARD",
          "RETURN"
        ]
      },
      "shipment-tracker-shipment-uploader": {
        "readOnly": true,
        "type": "string",
        "description": "To denote which party uploaded the shipment tracking info.",
        "minLength": 1,
        "maxLength": 50,
        "pattern": "^[0-9A-Z_]+$",
        "enum": [
          "MERCHANT",
          "CONSUMER",
          "PARTNER"
        ]
      },
      "permission-denied3-issue": {
        "type": "string",
        "enum": [
          "PERMISSION_DENIED"
        ]
      },
      "permission-denied3-description": {
        "type": "string",
        "enum": [
          "You do not have permission to access or perform operations on this resource."
        ]
      },
      "capture-status-not-valid-issue": {
        "type": "string",
        "enum": [
          "CAPTURE_STATUS_NOT_VALID"
        ]
      },
      "capture-status-not-valid-description": {
        "type": "string",
        "enum": [
          "Invalid capture status. Tracker information can only be added to captures in `COMPLETED` state."
        ]
      },
      "item-sku-mismatch-issue": {
        "type": "string",
        "enum": [
          "ITEM_SKU_MISMATCH"
        ]
      },
      "item-sku-mismatch-description": {
        "type": "string",
        "enum": [
          "Item sku must match one of the items sku that was provided during order creation."
        ]
      },
      "capture-id-not-found-issue": {
        "type": "string",
        "enum": [
          "CAPTURE_ID_NOT_FOUND"
        ]
      },
      "capture-id-not-found-description": {
        "type": "string",
        "enum": [
          "Specified capture ID does not exist. Check the capture ID and try again."
        ]
      },
      "msp-not-supported-issue": {
        "type": "string",
        "enum": [
          "MSP_NOT_SUPPORTED"
        ]
      },
      "msp-not-supported-description": {
        "type": "string",
        "enum": [
          "Multiple purchase units are not supported for this operation."
        ]
      },
      "permission-denied4-issue": {
        "type": "string",
        "enum": [
          "PERMISSION_DENIED"
        ]
      },
      "permission-denied4-description": {
        "type": "string",
        "enum": [
          "You do not have permission to access or perform operations on this resource."
        ]
      },
      "tracker-id-not-found-issue": {
        "type": "string",
        "enum": [
          "TRACKER_ID_NOT_FOUND"
        ]
      },
      "tracker-id-not-found-description": {
        "type": "string",
        "enum": [
          "Specified tracker ID does not exist. Check the tracker ID and try again."
        ]
      },
      "invalid-json-pointer-format1-issue": {
        "type": "string",
        "enum": [
          "INVALID_JSON_POINTER_FORMAT"
        ]
      },
      "invalid-json-pointer-format1-description": {
        "type": "string",
        "enum": [
          "Path should be a valid [JSON Pointer](https://tools.ietf.org/html/rfc6901) that references a location within the request where the operation is performed."
        ]
      },
      "not-patchable1-issue": {
        "type": "string",
        "enum": [
          "NOT_PATCHABLE"
        ]
      },
      "not-patchable1-description": {
        "type": "string",
        "enum": [
          "Cannot be patched."
        ]
      },
      "patch-value-required1-issue": {
        "type": "string",
        "enum": [
          "PATCH_VALUE_REQUIRED"
        ]
      },
      "patch-value-required1-description": {
        "type": "string",
        "enum": [
          "Specify a `value` for the field being patched."
        ]
      },
      "patch-path-required1-issue": {
        "type": "string",
        "enum": [
          "PATCH_PATH_REQUIRED"
        ]
      },
      "patch-path-required1-description": {
        "type": "string",
        "enum": [
          "Specify a `value` for the field in which the operation needs to be performed."
        ]
      },
      "item-sku-mismatch1-issue": {
        "type": "string",
        "enum": [
          "ITEM_SKU_MISMATCH"
        ]
      },
      "item-sku-mismatch1-description": {
        "type": "string",
        "enum": [
          "Item sku must match one of the items sku that was provided during order creation."
        ]
      }
    },
    "examples": {
      "patch_request": {
        "value": [
          {
            "op": "replace",
            "path": "/purchase_units/@reference_id=='PUHF'/shipping/address",
            "value": {
              "address_line_1": "2211 N First Street",
              "address_line_2": "Building 17",
              "admin_area_2": "San Jose",
              "admin_area_1": "CA",
              "postal_code": "95131",
              "country_code": "US"
            }
          }
        ]
      },
      "confirm_order_request": {
        "value": {
          "payment_source": {
            "paypal": {
              "name": {
                "given_name": "John",
                "surname": "Doe"
              },
              "email_address": "customer@example.com",
              "experience_context": {
                "payment_method_preference": "IMMEDIATE_PAYMENT_REQUIRED",
                "payment_method_selected": "PAYPAL",
                "brand_name": "EXAMPLE INC",
                "locale": "en-US",
                "landing_page": "LOGIN",
                "shipping_preference": "SET_PROVIDED_ADDRESS",
                "user_action": "PAY_NOW",
                "return_url": "https://example.com/returnUrl",
                "cancel_url": "https://example.com/cancelUrl"
              }
            }
          }
        }
      },
      "CreateOrder": {
        "value": {
          "intent": "CAPTURE",
          "purchase_units": [
            {
              "reference_id": "d9f80740-38f0-11e8-b467-0ed5f89f718b",
              "amount": {
                "currency_code": "USD",
                "value": "100.00"
              }
            }
          ]
        }
      },
      "CreateOrderResponse": {
        "value": {
          "id": "71P66832U2286831S",
          "status": "PAYER_ACTION_REQUIRED",
          "payment_source": { "paypal": {} },
          "links": [
            {
              "href": "https://api.sandbox.paypal.com/v2/checkout/orders/71P66832U2286831S",
              "rel": "self",
              "method": "GET"
            },
            {
              "href": "https://www.sandbox.paypal.com/checkoutnow?token=71P66832U2286831S",
              "rel": "payer-action",
              "method": "GET"
            }
          ]
        }
      },
      "OrderRequest": {
        "value": {
          "intent": "CAPTURE",
          "purchase_units": [
            {
              "reference_id": "d9f80740-38f0-11e8-b467-0ed5f89f718b",
              "amount": {
                "currency_code": "USD",
                "value": "100.00"
              }
            }
          ],
          "payment_source": {
            "paypal": {
              "experience_context": {
                "payment_method_preference": "IMMEDIATE_PAYMENT_REQUIRED",
                "payment_method_selected": "PAYPAL",
                "brand_name": "EXAMPLE INC",
                "locale": "en-US",
                "landing_page": "LOGIN",
                "user_action": "PAY_NOW",
                "return_url": "https://example.com/returnUrl",
                "cancel_url": "https://example.com/cancelUrl"
              }
            }
          }
        }
      },
      "CaptureOrder": {
        "value": {
          "id": "5O190127TN364715T",
          "status": "COMPLETED",
          "payment_source": {
            "paypal": {
              "name": {
                "given_name": "John",
                "surname": "Doe"
              },
              "email_address": "customer@example.com",
              "account_id": "QYR5Z8XDVJNXQ"
            }
          },
          "purchase_units": [
            {
              "reference_id": "d9f80740-38f0-11e8-b467-0ed5f89f718b",
              "shipping": {
                "address": {
                  "address_line_1": "2211 N First Street",
                  "address_line_2": "Building 17",
                  "admin_area_2": "San Jose",
                  "admin_area_1": "CA",
                  "postal_code": "95131",
                  "country_code": "US"
                }
              },
              "payments": {
                "captures": [
                  {
                    "id": "3C679366HH908993F",
                    "status": "COMPLETED",
                    "amount": {
                      "currency_code": "USD",
                      "value": "100.00"
                    },
                    "seller_protection": {
                      "status": "ELIGIBLE",
                      "dispute_categories": [
                        "ITEM_NOT_RECEIVED",
                        "UNAUTHORIZED_TRANSACTION"
                      ]
                    },
                    "final_capture": true,
                    "disbursement_mode": "INSTANT",
                    "seller_receivable_breakdown": {
                      "gross_amount": {
                        "currency_code": "USD",
                        "value": "100.00"
                      },
                      "paypal_fee": {
                        "currency_code": "USD",
                        "value": "3.00"
                      },
                      "net_amount": {
                        "currency_code": "USD",
                        "value": "97.00"
                      }
                    },
                    "create_time": "2018-04-01T21:20:49Z",
                    "update_time": "2018-04-01T21:20:49Z",
                    "links": [
                      {
                        "href": "https://api-m.paypal.com/v2/payments/captures/3C679366HH908993F",
                        "rel": "self",
                        "method": "GET"
                      },
                      {
                        "href": "https://api-m.paypal.com/v2/payments/captures/3C679366HH908993F/refund",
                        "rel": "refund",
                        "method": "POST"
                      }
                    ]
                  }
                ]
              }
            }
          ],
          "payer": {
            "name": {
              "given_name": "John",
              "surname": "Doe"
            },
            "email_address": "customer@example.com",
            "payer_id": "QYR5Z8XDVJNXQ"
          },
          "links": [
            {
              "href": "https://api-m.paypal.com/v2/checkout/orders/5O190127TN364715T",
              "rel": "self",
              "method": "GET"
            }
          ]
        }
      },
      "Order": {
        "value": {
          "id": "5O190127TN364715T",
          "status": "APPROVED",
          "intent": "CAPTURE",
          "payment_source": {
            "paypal": {
              "name": {
                "given_name": "John",
                "surname": "Doe"
              },
              "email_address": "customer@example.com",
              "account_id": "QYR5Z8XDVJNXQ"
            }
          },
          "purchase_units": [
            {
              "reference_id": "d9f80740-38f0-11e8-b467-0ed5f89f718b",
              "amount": {
                "currency_code": "USD",
                "value": "100.00"
              }
            }
          ],
          "payer": {
            "name": {
              "given_name": "John",
              "surname": "Doe"
            },
            "email_address": "customer@example.com",
            "payer_id": "QYR5Z8XDVJNXQ"
          },
          "create_time": "2018-04-01T21:18:49Z",
          "links": [
            {
              "href": "https://api-m.paypal.com/v2/checkout/orders/5O190127TN364715T",
              "rel": "self",
              "method": "GET"
            },
            {
              "href": "https://www.paypal.com/checkoutnow?token=5O190127TN364715T",
              "rel": "approve",
              "method": "GET"
            },
            {
              "href": "https://api-m.paypal.com/v2/checkout/orders/5O190127TN364715T",
              "rel": "update",
              "method": "PATCH"
            },
            {
              "href": "https://api-m.paypal.com/v2/checkout/orders/5O190127TN364715T/capture",
              "rel": "capture",
              "method": "POST"
            }
          ]
        }
      }
    }
  }
}